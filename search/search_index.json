{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Documentation Workflow : main workflows. Label Maker : documentation of the handler for all three tabs. Categorize : Documentation for categorization step Categorizer Zero-shot Few-shot Many-shot Evaluate : Documentation for evaluation step Evaluator Confidence Intervals data loader Utils : Documentation for supporting utility files Category Class Balance File Manager Normalize Text Page Renderer If you found this helpful in your work, please cite:","title":"Home"},{"location":"index.html#documentation","text":"Workflow : main workflows. Label Maker : documentation of the handler for all three tabs. Categorize : Documentation for categorization step Categorizer Zero-shot Few-shot Many-shot Evaluate : Documentation for evaluation step Evaluator Confidence Intervals data loader Utils : Documentation for supporting utility files Category Class Balance File Manager Normalize Text Page Renderer If you found this helpful in your work, please cite:","title":"Documentation"},{"location":"LabeLMaker/streamlit_interface.html","text":"BaseHandler Provides common helper functionality used in evaluation and categorization tasks, such as file upload and download functions. Source code in LabeLMaker/streamlit_interface.py 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 class BaseHandler : \"\"\" Provides common helper functionality used in evaluation and categorization tasks, such as file upload and download functions. \"\"\" def __init__ ( self , ui_helper ): \"\"\" The function initializes an object with a UI helper wrapper provided as a parameter. Args: ui_helper: The `ui_helper` parameter in the `__init__` method is expected to be an object that represents a UI helper wrapper, such as a Streamlit UI object. This parameter is used to interact with the user interface within the class or object where the `__init__` method is defined \"\"\" self . ui = ui_helper # The UI helper wrapper (e.g., Streamlit UI) def _ensure_file ( self , file , upload_message , file_types , key , info_message , accept_multiple_files : bool = False , ): \"\"\" The function `_ensure_file` checks if a file is provided, and if not, prompts the user to upload a file or displays an info message. Args: file: The `file` parameter in the `_ensure_file` method is used to represent the file that needs to be ensured or uploaded. If the `file` is `None`, the method will call the UI uploader to upload a file. upload_message: `upload_message` is a message that will be displayed to prompt the user to upload a file. It serves as an instruction or guidance for the user on what action to take. file_types: The `file_types` parameter in the `_ensure_file` method is used to specify the types of files that can be uploaded. It is typically a list of strings representing the allowed file extensions or MIME types. For example, `file_types=['.txt', '.csv', 'image/jpeg']` key: The `key` parameter in the `_ensure_file` method is used as a unique identifier for the file uploader component. It helps in associating the uploaded file with a specific key, which can be useful for tracking or handling the file data within the application. info_message: The `info_message` parameter in the `_ensure_file` method is a message that will be displayed if the `file` is still `None` after attempting to upload a file using the UI uploader. It serves as an informational message to the user indicating that no file was uploaded. accept_multiple_files (bool): The `accept_multiple_files` parameter in the `_ensure_file` method is a boolean flag that determines whether the file uploader should allow the user to upload multiple files at once. If set to `True`, the file uploader will enable the user to select and upload multiple files simultaneously. If set to `. Defaults to False Returns: the `file` variable, which may have been updated based on the conditions inside the function. If `file` is None initially and remains None after attempting to upload a file, an info message is displayed and None is returned. \"\"\" if file is None : file = self . ui . file_uploader ( label = upload_message , type = file_types , accept_multiple_files = accept_multiple_files , key = key , ) if file is None : self . ui . info ( info_message ) return file def generate_docx_report_download ( self , doc ): \"\"\" The function generates a DOCX report and converts it into bytes for file download. Args: doc: The `doc` parameter in the `generate_docx_report_download` function is expected to be a DOCX Document object that you want to convert into bytes for file download. Returns: The function `generate_docx_report_download` returns the DOCX document converted into bytes to allow file download. \"\"\" \"\"\" Convert the DOCX Document into bytes to allow file download. \"\"\" temp_stream = io . BytesIO () doc . save ( temp_stream ) temp_stream . seek ( 0 ) return temp_stream . read () __init__ ( ui_helper ) The function initializes an object with a UI helper wrapper provided as a parameter. Parameters: ui_helper \u2013 The ui_helper parameter in the __init__ method is expected to be an object that represents a UI helper wrapper, such as a Streamlit UI object. This parameter is used to interact with the user interface within the class or object where the __init__ method is defined Source code in LabeLMaker/streamlit_interface.py 36 37 38 39 40 41 42 43 44 45 def __init__ ( self , ui_helper ): \"\"\" The function initializes an object with a UI helper wrapper provided as a parameter. Args: ui_helper: The `ui_helper` parameter in the `__init__` method is expected to be an object that represents a UI helper wrapper, such as a Streamlit UI object. This parameter is used to interact with the user interface within the class or object where the `__init__` method is defined \"\"\" self . ui = ui_helper # The UI helper wrapper (e.g., Streamlit UI) generate_docx_report_download ( doc ) The function generates a DOCX report and converts it into bytes for file download. Parameters: doc \u2013 The doc parameter in the generate_docx_report_download function is expected to be a DOCX Document object that you want to convert into bytes for file download. Returns: \u2013 The function generate_docx_report_download returns the DOCX document converted into bytes to allow file download. Source code in LabeLMaker/streamlit_interface.py 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 def generate_docx_report_download ( self , doc ): \"\"\" The function generates a DOCX report and converts it into bytes for file download. Args: doc: The `doc` parameter in the `generate_docx_report_download` function is expected to be a DOCX Document object that you want to convert into bytes for file download. Returns: The function `generate_docx_report_download` returns the DOCX document converted into bytes to allow file download. \"\"\" \"\"\" Convert the DOCX Document into bytes to allow file download. \"\"\" temp_stream = io . BytesIO () doc . save ( temp_stream ) temp_stream . seek ( 0 ) return temp_stream . read () CategorizeHandler Bases: BaseHandler Handles file uploads and categorization workflows. Includes both single and multiple file upload, workflow setup and execution, and processing of categorization results using zero-shot, few-shot, or many-shot methods. Source code in LabeLMaker/streamlit_interface.pyclass CategorizeHandler ( BaseHandler ): \"\"\" Handles file uploads and categorization workflows. Includes both single and multiple file upload, workflow setup and execution, and processing of categorization results using zero-shot, few-shot, or many-shot methods. \"\"\" def __init__ ( self , ui_helper , azure_key = None ): \"\"\" The function initializes a class instance with a UI helper and an optional Azure key for file management and configuration. Args: ui_helper: The `ui_helper` parameter is an object that provides helper functions or utilities related to user interface operations. It is being passed to the constructor of the current class as an argument. azure_key: The `azure_key` parameter is an optional parameter that can be passed to the `__init__` method of a class. It is used to provide an Azure key that may be required for certain operations within the class. If a value is provided for `azure_key`, it will be used to \"\"\" super () . __init__ ( ui_helper ) self . fm = FileManager ( azure_key ) self . config = Config def get_document_analysis_client ( self ): \"\"\" This function returns a valid document analysis client based on the configuration provided. Returns: A valid document analysis client based on the configuration is being returned if the condition `if hasattr(self.config, \"AZURE_DOCAI_KEY\") and self.config.AZURE_DOCAI_KEY` is met. Otherwise, `None` is returned. \"\"\" if hasattr ( self . config , \"AZURE_DOCAI_KEY\" ) and self . config . AZURE_DOCAI_KEY : return create_document_analysis_client ( self . config . AZURE_DOCAI_KEY ) return None def _get_default_categories ( self , df , col ): \"\"\" The function `_get_default_categories` retrieves unique values from a specified column in a DataFrame, with a warning if there are more than 10 unique values. Args: df: The `df` parameter in the `_get_default_categories` method is typically a pandas DataFrame that contains the data from which you want to extract unique values for a specific column (`col`). The method checks if the specified column exists in the DataFrame and then retrieves the unique values from that column to generate a col: The `col` parameter in the `_get_default_categories` method is used to specify the column name from the DataFrame (`df`) for which you want to retrieve default categories. The method checks if the column name is valid (not empty and exists in the DataFrame), then it retrieves unique non-null values Returns: An empty string is being returned if the conditions in the function are not met. \"\"\" if col and col . strip () != \"\" and col in df . columns : unique_values = df [ col ] . dropna () . unique () if len ( unique_values ) > self . config . MAX_RECOMMENDED_GROUPS : self . ui . warning ( \"There are more than 10 unique values in the column. \" \"Auto-population of categories may not be practical.\" ) return \"\" return \",\" . join ([ str ( val ) for val in unique_values ]) return \"\" def _prepare_ground_truth_examples ( self , df , id_col , text_col , gt_col , few_shot_count = 2 , many_shot_train_ratio = 0.8 ): \"\"\" The function `_prepare_ground_truth_examples` prepares few-shot and many-shot examples with corresponding IDs from a DataFrame based on specified parameters. Args: df: DataFrame containing the data id_col: The `id_col` parameter in the `_prepare_ground_truth_examples` function refers to the column in the DataFrame `df` that contains unique identifiers for each record. This column is used to identify and track individual records within the dataset. text_col: The `text_col` parameter in the `_prepare_ground_truth_examples` method refers to the column in the DataFrame `df` that contains the text data for each example. This column will be used to extract the text information for creating examples during the preparation of ground truth examples. gt_col: The `gt_col` parameter in the `_prepare_ground_truth_examples` method refers to the column in the DataFrame `df` that contains the ground truth labels for the examples. This column is used for grouping the examples based on their ground truth labels during the preparation process. few_shot_count: The `few_shot_count` parameter in the `_prepare_ground_truth_examples` function determines the number of examples that will be included in the few-shot learning set. It specifies how many randomly sampled examples will be selected for each unique label in the dataset to create a few-shot learning subset. Defaults to 2 many_shot_train_ratio: The `many_shot_train_ratio` parameter in the `_prepare_ground_truth_examples` function determines the ratio of examples that will be used for training in the \"many-shot\" category. For example, if `many_shot_train_ratio=0.8`, it means that 80% of the examples for Returns: The function `_prepare_ground_truth_examples` returns four values: `few_shot_examples`, `few_shot_ids`, `many_shot_examples`, and `many_shot_test_ids`. \"\"\" few_shot_examples = [] few_shot_ids = set () many_shot_examples = [] many_shot_test_ids = set () df_gt = df [[ id_col , text_col , gt_col ]] . copy () df_gt [ gt_col ] = df_gt [ gt_col ] . astype ( str ) . str . lower () grouped = df_gt . groupby ( gt_col ) for label , group in grouped : records = group . to_dict ( orient = \"records\" ) count = min ( few_shot_count , len ( records )) if count > 0 : sampled = random . sample ( records , count ) for rec in sampled : few_shot_examples . append ( Example ( text_with_label = str ( rec [ text_col ]), label = str ( rec [ gt_col ])) ) few_shot_ids . add ( str ( rec [ id_col ])) if len ( records ) > 1 : shuffled = records . copy () random . shuffle ( shuffled ) train_size = max ( 1 , int ( many_shot_train_ratio * len ( records ))) train_examples = shuffled [: train_size ] test_examples = shuffled [ train_size :] for rec in train_examples : many_shot_examples . append ( Example ( text_with_label = str ( rec [ text_col ]), label = str ( rec [ gt_col ])) ) for rec in test_examples : many_shot_test_ids . add ( str ( rec [ id_col ])) return few_shot_examples , few_shot_ids , many_shot_examples , many_shot_test_ids def setup_workflow ( self , df ): \"\"\" The `setup_workflow` function in Python sets up parameters for a workflow, including selecting columns, creating unique identifiers, and choosing evaluation approaches. Args: df: The `setup_workflow` function is designed to set up parameters for a workflow based on user interactions with a UI. The function takes a DataFrame `df` as input and performs the following tasks: Returns: The `setup_workflow` function returns a dictionary `params` containing various parameters set based on user inputs and selections made during the workflow setup process. The function collects information such as the mode (Evaluation or Production), unique identifier column, categorizing column, ground truth column, evaluation techniques selected, and related parameters for Few Shot and Many Shot evaluation approaches. Additionally, it includes information about default categories and descriptions \"\"\" params = {} advanced_mode = self . ui . checkbox ( \"Advanced Mode\" , help = \"For users with ground truth labels. Check to run evaluation pipeline.\" , key = \"advanced_mode\" , ) if advanced_mode : self . ui . info ( \"Advanced Mode is activated: Users can select classification mode (e.g., zero shot, few shot, or many shot)\" ) else : self . ui . info ( \"Advanced Mode is not activated: Classification will be determined by number of examples provided\" ) params [ \"mode\" ] = \"Evaluation\" if advanced_mode else \"Production\" if not self . ui . session_state . get ( \"uniqueIdSetup_done\" ): self . ui . markdown ( \"### Unique Identifier Setup\" ) id_choice = self . ui . radio ( \"How would you like to specify a unique identifier?\" , options = [ \"Create new ID column\" , \"Use an existing column\" ], index = 0 , key = \"id_choice\" , ) if id_choice == \"Create new ID column\" : new_id_col = self . ui . text_input ( \"Enter name for the new ID column\" , value = \"id\" , key = \"new_id_column\" ) if self . ui . button ( \"Create ID Column\" , key = \"create_id_column\" ): if new_id_col not in df . columns : df [ new_id_col ] = df . index . astype ( str ) self . ui . success ( f \"New ID column ' { new_id_col } ' created.\" ) else : self . ui . info ( f \"Column ' { new_id_col } ' already exists; using it.\" ) self . ui . session_state [ \"single_file_df\" ] = df self . ui . session_state [ \"selected_id_column\" ] = new_id_col self . ui . session_state [ \"uniqueIdSetup_done\" ] = True else : selected_existing = self . ui . selectbox ( \"Select the column to use as the unique identifier\" , options = df . columns . tolist (), key = \"existing_id_column\" , ) if self . ui . button ( \"Confirm ID Column\" , key = \"confirm_id_column\" ): self . ui . session_state [ \"selected_id_column\" ] = selected_existing self . ui . session_state [ \"uniqueIdSetup_done\" ] = True sel_id = self . ui . session_state . get ( \"selected_id_column\" ) if sel_id and sel_id not in df . columns : df [ sel_id ] = df . index . astype ( str ) self . ui . session_state [ \"single_file_df\" ] = df params [ \"index_column\" ] = self . ui . session_state . get ( \"selected_id_column\" ) self . ui . write ( f \"Using ' { params [ 'index_column' ] } ' as the unique identifier column.\" ) df_columns = df . columns . tolist () params [ \"categorizing_column\" ] = self . ui . selectbox ( \"Select the column with text data you want to label\" , options = df_columns , key = \"categorizing_column\" , ) if \"ground_truth_column\" not in self . ui . session_state : self . ui . session_state [ \"ground_truth_column\" ] = df_columns [ 0 ] gt_col = self . ui . selectbox ( \"Select the column with ground truth labels\" , options = df_columns , key = \"ground_truth_column\" , index = df_columns . index ( self . ui . session_state [ \"ground_truth_column\" ]), ) params [ \"ground_truth_column\" ] = gt_col if params [ \"mode\" ] == \"Evaluation\" : eval_techniques = self . ui . multiselect ( \"Select the evaluation approaches to run:\" , options = [ \"Zero Shot\" , \"Few Shot\" , \"Many Shot\" ], default = [ \"Zero Shot\" ], key = \"evaluation_techniques\" , ) params [ \"evaluation_techniques\" ] = eval_techniques if \"Few Shot\" in eval_techniques : few_shot_count = self . ui . number_input ( \"Enter maximum examples per category (Few Shot)\" , min_value = 1 , value = 2 , key = \"few_shot_count\" , ) params [ \"few_shot_count\" ] = few_shot_count if \"Many Shot\" in eval_techniques : many_shot_train_ratio = self . ui . number_input ( \"Enter train proportion for Many Shot (0 to 1)\" , min_value = 0.0 , max_value = 1.0 , value = 0.8 , key = \"many_shot_train_ratio\" , ) params [ \"many_shot_train_ratio\" ] = many_shot_train_ratio default_categories = self . _get_default_categories ( df , gt_col ) categories_dict , categories_with_descriptions = CategoryManager . define_categories ( self . ui , \"tab1\" , unique_values_str = default_categories ) params [ \"categories_dict\" ] = categories_dict params [ \"categories_with_descriptions\" ] = categories_with_descriptions return params def categorize_data ( self , df , params , zs_prompty , fs_prompty ): \"\"\" The function categorizes data based on specified parameters, using different techniques such as Zero Shot, Few Shot, and Many Shot categorization. Args: df: The `df` parameter in the `categorize_data` function is typically a pandas DataFrame containing the data that needs to be categorized. This DataFrame should include columns with the data to be categorized, as well as any additional columns required for the categorization process such as unique identifiers, ground truth labels params: The `params` dictionary contains the following keys and their corresponding values: zs_prompty: The `zs_prompty` parameter in the code snippet refers to the path of the Zero Shot categorization model that will be used in the workflow. This model is utilized for performing Zero Shot categorization, where the model predicts categories for data points without any prior training on those specific categories. fs_prompty: The `fs_prompty` parameter in the provided code snippet is used as the path to the Few-Shot Categorizer model for categorizing data. This path is utilized when running the workflow for Few Shot categorization within the `categorize_data` method. The Few-Shot Categor Returns: The `categorize_data` function returns a DataFrame `merged_df` that contains the original data along with additional columns for predicted category and rationale based on the categorization process specified in the function. The specific columns added to `merged_df` depend on the categorization mode chosen (Evaluation or Production) and the evaluation techniques used (Zero Shot, Few Shot, Many Shot). \"\"\" index_column = params [ \"index_column\" ] cat_col = params [ \"categorizing_column\" ] mode_choice = params [ \"mode\" ] if index_column not in df . columns : self . ui . info ( f \"Unique ID column ' { index_column } ' was not found. Creating new column ' { index_column } '.\" ) df [ index_column ] = df . index . astype ( str ) self . ui . session_state [ \"selected_id_column\" ] = index_column categories_dict = params . get ( \"categories_dict\" , {}) text_to_label = df [ cat_col ] . astype ( str ) . tolist () unique_ids = df [ index_column ] . astype ( str ) . tolist () if mode_choice == \"Evaluation\" : categorization_request = CategoryManager . create_request ( unique_ids , text_to_label , categories_dict ) gt_column = params [ \"ground_truth_column\" ] eval_techniques = params . get ( \"evaluation_techniques\" , [ \"Zero Shot\" ]) predictions = {} few_shot_count = params . get ( \"few_shot_count\" , 2 ) many_shot_train_ratio = params . get ( \"many_shot_train_ratio\" , 0.8 ) ( few_shot_examples , few_shot_ids , many_shot_examples , many_shot_test_ids , ) = self . _prepare_ground_truth_examples ( df , index_column , cat_col , gt_column , few_shot_count , many_shot_train_ratio ) for technique in eval_techniques : if technique == \"Zero Shot\" : with self . ui . spinner ( \"Running workflow (Zero Shot categorization)...\" ): categorizer = ZeroShotCategorizer ( prompty_path = zs_prompty , category_request = categorization_request ) results = categorizer . process () predictions [ \"Zero Shot\" ] = results elif technique == \"Few Shot\" : few_shot_request = CategoryManager . create_request ( unique_ids , text_to_label , categories_dict , few_shot_examples ) with self . ui . spinner ( \"Running workflow (Few Shot categorization)...\" ): categorizer = FewShotCategorizer ( prompty_path = fs_prompty , category_request = few_shot_request ) results = categorizer . process () filtered_results = [ r for r in results if str ( r [ 0 ]) not in few_shot_ids ] predictions [ \"Few Shot\" ] = filtered_results elif technique == \"Many Shot\" : many_shot_request = CategoryManager . create_request ( unique_ids , text_to_label , categories_dict , many_shot_examples ) with self . ui . spinner ( \"Running workflow (Many Shot categorization)...\" ): categorizer = ManyshotClassifier ( categorization_request = many_shot_request , min_class_count = self . config . MIN_SAMPLES_MANY_SHOT , ) results = categorizer . process () results = [ r for r in results if str ( r [ 0 ]) in many_shot_test_ids ] predictions [ \"Many Shot\" ] = results merged_df = df . copy () for tech , results in predictions . items (): tech_pred_df = pd . DataFrame ( [( row [ 0 ], row [ 2 ], row [ 3 ]) for row in results ], columns = [ index_column , f \"Predicted Category ( { tech } )\" , f \"Rationale ( { tech } )\" ], ) merged_df [ index_column ] = merged_df [ index_column ] . astype ( str ) tech_pred_df [ index_column ] = tech_pred_df [ index_column ] . astype ( str ) merged_df = pd . merge ( merged_df , tech_pred_df , on = index_column , how = \"left\" ) return merged_df else : gt_column = params [ \"ground_truth_column\" ] all_examples = [ ( str ( text ), str ( gt )) for text , gt in zip ( df [ cat_col ], df [ gt_column ] . astype ( str ) . str . lower ()) if gt ] categorization_request = CategoryManager . create_request ( unique_ids , text_to_label , categories_dict , all_examples ) num_examples = len ( all_examples ) self . ui . write ( f \"Number of examples provided: { num_examples } \" ) categorized_results = [] if num_examples == 0 : with self . ui . spinner ( \"Running workflow (Zero-Shot Production)...\" ): categorizer = ZeroShotCategorizer ( prompty_path = zs_prompty , category_request = categorization_request ) categorized_results = categorizer . process () elif num_examples < Config . MIN_SAMPLES_MANY_SHOT : with self . ui . spinner ( \"Running workflow (Few-Shot Production)...\" ): categorizer = FewShotCategorizer ( prompty_path = fs_prompty , category_request = categorization_request ) categorized_results = categorizer . process () else : label_counts = df [ gt_column ] . value_counts () min_class_samples = label_counts . min () if not label_counts . empty else 0 with self . ui . spinner ( \"Running workflow (Many-Shot Production)...\" ): categorizer = ManyshotClassifier ( categorization_request = categorization_request , min_class_count = min_class_samples , ) categorized_results = categorizer . process () results_df = pd . DataFrame ( [( row [ 0 ], row [ 2 ], row [ 3 ]) for row in categorized_results ], columns = [ index_column , \"Category\" , \"Rationale\" ], ) df [ index_column ] = df [ index_column ] . astype ( str ) results_df [ index_column ] = results_df [ index_column ] . astype ( str ) merged_df = pd . merge ( df , results_df , on = index_column , how = \"left\" ) final_columns = list ( df . columns ) + [ \"Category\" , \"Rationale\" ] merged_df = merged_df [ final_columns ] return merged_df def handle_single_upload ( self , zs_prompty = Path ( Config . ZS_PROMPTY ), fs_prompty = Path ( Config . FS_PROMPTY ) ): \"\"\" The `handle_single_upload` function handles the uploading, processing, and categorization of a single CSV or XLSX file. Args: zs_prompty: The `zs_prompty` parameter in the `handle_single_upload` method is set to the value of `Path(Config.ZS_PROMPTY)`. This means that the `zs_prompty` parameter is a Path object initialized with the value of `Config.ZS_PROMPTY`. fs_prompty: The `fs_prompty` parameter in the `handle_single_upload` method is a Path object that is set to the value of `Config.FS_PROMPTY`. It is used as a default value for the parameter if no value is provided when calling the method. The purpose of this parameter is to Returns: The `handle_single_upload` method returns either None if the uploaded file is None or if there is an error processing the uploaded file. Otherwise, it does not explicitly return a value, but it performs various operations such as setting session state variables, processing the uploaded file, categorizing the data, and providing a download button for the results. \"\"\" file = self . _ensure_file ( file = None , upload_message = \"Upload your file\" , file_types = [ \"csv\" , \"xlsx\" ], key = \"single_file_uploader\" , info_message = \"Please upload a CSV or XLSX file to proceed.\" , ) if file is None : return self . ui . session_state [ \"uploaded_file_single\" ] = file try : document_analysis_client = self . get_document_analysis_client () upload_manager = StreamlitUploadManager ( file , accept_multiple_files = False , document_analysis_client = document_analysis_client ) file_data , extension = upload_manager . process_upload () self . ui . session_state [ \"single_file_df\" ] = file_data except Exception as e : self . ui . error ( f \"Error processing the uploaded file: { e } \" ) return if self . ui . session_state . get ( \"single_file_df\" ) is not None : df = self . ui . session_state [ \"single_file_df\" ] self . ui . write ( f \"Uploaded file: { file . name } \" ) params = self . setup_workflow ( df ) if self . ui . button ( \"Categorize\" , key = \"tab1_submit\" ): merged_df = self . categorize_data ( df , params , zs_prompty , fs_prompty ) csv_data = merged_df . to_csv ( index = False ) . encode ( \"utf-8\" ) self . ui . download_button ( label = \"Download Results\" , data = csv_data , file_name = \"AI_Generated_Categorization.csv\" , mime = \"text/csv\" , ) def process_multiple_files ( self , uploaded_files ): \"\"\" The function `process_multiple_files` processes uploaded files using a document analysis client and returns the filenames and corresponding texts. Args: uploaded_files: Uploaded_files is a list of files that have been uploaded by the user. Each file in the list represents a file that the user has uploaded for processing. Returns: The `process_multiple_files` function returns two lists: `filenames` and `texts`. The `filenames` list contains the names of the uploaded files, while the `texts` list contains the processed data from the uploaded files. \"\"\" filenames = [] texts = [] document_analysis_client = self . get_document_analysis_client () for file in uploaded_files : upload_manager = StreamlitUploadManager ( file , accept_multiple_files = False , document_analysis_client = document_analysis_client ) file_data , _ = upload_manager . process_upload () if file_data : filenames . append ( file . name ) texts . append ( file_data ) return filenames , texts def process_results ( self , results ): \"\"\" The function `process_results` displays categorization results with optional formatting options. Args: results: The `results` parameter in the `process_results` method is used to pass the results that need to be processed or displayed. It could be any data structure or information that the method needs to work with, such as a list, dictionary, string, etc. \"\"\" self . ui . write ( \"Categorization Results:\" ) self . ui . write ( results ) def handle_multiple_upload ( self , zs_prompty = Path ( Config . ZS_PROMPTY ), fs_prompty = Path ( Config . FS_PROMPTY ) ): \"\"\" The function `handle_multiple_upload` manages the upload and processing of multiple files, categorizes text excerpts, and processes the categorization results using either a few-shot or zero-shot categorizer. Args: zs_prompty: The `zs_prompty` parameter in the `handle_multiple_upload` function is a Path object that represents the path to the ZS_PROMPTY configuration in the Config module. It is used as a default value for the `prompty_path` parameter when initializing a ZeroShotCategorizer object in fs_prompty: The `fs_prompty` parameter in the `handle_multiple_upload` function seems to be a Path object that is initialized with the value from `Config.FS_PROMPTY`. It is used as the `prompty_path` parameter when creating instances of `FewShotCategorizer` or `ZeroShotCategorizer` \"\"\" # Provide a \"Clear All\" option as before. if self . ui . button ( \"Clear All\" , key = \"multi_clear_all\" ): if \"uploaded_files_multiple\" in self . ui . session_state : del self . ui . session_state [ \"uploaded_files_multiple\" ] if \"processed_files_multiple\" in self . ui . session_state : del self . ui . session_state [ \"processed_files_multiple\" ] self . ui . rerun () # Use the common file uploader helper for multiple files. files = self . _ensure_file ( file = None , upload_message = \"Upload your files\" , file_types = [ \"docx\" , \"pdf\" ], key = \"multiple_file_uploader\" , info_message = \"Please upload DOCX or PDF files to proceed.\" , ) if files : self . ui . session_state [ \"uploaded_files_multiple\" ] = files file_names = [ file . name for file in files ] if isinstance ( files , list ) else [ files . name ] self . ui . write ( f \"Uploaded files: { file_names } \" ) filenames , texts = self . process_multiple_files ( files ) self . ui . session_state [ \"processed_files_multiple\" ] = ( filenames , texts ) if self . ui . session_state . get ( \"processed_files_multiple\" ) is not None : filenames , texts = self . ui . session_state [ \"processed_files_multiple\" ] text_to_label = texts categories_dict , examples = CategoryManager . define_categories ( self . ui , \"tab2\" , get_file_examples = True ) self . ui . write ( \"Texts (excerpts) to label:\" ) for text in text_to_label [: 5 ]: self . ui . write ( text [: 250 ]) if self . ui . button ( \"Categorize\" , key = \"tab2_submit\" ): categorized_results = [] if examples : categorization_request = CategoryManager . create_request ( filenames , text_to_label , categories_dict , examples ) few_shot_categorizer = FewShotCategorizer ( prompty_path = fs_prompty , category_request = categorization_request ) categorized_results = few_shot_categorizer . process () else : categorization_request = CategoryManager . create_request ( filenames , text_to_label , categories_dict ) zero_shot_categorizer = ZeroShotCategorizer ( prompty_path = zs_prompty , category_request = categorization_request ) categorized_results = zero_shot_categorizer . process () self . process_results ( categorized_results , replace_newlines = True , fill_missing = True ) __init__ ( ui_helper , azure_key = None ) The function initializes a class instance with a UI helper and an optional Azure key for file management and configuration. Parameters: ui_helper \u2013 The ui_helper parameter is an object that provides helper functions or utilities related to user interface operations. It is being passed to the constructor of the current class as an argument. azure_key: The azure_key parameter is an optional parameter that can be passed to the __init__ method of a class. It is used to provide an Azure key that may be required for certain operations within the class. If a value is provided for azure_key , it will be used to Source code in LabeLMaker/streamlit_interface.py 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 def __init__ ( self , ui_helper , azure_key = None ): \"\"\" The function initializes a class instance with a UI helper and an optional Azure key for file management and configuration. Args: ui_helper: The `ui_helper` parameter is an object that provides helper functions or utilities related to user interface operations. It is being passed to the constructor of the current class as an argument. azure_key: The `azure_key` parameter is an optional parameter that can be passed to the `__init__` method of a class. It is used to provide an Azure key that may be required for certain operations within the class. If a value is provided for `azure_key`, it will be used to \"\"\" super () . __init__ ( ui_helper ) self . fm = FileManager ( azure_key ) self . config = Config categorize_data ( df , params , zs_prompty , fs_prompty ) The function categorizes data based on specified parameters, using different techniques such as Zero Shot, Few Shot, and Many Shot categorization. Parameters: df \u2013 The df parameter in the categorize_data function is typically a pandas DataFrame containing the data that needs to be categorized. This DataFrame should include columns with the data to be categorized, as well as any additional columns required for the categorization process such as unique identifiers, ground truth labels params: The params dictionary contains the following keys and their corresponding values: zs_prompty: The zs_prompty parameter in the code snippet refers to the path of the Zero Shot categorization model that will be used in the workflow. This model is utilized for performing Zero Shot categorization, where the model predicts categories for data points without any prior training on those specific categories. fs_prompty: The fs_prompty parameter in the provided code snippet is used as the path to the Few-Shot Categorizer model for categorizing data. This path is utilized when running the workflow for Few Shot categorization within the categorize_data method. The Few-Shot Categor Returns: \u2013 The categorize_data function returns a DataFrame merged_df that contains the original data along with additional columns for predicted category and rationale based on the categorization process specified in the function. The specific columns added to merged_df depend on the categorization mode chosen (Evaluation or Production) and the evaluation techniques used (Zero Shot, Few Shot, Many Shot). Source code in LabeLMaker/streamlit_interface.pydef categorize_data ( self , df , params , zs_prompty , fs_prompty ): \"\"\" The function categorizes data based on specified parameters, using different techniques such as Zero Shot, Few Shot, and Many Shot categorization. Args: df: The `df` parameter in the `categorize_data` function is typically a pandas DataFrame containing the data that needs to be categorized. This DataFrame should include columns with the data to be categorized, as well as any additional columns required for the categorization process such as unique identifiers, ground truth labels params: The `params` dictionary contains the following keys and their corresponding values: zs_prompty: The `zs_prompty` parameter in the code snippet refers to the path of the Zero Shot categorization model that will be used in the workflow. This model is utilized for performing Zero Shot categorization, where the model predicts categories for data points without any prior training on those specific categories. fs_prompty: The `fs_prompty` parameter in the provided code snippet is used as the path to the Few-Shot Categorizer model for categorizing data. This path is utilized when running the workflow for Few Shot categorization within the `categorize_data` method. The Few-Shot Categor Returns: The `categorize_data` function returns a DataFrame `merged_df` that contains the original data along with additional columns for predicted category and rationale based on the categorization process specified in the function. The specific columns added to `merged_df` depend on the categorization mode chosen (Evaluation or Production) and the evaluation techniques used (Zero Shot, Few Shot, Many Shot). \"\"\" index_column = params [ \"index_column\" ] cat_col = params [ \"categorizing_column\" ] mode_choice = params [ \"mode\" ] if index_column not in df . columns : self . ui . info ( f \"Unique ID column ' { index_column } ' was not found. Creating new column ' { index_column } '.\" ) df [ index_column ] = df . index . astype ( str ) self . ui . session_state [ \"selected_id_column\" ] = index_column categories_dict = params . get ( \"categories_dict\" , {}) text_to_label = df [ cat_col ] . astype ( str ) . tolist () unique_ids = df [ index_column ] . astype ( str ) . tolist () if mode_choice == \"Evaluation\" : categorization_request = CategoryManager . create_request ( unique_ids , text_to_label , categories_dict ) gt_column = params [ \"ground_truth_column\" ] eval_techniques = params . get ( \"evaluation_techniques\" , [ \"Zero Shot\" ]) predictions = {} few_shot_count = params . get ( \"few_shot_count\" , 2 ) many_shot_train_ratio = params . get ( \"many_shot_train_ratio\" , 0.8 ) ( few_shot_examples , few_shot_ids , many_shot_examples , many_shot_test_ids , ) = self . _prepare_ground_truth_examples ( df , index_column , cat_col , gt_column , few_shot_count , many_shot_train_ratio ) for technique in eval_techniques : if technique == \"Zero Shot\" : with self . ui . spinner ( \"Running workflow (Zero Shot categorization)...\" ): categorizer = ZeroShotCategorizer ( prompty_path = zs_prompty , category_request = categorization_request ) results = categorizer . process () predictions [ \"Zero Shot\" ] = results elif technique == \"Few Shot\" : few_shot_request = CategoryManager . create_request ( unique_ids , text_to_label , categories_dict , few_shot_examples ) with self . ui . spinner ( \"Running workflow (Few Shot categorization)...\" ): categorizer = FewShotCategorizer ( prompty_path = fs_prompty , category_request = few_shot_request ) results = categorizer . process () filtered_results = [ r for r in results if str ( r [ 0 ]) not in few_shot_ids ] predictions [ \"Few Shot\" ] = filtered_results elif technique == \"Many Shot\" : many_shot_request = CategoryManager . create_request ( unique_ids , text_to_label , categories_dict , many_shot_examples ) with self . ui . spinner ( \"Running workflow (Many Shot categorization)...\" ): categorizer = ManyshotClassifier ( categorization_request = many_shot_request , min_class_count = self . config . MIN_SAMPLES_MANY_SHOT , ) results = categorizer . process () results = [ r for r in results if str ( r [ 0 ]) in many_shot_test_ids ] predictions [ \"Many Shot\" ] = results merged_df = df . copy () for tech , results in predictions . items (): tech_pred_df = pd . DataFrame ( [( row [ 0 ], row [ 2 ], row [ 3 ]) for row in results ], columns = [ index_column , f \"Predicted Category ( { tech } )\" , f \"Rationale ( { tech } )\" ], ) merged_df [ index_column ] = merged_df [ index_column ] . astype ( str ) tech_pred_df [ index_column ] = tech_pred_df [ index_column ] . astype ( str ) merged_df = pd . merge ( merged_df , tech_pred_df , on = index_column , how = \"left\" ) return merged_df else : gt_column = params [ \"ground_truth_column\" ] all_examples = [ ( str ( text ), str ( gt )) for text , gt in zip ( df [ cat_col ], df [ gt_column ] . astype ( str ) . str . lower ()) if gt ] categorization_request = CategoryManager . create_request ( unique_ids , text_to_label , categories_dict , all_examples ) num_examples = len ( all_examples ) self . ui . write ( f \"Number of examples provided: { num_examples } \" ) categorized_results = [] if num_examples == 0 : with self . ui . spinner ( \"Running workflow (Zero-Shot Production)...\" ): categorizer = ZeroShotCategorizer ( prompty_path = zs_prompty , category_request = categorization_request ) categorized_results = categorizer . process () elif num_examples < Config . MIN_SAMPLES_MANY_SHOT : with self . ui . spinner ( \"Running workflow (Few-Shot Production)...\" ): categorizer = FewShotCategorizer ( prompty_path = fs_prompty , category_request = categorization_request ) categorized_results = categorizer . process () else : label_counts = df [ gt_column ] . value_counts () min_class_samples = label_counts . min () if not label_counts . empty else 0 with self . ui . spinner ( \"Running workflow (Many-Shot Production)...\" ): categorizer = ManyshotClassifier ( categorization_request = categorization_request , min_class_count = min_class_samples , ) categorized_results = categorizer . process () results_df = pd . DataFrame ( [( row [ 0 ], row [ 2 ], row [ 3 ]) for row in categorized_results ], columns = [ index_column , \"Category\" , \"Rationale\" ], ) df [ index_column ] = df [ index_column ] . astype ( str ) results_df [ index_column ] = results_df [ index_column ] . astype ( str ) merged_df = pd . merge ( df , results_df , on = index_column , how = \"left\" ) final_columns = list ( df . columns ) + [ \"Category\" , \"Rationale\" ] merged_df = merged_df [ final_columns ] return merged_df get_document_analysis_client () This function returns a valid document analysis client based on the configuration provided. Returns: \u2013 A valid document analysis client based on the configuration is being returned if the condition `if hasattr(self.config, \"AZURE_DOCAI_KEY\") and self.config.AZURE_DOCAI_KEY is met. Otherwise, None` is returned. Source code in LabeLMaker/streamlit_interface.py 435 436 437 438 439 440 441 442 443 444 445 446 def get_document_analysis_client ( self ): \"\"\" This function returns a valid document analysis client based on the configuration provided. Returns: A valid document analysis client based on the configuration is being returned if the condition `if hasattr(self.config, \"AZURE_DOCAI_KEY\") and self.config.AZURE_DOCAI_KEY` is met. Otherwise, `None` is returned. \"\"\" if hasattr ( self . config , \"AZURE_DOCAI_KEY\" ) and self . config . AZURE_DOCAI_KEY : return create_document_analysis_client ( self . config . AZURE_DOCAI_KEY ) return None handle_multiple_upload ( zs_prompty = Path ( Config . ZS_PROMPTY ), fs_prompty = Path ( Config . FS_PROMPTY )) The function handle_multiple_upload manages the upload and processing of multiple files, categorizes text excerpts, and processes the categorization results using either a few-shot or zero-shot categorizer. Parameters: zs_prompty \u2013 The zs_prompty parameter in the handle_multiple_upload function is a Path object that represents the path to the ZS_PROMPTY configuration in the Config module. It is used as a default value for the prompty_path parameter when initializing a ZeroShotCategorizer object in fs_prompty: The fs_prompty parameter in the handle_multiple_upload function seems to be a Path object that is initialized with the value from Config.FS_PROMPTY . It is used as the prompty_path parameter when creating instances of FewShotCategorizer or ZeroShotCategorizer Source code in LabeLMaker/streamlit_interface.py 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 def handle_multiple_upload ( self , zs_prompty = Path ( Config . ZS_PROMPTY ), fs_prompty = Path ( Config . FS_PROMPTY ) ): \"\"\" The function `handle_multiple_upload` manages the upload and processing of multiple files, categorizes text excerpts, and processes the categorization results using either a few-shot or zero-shot categorizer. Args: zs_prompty: The `zs_prompty` parameter in the `handle_multiple_upload` function is a Path object that represents the path to the ZS_PROMPTY configuration in the Config module. It is used as a default value for the `prompty_path` parameter when initializing a ZeroShotCategorizer object in fs_prompty: The `fs_prompty` parameter in the `handle_multiple_upload` function seems to be a Path object that is initialized with the value from `Config.FS_PROMPTY`. It is used as the `prompty_path` parameter when creating instances of `FewShotCategorizer` or `ZeroShotCategorizer` \"\"\" # Provide a \"Clear All\" option as before. if self . ui . button ( \"Clear All\" , key = \"multi_clear_all\" ): if \"uploaded_files_multiple\" in self . ui . session_state : del self . ui . session_state [ \"uploaded_files_multiple\" ] if \"processed_files_multiple\" in self . ui . session_state : del self . ui . session_state [ \"processed_files_multiple\" ] self . ui . rerun () # Use the common file uploader helper for multiple files. files = self . _ensure_file ( file = None , upload_message = \"Upload your files\" , file_types = [ \"docx\" , \"pdf\" ], key = \"multiple_file_uploader\" , info_message = \"Please upload DOCX or PDF files to proceed.\" , ) if files : self . ui . session_state [ \"uploaded_files_multiple\" ] = files file_names = [ file . name for file in files ] if isinstance ( files , list ) else [ files . name ] self . ui . write ( f \"Uploaded files: { file_names } \" ) filenames , texts = self . process_multiple_files ( files ) self . ui . session_state [ \"processed_files_multiple\" ] = ( filenames , texts ) if self . ui . session_state . get ( \"processed_files_multiple\" ) is not None : filenames , texts = self . ui . session_state [ \"processed_files_multiple\" ] text_to_label = texts categories_dict , examples = CategoryManager . define_categories ( self . ui , \"tab2\" , get_file_examples = True ) self . ui . write ( \"Texts (excerpts) to label:\" ) for text in text_to_label [: 5 ]: self . ui . write ( text [: 250 ]) if self . ui . button ( \"Categorize\" , key = \"tab2_submit\" ): categorized_results = [] if examples : categorization_request = CategoryManager . create_request ( filenames , text_to_label , categories_dict , examples ) few_shot_categorizer = FewShotCategorizer ( prompty_path = fs_prompty , category_request = categorization_request ) categorized_results = few_shot_categorizer . process () else : categorization_request = CategoryManager . create_request ( filenames , text_to_label , categories_dict ) zero_shot_categorizer = ZeroShotCategorizer ( prompty_path = zs_prompty , category_request = categorization_request ) categorized_results = zero_shot_categorizer . process () self . process_results ( categorized_results , replace_newlines = True , fill_missing = True ) handle_single_upload ( zs_prompty = Path ( Config . ZS_PROMPTY ), fs_prompty = Path ( Config . FS_PROMPTY )) The handle_single_upload function handles the uploading, processing, and categorization of a single CSV or XLSX file. Parameters: zs_prompty \u2013 The zs_prompty parameter in the handle_single_upload method is set to the value of Path(Config.ZS_PROMPTY) . This means that the zs_prompty parameter is a Path object initialized with the value of Config.ZS_PROMPTY . fs_prompty: The fs_prompty parameter in the handle_single_upload method is a Path object that is set to the value of Config.FS_PROMPTY . It is used as a default value for the parameter if no value is provided when calling the method. The purpose of this parameter is to Returns: \u2013 The handle_single_upload method returns either None if the uploaded file is None or if there is an error processing the uploaded file. Otherwise, it does not explicitly return a value, but it performs various operations such as setting session state variables, processing the uploaded file, categorizing the data, and providing a download button for the results. Source code in LabeLMaker/streamlit_interface.py 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 def handle_single_upload ( self , zs_prompty = Path ( Config . ZS_PROMPTY ), fs_prompty = Path ( Config . FS_PROMPTY ) ): \"\"\" The `handle_single_upload` function handles the uploading, processing, and categorization of a single CSV or XLSX file. Args: zs_prompty: The `zs_prompty` parameter in the `handle_single_upload` method is set to the value of `Path(Config.ZS_PROMPTY)`. This means that the `zs_prompty` parameter is a Path object initialized with the value of `Config.ZS_PROMPTY`. fs_prompty: The `fs_prompty` parameter in the `handle_single_upload` method is a Path object that is set to the value of `Config.FS_PROMPTY`. It is used as a default value for the parameter if no value is provided when calling the method. The purpose of this parameter is to Returns: The `handle_single_upload` method returns either None if the uploaded file is None or if there is an error processing the uploaded file. Otherwise, it does not explicitly return a value, but it performs various operations such as setting session state variables, processing the uploaded file, categorizing the data, and providing a download button for the results. \"\"\" file = self . _ensure_file ( file = None , upload_message = \"Upload your file\" , file_types = [ \"csv\" , \"xlsx\" ], key = \"single_file_uploader\" , info_message = \"Please upload a CSV or XLSX file to proceed.\" , ) if file is None : return self . ui . session_state [ \"uploaded_file_single\" ] = file try : document_analysis_client = self . get_document_analysis_client () upload_manager = StreamlitUploadManager ( file , accept_multiple_files = False , document_analysis_client = document_analysis_client ) file_data , extension = upload_manager . process_upload () self . ui . session_state [ \"single_file_df\" ] = file_data except Exception as e : self . ui . error ( f \"Error processing the uploaded file: { e } \" ) return if self . ui . session_state . get ( \"single_file_df\" ) is not None : df = self . ui . session_state [ \"single_file_df\" ] self . ui . write ( f \"Uploaded file: { file . name } \" ) params = self . setup_workflow ( df ) if self . ui . button ( \"Categorize\" , key = \"tab1_submit\" ): merged_df = self . categorize_data ( df , params , zs_prompty , fs_prompty ) csv_data = merged_df . to_csv ( index = False ) . encode ( \"utf-8\" ) self . ui . download_button ( label = \"Download Results\" , data = csv_data , file_name = \"AI_Generated_Categorization.csv\" , mime = \"text/csv\" , ) process_multiple_files ( uploaded_files ) The function process_multiple_files processes uploaded files using a document analysis client and returns the filenames and corresponding texts. Parameters: uploaded_files \u2013 Uploaded_files is a list of files that have been uploaded by the user. Each file in the list represents a file that the user has uploaded for processing. Returns: \u2013 The process_multiple_files function returns two lists: filenames and texts . The filenames list contains the names of the uploaded files, while the texts list contains the processed data from the uploaded files. Source code in LabeLMaker/streamlit_interface.py 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 def process_multiple_files ( self , uploaded_files ): \"\"\" The function `process_multiple_files` processes uploaded files using a document analysis client and returns the filenames and corresponding texts. Args: uploaded_files: Uploaded_files is a list of files that have been uploaded by the user. Each file in the list represents a file that the user has uploaded for processing. Returns: The `process_multiple_files` function returns two lists: `filenames` and `texts`. The `filenames` list contains the names of the uploaded files, while the `texts` list contains the processed data from the uploaded files. \"\"\" filenames = [] texts = [] document_analysis_client = self . get_document_analysis_client () for file in uploaded_files : upload_manager = StreamlitUploadManager ( file , accept_multiple_files = False , document_analysis_client = document_analysis_client ) file_data , _ = upload_manager . process_upload () if file_data : filenames . append ( file . name ) texts . append ( file_data ) return filenames , texts process_results ( results ) The function process_results displays categorization results with optional formatting options. Parameters: results \u2013 The results parameter in the process_results method is used to pass the results that need to be processed or displayed. It could be any data structure or information that the method needs to work with, such as a list, dictionary, string, etc. Source code in LabeLMaker/streamlit_interface.py 890 891 892 893 894 895 896 897 898 899 900 def process_results ( self , results ): \"\"\" The function `process_results` displays categorization results with optional formatting options. Args: results: The `results` parameter in the `process_results` method is used to pass the results that need to be processed or displayed. It could be any data structure or information that the method needs to work with, such as a list, dictionary, string, etc. \"\"\" self . ui . write ( \"Categorization Results:\" ) self . ui . write ( results ) setup_workflow ( df ) The setup_workflow function in Python sets up parameters for a workflow, including selecting columns, creating unique identifiers, and choosing evaluation approaches. Parameters: df \u2013 The setup_workflow function is designed to set up parameters for a workflow based on user interactions with a UI. The function takes a DataFrame df as input and performs the following tasks: Returns: \u2013 The setup_workflow function returns a dictionary params containing various parameters set based on user inputs and selections made during the workflow setup process. The function collects information such as the mode (Evaluation or Production), unique identifier column, categorizing column, ground truth column, evaluation techniques selected, and related parameters for Few Shot and Many Shot evaluation approaches. Additionally, it includes information about default categories and descriptions Source code in LabeLMaker/streamlit_interface.py 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 def setup_workflow ( self , df ): \"\"\" The `setup_workflow` function in Python sets up parameters for a workflow, including selecting columns, creating unique identifiers, and choosing evaluation approaches. Args: df: The `setup_workflow` function is designed to set up parameters for a workflow based on user interactions with a UI. The function takes a DataFrame `df` as input and performs the following tasks: Returns: The `setup_workflow` function returns a dictionary `params` containing various parameters set based on user inputs and selections made during the workflow setup process. The function collects information such as the mode (Evaluation or Production), unique identifier column, categorizing column, ground truth column, evaluation techniques selected, and related parameters for Few Shot and Many Shot evaluation approaches. Additionally, it includes information about default categories and descriptions \"\"\" params = {} advanced_mode = self . ui . checkbox ( \"Advanced Mode\" , help = \"For users with ground truth labels. Check to run evaluation pipeline.\" , key = \"advanced_mode\" , ) if advanced_mode : self . ui . info ( \"Advanced Mode is activated: Users can select classification mode (e.g., zero shot, few shot, or many shot)\" ) else : self . ui . info ( \"Advanced Mode is not activated: Classification will be determined by number of examples provided\" ) params [ \"mode\" ] = \"Evaluation\" if advanced_mode else \"Production\" if not self . ui . session_state . get ( \"uniqueIdSetup_done\" ): self . ui . markdown ( \"### Unique Identifier Setup\" ) id_choice = self . ui . radio ( \"How would you like to specify a unique identifier?\" , options = [ \"Create new ID column\" , \"Use an existing column\" ], index = 0 , key = \"id_choice\" , ) if id_choice == \"Create new ID column\" : new_id_col = self . ui . text_input ( \"Enter name for the new ID column\" , value = \"id\" , key = \"new_id_column\" ) if self . ui . button ( \"Create ID Column\" , key = \"create_id_column\" ): if new_id_col not in df . columns : df [ new_id_col ] = df . index . astype ( str ) self . ui . success ( f \"New ID column ' { new_id_col } ' created.\" ) else : self . ui . info ( f \"Column ' { new_id_col } ' already exists; using it.\" ) self . ui . session_state [ \"single_file_df\" ] = df self . ui . session_state [ \"selected_id_column\" ] = new_id_col self . ui . session_state [ \"uniqueIdSetup_done\" ] = True else : selected_existing = self . ui . selectbox ( \"Select the column to use as the unique identifier\" , options = df . columns . tolist (), key = \"existing_id_column\" , ) if self . ui . button ( \"Confirm ID Column\" , key = \"confirm_id_column\" ): self . ui . session_state [ \"selected_id_column\" ] = selected_existing self . ui . session_state [ \"uniqueIdSetup_done\" ] = True sel_id = self . ui . session_state . get ( \"selected_id_column\" ) if sel_id and sel_id not in df . columns : df [ sel_id ] = df . index . astype ( str ) self . ui . session_state [ \"single_file_df\" ] = df params [ \"index_column\" ] = self . ui . session_state . get ( \"selected_id_column\" ) self . ui . write ( f \"Using ' { params [ 'index_column' ] } ' as the unique identifier column.\" ) df_columns = df . columns . tolist () params [ \"categorizing_column\" ] = self . ui . selectbox ( \"Select the column with text data you want to label\" , options = df_columns , key = \"categorizing_column\" , ) if \"ground_truth_column\" not in self . ui . session_state : self . ui . session_state [ \"ground_truth_column\" ] = df_columns [ 0 ] gt_col = self . ui . selectbox ( \"Select the column with ground truth labels\" , options = df_columns , key = \"ground_truth_column\" , index = df_columns . index ( self . ui . session_state [ \"ground_truth_column\" ]), ) params [ \"ground_truth_column\" ] = gt_col if params [ \"mode\" ] == \"Evaluation\" : eval_techniques = self . ui . multiselect ( \"Select the evaluation approaches to run:\" , options = [ \"Zero Shot\" , \"Few Shot\" , \"Many Shot\" ], default = [ \"Zero Shot\" ], key = \"evaluation_techniques\" , ) params [ \"evaluation_techniques\" ] = eval_techniques if \"Few Shot\" in eval_techniques : few_shot_count = self . ui . number_input ( \"Enter maximum examples per category (Few Shot)\" , min_value = 1 , value = 2 , key = \"few_shot_count\" , ) params [ \"few_shot_count\" ] = few_shot_count if \"Many Shot\" in eval_techniques : many_shot_train_ratio = self . ui . number_input ( \"Enter train proportion for Many Shot (0 to 1)\" , min_value = 0.0 , max_value = 1.0 , value = 0.8 , key = \"many_shot_train_ratio\" , ) params [ \"many_shot_train_ratio\" ] = many_shot_train_ratio default_categories = self . _get_default_categories ( df , gt_col ) categories_dict , categories_with_descriptions = CategoryManager . define_categories ( self . ui , \"tab1\" , unique_values_str = default_categories ) params [ \"categories_dict\" ] = categories_dict params [ \"categories_with_descriptions\" ] = categories_with_descriptions return params EvaluateHandler Bases: BaseHandler Handles evaluation workflows. Includes CSV file upload & preview, evaluation setup, single/multi\u2010column evaluation including method comparisons, and DOCX report creation. Source code in LabeLMaker/streamlit_interface.pyclass EvaluateHandler ( BaseHandler ): \"\"\" Handles evaluation workflows. Includes CSV file upload & preview, evaluation setup, single/multi\u2010column evaluation including method comparisons, and DOCX report creation. \"\"\" def __init__ ( self , ui_helper ): \"\"\" The above function is a constructor that initializes an object with a UI helper. Args: ui_helper: The `ui_helper` parameter in the `__init__` method is typically used to pass in an object that provides utility functions or methods related to the user interface. This can include functions for displaying information, handling user input, managing UI components, and more. By passing in a `ui_helper \"\"\" super () . __init__ ( ui_helper ) # -------------------------- # File Upload & Data Loader Methods def load_data ( self , file ): \"\"\" The function `load_data` creates a `DataLoader` object with the specified file and returns it. Args: file: The `file` parameter in the `load_data` method is the file path or name that you want to load data from. This parameter is used to specify the location of the file that the `DataLoader` will load data from. Returns: An instance of the DataLoader class with the specified file. \"\"\" loader = DataLoader ( file = file ) return loader def preview_data ( self , loader ): \"\"\" The function `preview_data` displays a preview of the CSV data loaded by the `loader` object, including the first few rows and the total number of rows in the dataframe. Args: loader: The `loader` parameter in the `preview_data` method is likely an object that contains a DataFrame (`df`) attribute. This DataFrame is used to display a preview of the data in the CSV file being loaded. The method displays the first few rows of the DataFrame and the total number of rows in \"\"\" self . ui . subheader ( \"CSV Preview:\" ) self . ui . write ( loader . df . head ()) self . ui . write ( f \"Total rows in dataframe: { len ( loader . df ) } \" ) # -------------------------- # Evaluation Setup Helpers def select_evaluation_column ( self , loader ): \"\"\" The function `select_evaluation_column` prompts the user to select a column from a DataFrame for use as the ground truth column. Args: loader: The `loader` parameter in the `select_evaluation_column` method seems to be an object that has a property `df` which is a DataFrame. The method allows the user to select a column from the DataFrame `loader.df` as the ground truth column. The user interface (UI) component used Returns: the column selected as the ground truth column from the DataFrame loaded by the loader. \"\"\" ground_truth_col = self . ui . selectbox ( \"Select Ground Truth Column\" , loader . df . columns , key = \"eval_gt_column\" ) return ground_truth_col def check_class_balance ( self , loader , class_col , label ): \"\"\" The function `check_class_balance` computes the class balance for a specified column in a DataFrame and displays the results using a UI subheader and table. Args: loader: The `loader` parameter is likely an object that helps load or manage data, such as a data loader object used in machine learning frameworks like PyTorch or TensorFlow. It is being used to access the data frame (`loader.df`) containing the dataset. class_col: The `class_col` parameter in the `check_class_balance` function is used to specify the column in the dataset that contains the class labels or categories for which you want to check the balance. This column will be used by the `ClassBalance` to compute the balance of the classes in the dataset label: The `label` parameter is a string that represents the label or title of the class balance being computed. It is used to provide context or information about the specific class balance being displayed in the user interface. \"\"\" balancer = ClassBalance ( loader . df , class_col ) balance_df = balancer . compute_balance () self . ui . subheader ( f \"Class Balance for { label } ( { class_col } )\" ) self . ui . write ( balance_df ) # -------------------------- # Evaluation & Visualization Helper (for single\u2013column evaluation) def evaluate_model ( self , df , pred_col , ground_truth_col , n_bootstraps = 1000 , alpha = 0.05 ): \"\"\" The `evaluate_model` function evaluates predictions by comparing them with ground truth, calculates metrics, generates a classification report, computes bootstrap confidence intervals, and plots a confusion matrix. Args: df: The `df` parameter in the `evaluate_model` function is a pandas DataFrame that contains the data for evaluation. It should include columns for predictions (`pred_col`) and ground truth (`ground_truth_col`) that will be used for evaluating the model's performance. pred_col: The `pred_col` parameter in the `evaluate_model` function refers to the column in the DataFrame `df` that contains the predicted values for the model. It is used to evaluate the predictions by comparing them with the ground truth values. ground_truth_col: The `ground_truth_col` parameter in the `evaluate_model` function refers to the column in the DataFrame `df` that contains the ground truth values for the predictions. This column is used to compare the predicted values with the actual ground truth values during the evaluation process. n_bootstraps: The `n_bootstraps` parameter in the `evaluate_model` function specifies the number of bootstrap samples to generate when computing bootstrap confidence intervals. It determines how many resamples of the data will be created to estimate the sampling distribution of a statistic. In this case, it is set to a default. Defaults to 1000 alpha: The `alpha` parameter in the `evaluate_model` function represents the significance level used for computing Bootstrap Confidence Intervals. It is typically set to a value between 0 and 1, such as 0.05, to determine the confidence level of the intervals. In this case, an ` Returns: metrics_df, report_df, bs_df, cm_fig \"\"\" \"\"\" Evaluate predictions by comparing with ground truth. Drops rows with NaN predictions. Returns: metrics_df, report_df, bs_df, cm_fig \"\"\" if pred_col in df . columns and ground_truth_col in df . columns : valid = df [ pred_col ] . notna () y_true = df . loc [ valid , ground_truth_col ] . astype ( str ) . tolist () y_pred = df . loc [ valid , pred_col ] . astype ( str ) . tolist () evaluator = Evaluator ( y_true , y_pred ) evaluator . calculate_metrics () metrics_df = evaluator . display_metrics () report_df = pd . DataFrame ( evaluator . metrics [ \"Classification Report\" ]) . transpose () # Compute Bootstrap Confidence Intervals. bs_results = compute_bootstrap_confidence_intervals ( y_true , y_pred , n_bootstraps = n_bootstraps , alpha = alpha ) bs_display = [] for metric , values in bs_results . items (): if values [ \"Value\" ] is not None : bs_display . append ( { \"Metric\" : metric , \"Value\" : f \" { values [ 'Value' ] : .4f } \" , \"Bootstrap Mean\" : f \" { values [ 'Bootstrap Mean' ] : .4f } \" , \"95% CI\" : f \"( { values [ '95% CI' ][ 0 ] : .4f } , { values [ '95% CI' ][ 1 ] : .4f } )\" , } ) else : bs_display . append ( { \"Metric\" : metric , \"Value\" : \"Undefined\" , \"Bootstrap Mean\" : \"Undefined\" , \"95% CI\" : \"Undefined\" , } ) bs_df = pd . DataFrame ( bs_display ) cm_fig = evaluator . plot_confusion_matrix () return metrics_df , report_df , bs_df , cm_fig else : self . ui . error ( \"Selected evaluation columns not found in the dataframe.\" ) return None , None , None , None def compare_methods ( self , df , ground_truth_col , selected_methods ): \"\"\" The `compare_methods` function compares selected prediction methods on a common data subset and returns evaluation results and confusion matrices for each method. Args: df: The `df` parameter in the `compare_methods` function is a pandas DataFrame containing the data for evaluation. It is used to compare selected prediction methods on a common data subset. ground_truth_col: The `ground_truth_col` parameter in the `compare_methods` function refers to the column in the DataFrame `df` that contains the ground truth values for the evaluation. This column should represent the true values that the selected prediction methods are compared against. It is typically the actual values that the models are selected_methods: The `selected_methods` parameter in the `compare_methods` function is a list of prediction methods that you want to compare. These methods should correspond to the columns in the DataFrame `df` that contain the predicted categories for each method. The function will evaluate these selected methods on a common subset of the Returns: The function `compare_methods` returns three values: 1. `common_df`: Subset of the input dataframe `df` used for evaluation. 2. `results`: A dictionary with each selected method's evaluation metrics. 3. `confusion_matrices`: A dictionary with each selected method's confusion matrix figure. \"\"\" method_columns = { method : f \"Predicted Category ( { method } )\" for method in selected_methods } valid_methods = { m : col for m , col in method_columns . items () if col in df . columns } if not valid_methods : self . ui . info ( \"No selected method prediction columns exist in the data.\" ) return None , {}, {} common_df = df . dropna ( subset = list ( valid_methods . values ())) self . ui . write ( f \"Common evaluation subset size: { len ( common_df ) } \" ) results = {} confusion_matrices = {} for method , col in valid_methods . items (): y_true = common_df [ ground_truth_col ] . astype ( str ) . tolist () y_pred = common_df [ col ] . astype ( str ) . tolist () evaluator = Evaluator ( y_true , y_pred ) evaluator . calculate_metrics () results [ method ] = evaluator . metrics confusion_matrices [ method ] = evaluator . plot_confusion_matrix () return common_df , results , confusion_matrices # -------------------------- # Main Evaluation Workflow def handle_evaluation ( self , file = None ): \"\"\" The `handle_evaluation` function manages the evaluation workflow by uploading a CSV file, loading and previewing data, selecting evaluation methods, running evaluation, displaying results, and generating a downloadable DOCX report. Args: file: The `file` parameter in the `handle_evaluation` method is used to specify the CSV file that will be used for evaluation. If a file is not provided, the method will prompt the user to upload a CSV file. The method then proceeds to load and preview the data, select the ground truth Returns: The `handle_evaluation` method returns `None` if the `file` is not provided, indicating that the evaluation workflow cannot proceed without a CSV file. Handles the evaluation workflow by: - Uploading the CSV file (if not provided), - Loading and previewing the data, - Selecting the ground truth column and checking class balance, - Letting the user select one or more evaluation methods, - Running evaluation on demand, - Displaying the results, and - Generating a downloadable DOCX report. \"\"\" # File upload (if not already provided) file = self . _ensure_file ( file , upload_message = \"Choose CSV file\" , file_types = \"csv\" , key = \"eval_file_uploader\" , info_message = \"Please upload a CSV file to proceed.\" , ) if file is None : return loader = self . load_data ( file ) self . preview_data ( loader ) ground_truth_col = self . select_evaluation_column ( loader ) self . check_class_balance ( loader , ground_truth_col , \"Ground Truth\" ) self . ui . header ( \"Evaluation\" ) selected_methods = self . ui . multiselect ( \"Select evaluation methods\" , [ \"Zero Shot\" , \"Few Shot\" , \"Many Shot\" ], default = [ \"Zero Shot\" , \"Few Shot\" , \"Many Shot\" ], key = \"eval_methods\" , ) if self . ui . button ( \"Evaluate\" ): with self . ui . spinner ( \"Evaluating...\" ): if not selected_methods : self . ui . error ( \"Please select at least one method for evaluation.\" ) return common_df , comparison_results , confusion_matrices = self . compare_methods ( loader . df , ground_truth_col , selected_methods ) if comparison_results : for method , metrics in comparison_results . items (): self . ui . subheader ( method ) self . ui . write ( metrics ) docx_maker = StreamlitDocxCreator ( comparison_results , confusion_matrices ) doc = docx_maker . create_docx_report () docx_content = self . generate_docx_report_download ( doc ) self . ui . download_button ( label = \"Download DOCX Report\" , data = docx_content , file_name = \"evaluation_report.docx\" , mime = \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\" , ) else : self . ui . error ( \"No evaluation metrics available for the selected methods.\" ) else : self . ui . info ( \"Click the Evaluate button to start evaluation.\" ) __init__ ( ui_helper ) The above function is a constructor that initializes an object with a UI helper. Parameters: ui_helper \u2013 The ui_helper parameter in the __init__ method is typically used to pass in an object that provides utility functions or methods related to the user interface. This can include functions for displaying information, handling user input, managing UI components, and more. By passing in a `ui_helper Source code in LabeLMaker/streamlit_interface.py 127 128 129 130 131 132 133 134 135 136 137 def __init__ ( self , ui_helper ): \"\"\" The above function is a constructor that initializes an object with a UI helper. Args: ui_helper: The `ui_helper` parameter in the `__init__` method is typically used to pass in an object that provides utility functions or methods related to the user interface. This can include functions for displaying information, handling user input, managing UI components, and more. By passing in a `ui_helper \"\"\" super () . __init__ ( ui_helper ) check_class_balance ( loader , class_col , label ) The function check_class_balance computes the class balance for a specified column in a DataFrame and displays the results using a UI subheader and table. Parameters: loader \u2013 The loader parameter is likely an object that helps load or manage data, such as a data loader object used in machine learning frameworks like PyTorch or TensorFlow. It is being used to access the data frame ( loader.df ) containing the dataset. class_col: The class_col parameter in the check_class_balance function is used to specify the column in the dataset that contains the class labels or categories for which you want to check the balance. This column will be used by the ClassBalance to compute the balance of the classes in the dataset label: The label parameter is a string that represents the label or title of the class balance being computed. It is used to provide context or information about the specific class balance being displayed in the user interface. Source code in LabeLMaker/streamlit_interface.py 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 def check_class_balance ( self , loader , class_col , label ): \"\"\" The function `check_class_balance` computes the class balance for a specified column in a DataFrame and displays the results using a UI subheader and table. Args: loader: The `loader` parameter is likely an object that helps load or manage data, such as a data loader object used in machine learning frameworks like PyTorch or TensorFlow. It is being used to access the data frame (`loader.df`) containing the dataset. class_col: The `class_col` parameter in the `check_class_balance` function is used to specify the column in the dataset that contains the class labels or categories for which you want to check the balance. This column will be used by the `ClassBalance` to compute the balance of the classes in the dataset label: The `label` parameter is a string that represents the label or title of the class balance being computed. It is used to provide context or information about the specific class balance being displayed in the user interface. \"\"\" balancer = ClassBalance ( loader . df , class_col ) balance_df = balancer . compute_balance () self . ui . subheader ( f \"Class Balance for { label } ( { class_col } )\" ) self . ui . write ( balance_df ) compare_methods ( df , ground_truth_col , selected_methods ) The compare_methods function compares selected prediction methods on a common data subset and returns evaluation results and confusion matrices for each method. Parameters: df \u2013 The df parameter in the compare_methods function is a pandas DataFrame containing the data for evaluation. It is used to compare selected prediction methods on a common data subset. ground_truth_col: The ground_truth_col parameter in the compare_methods function refers to the column in the DataFrame df that contains the ground truth values for the evaluation. This column should represent the true values that the selected prediction methods are compared against. It is typically the actual values that the models are selected_methods: The selected_methods parameter in the compare_methods function is a list of prediction methods that you want to compare. These methods should correspond to the columns in the DataFrame df that contain the predicted categories for each method. The function will evaluate these selected methods on a common subset of the Returns: \u2013 The function compare_methods returns three values: common_df : Subset of the input dataframe df used for evaluation. results : A dictionary with each selected method's evaluation metrics. confusion_matrices : A dictionary with each selected method's confusion matrix figure. Source code in LabeLMaker/streamlit_interface.py 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 def compare_methods ( self , df , ground_truth_col , selected_methods ): \"\"\" The `compare_methods` function compares selected prediction methods on a common data subset and returns evaluation results and confusion matrices for each method. Args: df: The `df` parameter in the `compare_methods` function is a pandas DataFrame containing the data for evaluation. It is used to compare selected prediction methods on a common data subset. ground_truth_col: The `ground_truth_col` parameter in the `compare_methods` function refers to the column in the DataFrame `df` that contains the ground truth values for the evaluation. This column should represent the true values that the selected prediction methods are compared against. It is typically the actual values that the models are selected_methods: The `selected_methods` parameter in the `compare_methods` function is a list of prediction methods that you want to compare. These methods should correspond to the columns in the DataFrame `df` that contain the predicted categories for each method. The function will evaluate these selected methods on a common subset of the Returns: The function `compare_methods` returns three values: 1. `common_df`: Subset of the input dataframe `df` used for evaluation. 2. `results`: A dictionary with each selected method's evaluation metrics. 3. `confusion_matrices`: A dictionary with each selected method's confusion matrix figure. \"\"\" method_columns = { method : f \"Predicted Category ( { method } )\" for method in selected_methods } valid_methods = { m : col for m , col in method_columns . items () if col in df . columns } if not valid_methods : self . ui . info ( \"No selected method prediction columns exist in the data.\" ) return None , {}, {} common_df = df . dropna ( subset = list ( valid_methods . values ())) self . ui . write ( f \"Common evaluation subset size: { len ( common_df ) } \" ) results = {} confusion_matrices = {} for method , col in valid_methods . items (): y_true = common_df [ ground_truth_col ] . astype ( str ) . tolist () y_pred = common_df [ col ] . astype ( str ) . tolist () evaluator = Evaluator ( y_true , y_pred ) evaluator . calculate_metrics () results [ method ] = evaluator . metrics confusion_matrices [ method ] = evaluator . plot_confusion_matrix () return common_df , results , confusion_matrices evaluate_model ( df , pred_col , ground_truth_col , n_bootstraps = 1000 , alpha = 0.05 ) The evaluate_model function evaluates predictions by comparing them with ground truth, calculates metrics, generates a classification report, computes bootstrap confidence intervals, and plots a confusion matrix. Parameters: df \u2013 The df parameter in the evaluate_model function is a pandas DataFrame that contains the data for evaluation. It should include columns for predictions ( pred_col ) and ground truth ( ground_truth_col ) that will be used for evaluating the model's performance. pred_col: The pred_col parameter in the evaluate_model function refers to the column in the DataFrame df that contains the predicted values for the model. It is used to evaluate the predictions by comparing them with the ground truth values. ground_truth_col: The ground_truth_col parameter in the evaluate_model function refers to the column in the DataFrame df that contains the ground truth values for the predictions. This column is used to compare the predicted values with the actual ground truth values during the evaluation process. n_bootstraps: The n_bootstraps parameter in the evaluate_model function specifies the number of bootstrap samples to generate when computing bootstrap confidence intervals. It determines how many resamples of the data will be created to estimate the sampling distribution of a statistic. In this case, it is set to a default. Defaults to 1000 alpha: The alpha parameter in the evaluate_model function represents the significance level used for computing Bootstrap Confidence Intervals. It is typically set to a value between 0 and 1, such as 0.05, to determine the confidence level of the intervals. In this case, an ` Returns: \u2013 metrics_df, report_df, bs_df, cm_fig Source code in LabeLMaker/streamlit_interface.py 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 def evaluate_model ( self , df , pred_col , ground_truth_col , n_bootstraps = 1000 , alpha = 0.05 ): \"\"\" The `evaluate_model` function evaluates predictions by comparing them with ground truth, calculates metrics, generates a classification report, computes bootstrap confidence intervals, and plots a confusion matrix. Args: df: The `df` parameter in the `evaluate_model` function is a pandas DataFrame that contains the data for evaluation. It should include columns for predictions (`pred_col`) and ground truth (`ground_truth_col`) that will be used for evaluating the model's performance. pred_col: The `pred_col` parameter in the `evaluate_model` function refers to the column in the DataFrame `df` that contains the predicted values for the model. It is used to evaluate the predictions by comparing them with the ground truth values. ground_truth_col: The `ground_truth_col` parameter in the `evaluate_model` function refers to the column in the DataFrame `df` that contains the ground truth values for the predictions. This column is used to compare the predicted values with the actual ground truth values during the evaluation process. n_bootstraps: The `n_bootstraps` parameter in the `evaluate_model` function specifies the number of bootstrap samples to generate when computing bootstrap confidence intervals. It determines how many resamples of the data will be created to estimate the sampling distribution of a statistic. In this case, it is set to a default. Defaults to 1000 alpha: The `alpha` parameter in the `evaluate_model` function represents the significance level used for computing Bootstrap Confidence Intervals. It is typically set to a value between 0 and 1, such as 0.05, to determine the confidence level of the intervals. In this case, an ` Returns: metrics_df, report_df, bs_df, cm_fig \"\"\" \"\"\" Evaluate predictions by comparing with ground truth. Drops rows with NaN predictions. Returns: metrics_df, report_df, bs_df, cm_fig \"\"\" if pred_col in df . columns and ground_truth_col in df . columns : valid = df [ pred_col ] . notna () y_true = df . loc [ valid , ground_truth_col ] . astype ( str ) . tolist () y_pred = df . loc [ valid , pred_col ] . astype ( str ) . tolist () evaluator = Evaluator ( y_true , y_pred ) evaluator . calculate_metrics () metrics_df = evaluator . display_metrics () report_df = pd . DataFrame ( evaluator . metrics [ \"Classification Report\" ]) . transpose () # Compute Bootstrap Confidence Intervals. bs_results = compute_bootstrap_confidence_intervals ( y_true , y_pred , n_bootstraps = n_bootstraps , alpha = alpha ) bs_display = [] for metric , values in bs_results . items (): if values [ \"Value\" ] is not None : bs_display . append ( { \"Metric\" : metric , \"Value\" : f \" { values [ 'Value' ] : .4f } \" , \"Bootstrap Mean\" : f \" { values [ 'Bootstrap Mean' ] : .4f } \" , \"95% CI\" : f \"( { values [ '95% CI' ][ 0 ] : .4f } , { values [ '95% CI' ][ 1 ] : .4f } )\" , } ) else : bs_display . append ( { \"Metric\" : metric , \"Value\" : \"Undefined\" , \"Bootstrap Mean\" : \"Undefined\" , \"95% CI\" : \"Undefined\" , } ) bs_df = pd . DataFrame ( bs_display ) cm_fig = evaluator . plot_confusion_matrix () return metrics_df , report_df , bs_df , cm_fig else : self . ui . error ( \"Selected evaluation columns not found in the dataframe.\" ) return None , None , None , None handle_evaluation ( file = None ) The handle_evaluation function manages the evaluation workflow by uploading a CSV file, loading and previewing data, selecting evaluation methods, running evaluation, displaying results, and generating a downloadable DOCX report. Parameters: file \u2013 The file parameter in the handle_evaluation method is used to specify the CSV file that will be used for evaluation. If a file is not provided, the method will prompt the user to upload a CSV file. The method then proceeds to load and preview the data, select the ground truth Returns: \u2013 The handle_evaluation method returns None if the file is not provided, indicating that the evaluation workflow cannot proceed without a CSV file. Handles the evaluation workflow by Uploading the CSV file (if not provided), Loading and previewing the data, Selecting the ground truth column and checking class balance, Letting the user select one or more evaluation methods, Running evaluation on demand, Displaying the results, and Generating a downloadable DOCX report. Source code in LabeLMaker/streamlit_interface.py 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 def handle_evaluation ( self , file = None ): \"\"\" The `handle_evaluation` function manages the evaluation workflow by uploading a CSV file, loading and previewing data, selecting evaluation methods, running evaluation, displaying results, and generating a downloadable DOCX report. Args: file: The `file` parameter in the `handle_evaluation` method is used to specify the CSV file that will be used for evaluation. If a file is not provided, the method will prompt the user to upload a CSV file. The method then proceeds to load and preview the data, select the ground truth Returns: The `handle_evaluation` method returns `None` if the `file` is not provided, indicating that the evaluation workflow cannot proceed without a CSV file. Handles the evaluation workflow by: - Uploading the CSV file (if not provided), - Loading and previewing the data, - Selecting the ground truth column and checking class balance, - Letting the user select one or more evaluation methods, - Running evaluation on demand, - Displaying the results, and - Generating a downloadable DOCX report. \"\"\" # File upload (if not already provided) file = self . _ensure_file ( file , upload_message = \"Choose CSV file\" , file_types = \"csv\" , key = \"eval_file_uploader\" , info_message = \"Please upload a CSV file to proceed.\" , ) if file is None : return loader = self . load_data ( file ) self . preview_data ( loader ) ground_truth_col = self . select_evaluation_column ( loader ) self . check_class_balance ( loader , ground_truth_col , \"Ground Truth\" ) self . ui . header ( \"Evaluation\" ) selected_methods = self . ui . multiselect ( \"Select evaluation methods\" , [ \"Zero Shot\" , \"Few Shot\" , \"Many Shot\" ], default = [ \"Zero Shot\" , \"Few Shot\" , \"Many Shot\" ], key = \"eval_methods\" , ) if self . ui . button ( \"Evaluate\" ): with self . ui . spinner ( \"Evaluating...\" ): if not selected_methods : self . ui . error ( \"Please select at least one method for evaluation.\" ) return common_df , comparison_results , confusion_matrices = self . compare_methods ( loader . df , ground_truth_col , selected_methods ) if comparison_results : for method , metrics in comparison_results . items (): self . ui . subheader ( method ) self . ui . write ( metrics ) docx_maker = StreamlitDocxCreator ( comparison_results , confusion_matrices ) doc = docx_maker . create_docx_report () docx_content = self . generate_docx_report_download ( doc ) self . ui . download_button ( label = \"Download DOCX Report\" , data = docx_content , file_name = \"evaluation_report.docx\" , mime = \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\" , ) else : self . ui . error ( \"No evaluation metrics available for the selected methods.\" ) else : self . ui . info ( \"Click the Evaluate button to start evaluation.\" ) load_data ( file ) The function load_data creates a DataLoader object with the specified file and returns it. Parameters: file \u2013 The file parameter in the load_data method is the file path or name that you want to load data from. This parameter is used to specify the location of the file that the DataLoader will load data from. Returns: \u2013 An instance of the DataLoader class with the specified file. Source code in LabeLMaker/streamlit_interface.py 141 142 143 144 145 146 147 148 149 150 151 152 153 154 def load_data ( self , file ): \"\"\" The function `load_data` creates a `DataLoader` object with the specified file and returns it. Args: file: The `file` parameter in the `load_data` method is the file path or name that you want to load data from. This parameter is used to specify the location of the file that the `DataLoader` will load data from. Returns: An instance of the DataLoader class with the specified file. \"\"\" loader = DataLoader ( file = file ) return loader preview_data ( loader ) The function preview_data displays a preview of the CSV data loaded by the loader object, including the first few rows and the total number of rows in the dataframe. Parameters: loader \u2013 The loader parameter in the preview_data method is likely an object that contains a DataFrame ( df ) attribute. This DataFrame is used to display a preview of the data in the CSV file being loaded. The method displays the first few rows of the DataFrame and the total number of rows in Source code in LabeLMaker/streamlit_interface.py 156 157 158 159 160 161 162 163 164 165 166 167 168 169 def preview_data ( self , loader ): \"\"\" The function `preview_data` displays a preview of the CSV data loaded by the `loader` object, including the first few rows and the total number of rows in the dataframe. Args: loader: The `loader` parameter in the `preview_data` method is likely an object that contains a DataFrame (`df`) attribute. This DataFrame is used to display a preview of the data in the CSV file being loaded. The method displays the first few rows of the DataFrame and the total number of rows in \"\"\" self . ui . subheader ( \"CSV Preview:\" ) self . ui . write ( loader . df . head ()) self . ui . write ( f \"Total rows in dataframe: { len ( loader . df ) } \" ) select_evaluation_column ( loader ) The function select_evaluation_column prompts the user to select a column from a DataFrame for use as the ground truth column. Parameters: loader \u2013 The loader parameter in the select_evaluation_column method seems to be an object that has a property df which is a DataFrame. The method allows the user to select a column from the DataFrame loader.df as the ground truth column. The user interface (UI) component used Returns: \u2013 the column selected as the ground truth column from the DataFrame loaded by the loader. Source code in LabeLMaker/streamlit_interface.py 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 def select_evaluation_column ( self , loader ): \"\"\" The function `select_evaluation_column` prompts the user to select a column from a DataFrame for use as the ground truth column. Args: loader: The `loader` parameter in the `select_evaluation_column` method seems to be an object that has a property `df` which is a DataFrame. The method allows the user to select a column from the DataFrame `loader.df` as the ground truth column. The user interface (UI) component used Returns: the column selected as the ground truth column from the DataFrame loaded by the loader. \"\"\" ground_truth_col = self . ui . selectbox ( \"Select Ground Truth Column\" , loader . df . columns , key = \"eval_gt_column\" ) return ground_truth_col","title":"Label Maker Handler"},{"location":"LabeLMaker/streamlit_interface.html#LabeLMaker.streamlit_interface.BaseHandler","text":"Provides common helper functionality used in evaluation and categorization tasks, such as file upload and download functions. Source code in LabeLMaker/streamlit_interface.py 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 class BaseHandler : \"\"\" Provides common helper functionality used in evaluation and categorization tasks, such as file upload and download functions. \"\"\" def __init__ ( self , ui_helper ): \"\"\" The function initializes an object with a UI helper wrapper provided as a parameter. Args: ui_helper: The `ui_helper` parameter in the `__init__` method is expected to be an object that represents a UI helper wrapper, such as a Streamlit UI object. This parameter is used to interact with the user interface within the class or object where the `__init__` method is defined \"\"\" self . ui = ui_helper # The UI helper wrapper (e.g., Streamlit UI) def _ensure_file ( self , file , upload_message , file_types , key , info_message , accept_multiple_files : bool = False , ): \"\"\" The function `_ensure_file` checks if a file is provided, and if not, prompts the user to upload a file or displays an info message. Args: file: The `file` parameter in the `_ensure_file` method is used to represent the file that needs to be ensured or uploaded. If the `file` is `None`, the method will call the UI uploader to upload a file. upload_message: `upload_message` is a message that will be displayed to prompt the user to upload a file. It serves as an instruction or guidance for the user on what action to take. file_types: The `file_types` parameter in the `_ensure_file` method is used to specify the types of files that can be uploaded. It is typically a list of strings representing the allowed file extensions or MIME types. For example, `file_types=['.txt', '.csv', 'image/jpeg']` key: The `key` parameter in the `_ensure_file` method is used as a unique identifier for the file uploader component. It helps in associating the uploaded file with a specific key, which can be useful for tracking or handling the file data within the application. info_message: The `info_message` parameter in the `_ensure_file` method is a message that will be displayed if the `file` is still `None` after attempting to upload a file using the UI uploader. It serves as an informational message to the user indicating that no file was uploaded. accept_multiple_files (bool): The `accept_multiple_files` parameter in the `_ensure_file` method is a boolean flag that determines whether the file uploader should allow the user to upload multiple files at once. If set to `True`, the file uploader will enable the user to select and upload multiple files simultaneously. If set to `. Defaults to False Returns: the `file` variable, which may have been updated based on the conditions inside the function. If `file` is None initially and remains None after attempting to upload a file, an info message is displayed and None is returned. \"\"\" if file is None : file = self . ui . file_uploader ( label = upload_message , type = file_types , accept_multiple_files = accept_multiple_files , key = key , ) if file is None : self . ui . info ( info_message ) return file def generate_docx_report_download ( self , doc ): \"\"\" The function generates a DOCX report and converts it into bytes for file download. Args: doc: The `doc` parameter in the `generate_docx_report_download` function is expected to be a DOCX Document object that you want to convert into bytes for file download. Returns: The function `generate_docx_report_download` returns the DOCX document converted into bytes to allow file download. \"\"\" \"\"\" Convert the DOCX Document into bytes to allow file download. \"\"\" temp_stream = io . BytesIO () doc . save ( temp_stream ) temp_stream . seek ( 0 ) return temp_stream . read ()","title":"BaseHandler"},{"location":"LabeLMaker/streamlit_interface.html#LabeLMaker.streamlit_interface.BaseHandler.__init__","text":"The function initializes an object with a UI helper wrapper provided as a parameter. Parameters: ui_helper \u2013 The ui_helper parameter in the __init__ method is expected to be an object that represents a UI helper wrapper, such as a Streamlit UI object. This parameter is used to interact with the user interface within the class or object where the __init__ method is defined Source code in LabeLMaker/streamlit_interface.py 36 37 38 39 40 41 42 43 44 45 def __init__ ( self , ui_helper ): \"\"\" The function initializes an object with a UI helper wrapper provided as a parameter. Args: ui_helper: The `ui_helper` parameter in the `__init__` method is expected to be an object that represents a UI helper wrapper, such as a Streamlit UI object. This parameter is used to interact with the user interface within the class or object where the `__init__` method is defined \"\"\" self . ui = ui_helper # The UI helper wrapper (e.g., Streamlit UI)","title":"__init__"},{"location":"LabeLMaker/streamlit_interface.html#LabeLMaker.streamlit_interface.BaseHandler.generate_docx_report_download","text":"The function generates a DOCX report and converts it into bytes for file download. Parameters: doc \u2013 The doc parameter in the generate_docx_report_download function is expected to be a DOCX Document object that you want to convert into bytes for file download. Returns: \u2013 The function generate_docx_report_download returns the DOCX document converted into bytes to allow file download. Source code in LabeLMaker/streamlit_interface.py 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 def generate_docx_report_download ( self , doc ): \"\"\" The function generates a DOCX report and converts it into bytes for file download. Args: doc: The `doc` parameter in the `generate_docx_report_download` function is expected to be a DOCX Document object that you want to convert into bytes for file download. Returns: The function `generate_docx_report_download` returns the DOCX document converted into bytes to allow file download. \"\"\" \"\"\" Convert the DOCX Document into bytes to allow file download. \"\"\" temp_stream = io . BytesIO () doc . save ( temp_stream ) temp_stream . seek ( 0 ) return temp_stream . read ()","title":"generate_docx_report_download"},{"location":"LabeLMaker/streamlit_interface.html#LabeLMaker.streamlit_interface.CategorizeHandler","text":"Bases: BaseHandler Handles file uploads and categorization workflows. Includes both single and multiple file upload, workflow setup and execution, and processing of categorization results using zero-shot, few-shot, or many-shot methods. Source code in LabeLMaker/streamlit_interface.pyclass CategorizeHandler ( BaseHandler ): \"\"\" Handles file uploads and categorization workflows. Includes both single and multiple file upload, workflow setup and execution, and processing of categorization results using zero-shot, few-shot, or many-shot methods. \"\"\" def __init__ ( self , ui_helper , azure_key = None ): \"\"\" The function initializes a class instance with a UI helper and an optional Azure key for file management and configuration. Args: ui_helper: The `ui_helper` parameter is an object that provides helper functions or utilities related to user interface operations. It is being passed to the constructor of the current class as an argument. azure_key: The `azure_key` parameter is an optional parameter that can be passed to the `__init__` method of a class. It is used to provide an Azure key that may be required for certain operations within the class. If a value is provided for `azure_key`, it will be used to \"\"\" super () . __init__ ( ui_helper ) self . fm = FileManager ( azure_key ) self . config = Config def get_document_analysis_client ( self ): \"\"\" This function returns a valid document analysis client based on the configuration provided. Returns: A valid document analysis client based on the configuration is being returned if the condition `if hasattr(self.config, \"AZURE_DOCAI_KEY\") and self.config.AZURE_DOCAI_KEY` is met. Otherwise, `None` is returned. \"\"\" if hasattr ( self . config , \"AZURE_DOCAI_KEY\" ) and self . config . AZURE_DOCAI_KEY : return create_document_analysis_client ( self . config . AZURE_DOCAI_KEY ) return None def _get_default_categories ( self , df , col ): \"\"\" The function `_get_default_categories` retrieves unique values from a specified column in a DataFrame, with a warning if there are more than 10 unique values. Args: df: The `df` parameter in the `_get_default_categories` method is typically a pandas DataFrame that contains the data from which you want to extract unique values for a specific column (`col`). The method checks if the specified column exists in the DataFrame and then retrieves the unique values from that column to generate a col: The `col` parameter in the `_get_default_categories` method is used to specify the column name from the DataFrame (`df`) for which you want to retrieve default categories. The method checks if the column name is valid (not empty and exists in the DataFrame), then it retrieves unique non-null values Returns: An empty string is being returned if the conditions in the function are not met. \"\"\" if col and col . strip () != \"\" and col in df . columns : unique_values = df [ col ] . dropna () . unique () if len ( unique_values ) > self . config . MAX_RECOMMENDED_GROUPS : self . ui . warning ( \"There are more than 10 unique values in the column. \" \"Auto-population of categories may not be practical.\" ) return \"\" return \",\" . join ([ str ( val ) for val in unique_values ]) return \"\" def _prepare_ground_truth_examples ( self , df , id_col , text_col , gt_col , few_shot_count = 2 , many_shot_train_ratio = 0.8 ): \"\"\" The function `_prepare_ground_truth_examples` prepares few-shot and many-shot examples with corresponding IDs from a DataFrame based on specified parameters. Args: df: DataFrame containing the data id_col: The `id_col` parameter in the `_prepare_ground_truth_examples` function refers to the column in the DataFrame `df` that contains unique identifiers for each record. This column is used to identify and track individual records within the dataset. text_col: The `text_col` parameter in the `_prepare_ground_truth_examples` method refers to the column in the DataFrame `df` that contains the text data for each example. This column will be used to extract the text information for creating examples during the preparation of ground truth examples. gt_col: The `gt_col` parameter in the `_prepare_ground_truth_examples` method refers to the column in the DataFrame `df` that contains the ground truth labels for the examples. This column is used for grouping the examples based on their ground truth labels during the preparation process. few_shot_count: The `few_shot_count` parameter in the `_prepare_ground_truth_examples` function determines the number of examples that will be included in the few-shot learning set. It specifies how many randomly sampled examples will be selected for each unique label in the dataset to create a few-shot learning subset. Defaults to 2 many_shot_train_ratio: The `many_shot_train_ratio` parameter in the `_prepare_ground_truth_examples` function determines the ratio of examples that will be used for training in the \"many-shot\" category. For example, if `many_shot_train_ratio=0.8`, it means that 80% of the examples for Returns: The function `_prepare_ground_truth_examples` returns four values: `few_shot_examples`, `few_shot_ids`, `many_shot_examples`, and `many_shot_test_ids`. \"\"\" few_shot_examples = [] few_shot_ids = set () many_shot_examples = [] many_shot_test_ids = set () df_gt = df [[ id_col , text_col , gt_col ]] . copy () df_gt [ gt_col ] = df_gt [ gt_col ] . astype ( str ) . str . lower () grouped = df_gt . groupby ( gt_col ) for label , group in grouped : records = group . to_dict ( orient = \"records\" ) count = min ( few_shot_count , len ( records )) if count > 0 : sampled = random . sample ( records , count ) for rec in sampled : few_shot_examples . append ( Example ( text_with_label = str ( rec [ text_col ]), label = str ( rec [ gt_col ])) ) few_shot_ids . add ( str ( rec [ id_col ])) if len ( records ) > 1 : shuffled = records . copy () random . shuffle ( shuffled ) train_size = max ( 1 , int ( many_shot_train_ratio * len ( records ))) train_examples = shuffled [: train_size ] test_examples = shuffled [ train_size :] for rec in train_examples : many_shot_examples . append ( Example ( text_with_label = str ( rec [ text_col ]), label = str ( rec [ gt_col ])) ) for rec in test_examples : many_shot_test_ids . add ( str ( rec [ id_col ])) return few_shot_examples , few_shot_ids , many_shot_examples , many_shot_test_ids def setup_workflow ( self , df ): \"\"\" The `setup_workflow` function in Python sets up parameters for a workflow, including selecting columns, creating unique identifiers, and choosing evaluation approaches. Args: df: The `setup_workflow` function is designed to set up parameters for a workflow based on user interactions with a UI. The function takes a DataFrame `df` as input and performs the following tasks: Returns: The `setup_workflow` function returns a dictionary `params` containing various parameters set based on user inputs and selections made during the workflow setup process. The function collects information such as the mode (Evaluation or Production), unique identifier column, categorizing column, ground truth column, evaluation techniques selected, and related parameters for Few Shot and Many Shot evaluation approaches. Additionally, it includes information about default categories and descriptions \"\"\" params = {} advanced_mode = self . ui . checkbox ( \"Advanced Mode\" , help = \"For users with ground truth labels. Check to run evaluation pipeline.\" , key = \"advanced_mode\" , ) if advanced_mode : self . ui . info ( \"Advanced Mode is activated: Users can select classification mode (e.g., zero shot, few shot, or many shot)\" ) else : self . ui . info ( \"Advanced Mode is not activated: Classification will be determined by number of examples provided\" ) params [ \"mode\" ] = \"Evaluation\" if advanced_mode else \"Production\" if not self . ui . session_state . get ( \"uniqueIdSetup_done\" ): self . ui . markdown ( \"### Unique Identifier Setup\" ) id_choice = self . ui . radio ( \"How would you like to specify a unique identifier?\" , options = [ \"Create new ID column\" , \"Use an existing column\" ], index = 0 , key = \"id_choice\" , ) if id_choice == \"Create new ID column\" : new_id_col = self . ui . text_input ( \"Enter name for the new ID column\" , value = \"id\" , key = \"new_id_column\" ) if self . ui . button ( \"Create ID Column\" , key = \"create_id_column\" ): if new_id_col not in df . columns : df [ new_id_col ] = df . index . astype ( str ) self . ui . success ( f \"New ID column ' { new_id_col } ' created.\" ) else : self . ui . info ( f \"Column ' { new_id_col } ' already exists; using it.\" ) self . ui . session_state [ \"single_file_df\" ] = df self . ui . session_state [ \"selected_id_column\" ] = new_id_col self . ui . session_state [ \"uniqueIdSetup_done\" ] = True else : selected_existing = self . ui . selectbox ( \"Select the column to use as the unique identifier\" , options = df . columns . tolist (), key = \"existing_id_column\" , ) if self . ui . button ( \"Confirm ID Column\" , key = \"confirm_id_column\" ): self . ui . session_state [ \"selected_id_column\" ] = selected_existing self . ui . session_state [ \"uniqueIdSetup_done\" ] = True sel_id = self . ui . session_state . get ( \"selected_id_column\" ) if sel_id and sel_id not in df . columns : df [ sel_id ] = df . index . astype ( str ) self . ui . session_state [ \"single_file_df\" ] = df params [ \"index_column\" ] = self . ui . session_state . get ( \"selected_id_column\" ) self . ui . write ( f \"Using ' { params [ 'index_column' ] } ' as the unique identifier column.\" ) df_columns = df . columns . tolist () params [ \"categorizing_column\" ] = self . ui . selectbox ( \"Select the column with text data you want to label\" , options = df_columns , key = \"categorizing_column\" , ) if \"ground_truth_column\" not in self . ui . session_state : self . ui . session_state [ \"ground_truth_column\" ] = df_columns [ 0 ] gt_col = self . ui . selectbox ( \"Select the column with ground truth labels\" , options = df_columns , key = \"ground_truth_column\" , index = df_columns . index ( self . ui . session_state [ \"ground_truth_column\" ]), ) params [ \"ground_truth_column\" ] = gt_col if params [ \"mode\" ] == \"Evaluation\" : eval_techniques = self . ui . multiselect ( \"Select the evaluation approaches to run:\" , options = [ \"Zero Shot\" , \"Few Shot\" , \"Many Shot\" ], default = [ \"Zero Shot\" ], key = \"evaluation_techniques\" , ) params [ \"evaluation_techniques\" ] = eval_techniques if \"Few Shot\" in eval_techniques : few_shot_count = self . ui . number_input ( \"Enter maximum examples per category (Few Shot)\" , min_value = 1 , value = 2 , key = \"few_shot_count\" , ) params [ \"few_shot_count\" ] = few_shot_count if \"Many Shot\" in eval_techniques : many_shot_train_ratio = self . ui . number_input ( \"Enter train proportion for Many Shot (0 to 1)\" , min_value = 0.0 , max_value = 1.0 , value = 0.8 , key = \"many_shot_train_ratio\" , ) params [ \"many_shot_train_ratio\" ] = many_shot_train_ratio default_categories = self . _get_default_categories ( df , gt_col ) categories_dict , categories_with_descriptions = CategoryManager . define_categories ( self . ui , \"tab1\" , unique_values_str = default_categories ) params [ \"categories_dict\" ] = categories_dict params [ \"categories_with_descriptions\" ] = categories_with_descriptions return params def categorize_data ( self , df , params , zs_prompty , fs_prompty ): \"\"\" The function categorizes data based on specified parameters, using different techniques such as Zero Shot, Few Shot, and Many Shot categorization. Args: df: The `df` parameter in the `categorize_data` function is typically a pandas DataFrame containing the data that needs to be categorized. This DataFrame should include columns with the data to be categorized, as well as any additional columns required for the categorization process such as unique identifiers, ground truth labels params: The `params` dictionary contains the following keys and their corresponding values: zs_prompty: The `zs_prompty` parameter in the code snippet refers to the path of the Zero Shot categorization model that will be used in the workflow. This model is utilized for performing Zero Shot categorization, where the model predicts categories for data points without any prior training on those specific categories. fs_prompty: The `fs_prompty` parameter in the provided code snippet is used as the path to the Few-Shot Categorizer model for categorizing data. This path is utilized when running the workflow for Few Shot categorization within the `categorize_data` method. The Few-Shot Categor Returns: The `categorize_data` function returns a DataFrame `merged_df` that contains the original data along with additional columns for predicted category and rationale based on the categorization process specified in the function. The specific columns added to `merged_df` depend on the categorization mode chosen (Evaluation or Production) and the evaluation techniques used (Zero Shot, Few Shot, Many Shot). \"\"\" index_column = params [ \"index_column\" ] cat_col = params [ \"categorizing_column\" ] mode_choice = params [ \"mode\" ] if index_column not in df . columns : self . ui . info ( f \"Unique ID column ' { index_column } ' was not found. Creating new column ' { index_column } '.\" ) df [ index_column ] = df . index . astype ( str ) self . ui . session_state [ \"selected_id_column\" ] = index_column categories_dict = params . get ( \"categories_dict\" , {}) text_to_label = df [ cat_col ] . astype ( str ) . tolist () unique_ids = df [ index_column ] . astype ( str ) . tolist () if mode_choice == \"Evaluation\" : categorization_request = CategoryManager . create_request ( unique_ids , text_to_label , categories_dict ) gt_column = params [ \"ground_truth_column\" ] eval_techniques = params . get ( \"evaluation_techniques\" , [ \"Zero Shot\" ]) predictions = {} few_shot_count = params . get ( \"few_shot_count\" , 2 ) many_shot_train_ratio = params . get ( \"many_shot_train_ratio\" , 0.8 ) ( few_shot_examples , few_shot_ids , many_shot_examples , many_shot_test_ids , ) = self . _prepare_ground_truth_examples ( df , index_column , cat_col , gt_column , few_shot_count , many_shot_train_ratio ) for technique in eval_techniques : if technique == \"Zero Shot\" : with self . ui . spinner ( \"Running workflow (Zero Shot categorization)...\" ): categorizer = ZeroShotCategorizer ( prompty_path = zs_prompty , category_request = categorization_request ) results = categorizer . process () predictions [ \"Zero Shot\" ] = results elif technique == \"Few Shot\" : few_shot_request = CategoryManager . create_request ( unique_ids , text_to_label , categories_dict , few_shot_examples ) with self . ui . spinner ( \"Running workflow (Few Shot categorization)...\" ): categorizer = FewShotCategorizer ( prompty_path = fs_prompty , category_request = few_shot_request ) results = categorizer . process () filtered_results = [ r for r in results if str ( r [ 0 ]) not in few_shot_ids ] predictions [ \"Few Shot\" ] = filtered_results elif technique == \"Many Shot\" : many_shot_request = CategoryManager . create_request ( unique_ids , text_to_label , categories_dict , many_shot_examples ) with self . ui . spinner ( \"Running workflow (Many Shot categorization)...\" ): categorizer = ManyshotClassifier ( categorization_request = many_shot_request , min_class_count = self . config . MIN_SAMPLES_MANY_SHOT , ) results = categorizer . process () results = [ r for r in results if str ( r [ 0 ]) in many_shot_test_ids ] predictions [ \"Many Shot\" ] = results merged_df = df . copy () for tech , results in predictions . items (): tech_pred_df = pd . DataFrame ( [( row [ 0 ], row [ 2 ], row [ 3 ]) for row in results ], columns = [ index_column , f \"Predicted Category ( { tech } )\" , f \"Rationale ( { tech } )\" ], ) merged_df [ index_column ] = merged_df [ index_column ] . astype ( str ) tech_pred_df [ index_column ] = tech_pred_df [ index_column ] . astype ( str ) merged_df = pd . merge ( merged_df , tech_pred_df , on = index_column , how = \"left\" ) return merged_df else : gt_column = params [ \"ground_truth_column\" ] all_examples = [ ( str ( text ), str ( gt )) for text , gt in zip ( df [ cat_col ], df [ gt_column ] . astype ( str ) . str . lower ()) if gt ] categorization_request = CategoryManager . create_request ( unique_ids , text_to_label , categories_dict , all_examples ) num_examples = len ( all_examples ) self . ui . write ( f \"Number of examples provided: { num_examples } \" ) categorized_results = [] if num_examples == 0 : with self . ui . spinner ( \"Running workflow (Zero-Shot Production)...\" ): categorizer = ZeroShotCategorizer ( prompty_path = zs_prompty , category_request = categorization_request ) categorized_results = categorizer . process () elif num_examples < Config . MIN_SAMPLES_MANY_SHOT : with self . ui . spinner ( \"Running workflow (Few-Shot Production)...\" ): categorizer = FewShotCategorizer ( prompty_path = fs_prompty , category_request = categorization_request ) categorized_results = categorizer . process () else : label_counts = df [ gt_column ] . value_counts () min_class_samples = label_counts . min () if not label_counts . empty else 0 with self . ui . spinner ( \"Running workflow (Many-Shot Production)...\" ): categorizer = ManyshotClassifier ( categorization_request = categorization_request , min_class_count = min_class_samples , ) categorized_results = categorizer . process () results_df = pd . DataFrame ( [( row [ 0 ], row [ 2 ], row [ 3 ]) for row in categorized_results ], columns = [ index_column , \"Category\" , \"Rationale\" ], ) df [ index_column ] = df [ index_column ] . astype ( str ) results_df [ index_column ] = results_df [ index_column ] . astype ( str ) merged_df = pd . merge ( df , results_df , on = index_column , how = \"left\" ) final_columns = list ( df . columns ) + [ \"Category\" , \"Rationale\" ] merged_df = merged_df [ final_columns ] return merged_df def handle_single_upload ( self , zs_prompty = Path ( Config . ZS_PROMPTY ), fs_prompty = Path ( Config . FS_PROMPTY ) ): \"\"\" The `handle_single_upload` function handles the uploading, processing, and categorization of a single CSV or XLSX file. Args: zs_prompty: The `zs_prompty` parameter in the `handle_single_upload` method is set to the value of `Path(Config.ZS_PROMPTY)`. This means that the `zs_prompty` parameter is a Path object initialized with the value of `Config.ZS_PROMPTY`. fs_prompty: The `fs_prompty` parameter in the `handle_single_upload` method is a Path object that is set to the value of `Config.FS_PROMPTY`. It is used as a default value for the parameter if no value is provided when calling the method. The purpose of this parameter is to Returns: The `handle_single_upload` method returns either None if the uploaded file is None or if there is an error processing the uploaded file. Otherwise, it does not explicitly return a value, but it performs various operations such as setting session state variables, processing the uploaded file, categorizing the data, and providing a download button for the results. \"\"\" file = self . _ensure_file ( file = None , upload_message = \"Upload your file\" , file_types = [ \"csv\" , \"xlsx\" ], key = \"single_file_uploader\" , info_message = \"Please upload a CSV or XLSX file to proceed.\" , ) if file is None : return self . ui . session_state [ \"uploaded_file_single\" ] = file try : document_analysis_client = self . get_document_analysis_client () upload_manager = StreamlitUploadManager ( file , accept_multiple_files = False , document_analysis_client = document_analysis_client ) file_data , extension = upload_manager . process_upload () self . ui . session_state [ \"single_file_df\" ] = file_data except Exception as e : self . ui . error ( f \"Error processing the uploaded file: { e } \" ) return if self . ui . session_state . get ( \"single_file_df\" ) is not None : df = self . ui . session_state [ \"single_file_df\" ] self . ui . write ( f \"Uploaded file: { file . name } \" ) params = self . setup_workflow ( df ) if self . ui . button ( \"Categorize\" , key = \"tab1_submit\" ): merged_df = self . categorize_data ( df , params , zs_prompty , fs_prompty ) csv_data = merged_df . to_csv ( index = False ) . encode ( \"utf-8\" ) self . ui . download_button ( label = \"Download Results\" , data = csv_data , file_name = \"AI_Generated_Categorization.csv\" , mime = \"text/csv\" , ) def process_multiple_files ( self , uploaded_files ): \"\"\" The function `process_multiple_files` processes uploaded files using a document analysis client and returns the filenames and corresponding texts. Args: uploaded_files: Uploaded_files is a list of files that have been uploaded by the user. Each file in the list represents a file that the user has uploaded for processing. Returns: The `process_multiple_files` function returns two lists: `filenames` and `texts`. The `filenames` list contains the names of the uploaded files, while the `texts` list contains the processed data from the uploaded files. \"\"\" filenames = [] texts = [] document_analysis_client = self . get_document_analysis_client () for file in uploaded_files : upload_manager = StreamlitUploadManager ( file , accept_multiple_files = False , document_analysis_client = document_analysis_client ) file_data , _ = upload_manager . process_upload () if file_data : filenames . append ( file . name ) texts . append ( file_data ) return filenames , texts def process_results ( self , results ): \"\"\" The function `process_results` displays categorization results with optional formatting options. Args: results: The `results` parameter in the `process_results` method is used to pass the results that need to be processed or displayed. It could be any data structure or information that the method needs to work with, such as a list, dictionary, string, etc. \"\"\" self . ui . write ( \"Categorization Results:\" ) self . ui . write ( results ) def handle_multiple_upload ( self , zs_prompty = Path ( Config . ZS_PROMPTY ), fs_prompty = Path ( Config . FS_PROMPTY ) ): \"\"\" The function `handle_multiple_upload` manages the upload and processing of multiple files, categorizes text excerpts, and processes the categorization results using either a few-shot or zero-shot categorizer. Args: zs_prompty: The `zs_prompty` parameter in the `handle_multiple_upload` function is a Path object that represents the path to the ZS_PROMPTY configuration in the Config module. It is used as a default value for the `prompty_path` parameter when initializing a ZeroShotCategorizer object in fs_prompty: The `fs_prompty` parameter in the `handle_multiple_upload` function seems to be a Path object that is initialized with the value from `Config.FS_PROMPTY`. It is used as the `prompty_path` parameter when creating instances of `FewShotCategorizer` or `ZeroShotCategorizer` \"\"\" # Provide a \"Clear All\" option as before. if self . ui . button ( \"Clear All\" , key = \"multi_clear_all\" ): if \"uploaded_files_multiple\" in self . ui . session_state : del self . ui . session_state [ \"uploaded_files_multiple\" ] if \"processed_files_multiple\" in self . ui . session_state : del self . ui . session_state [ \"processed_files_multiple\" ] self . ui . rerun () # Use the common file uploader helper for multiple files. files = self . _ensure_file ( file = None , upload_message = \"Upload your files\" , file_types = [ \"docx\" , \"pdf\" ], key = \"multiple_file_uploader\" , info_message = \"Please upload DOCX or PDF files to proceed.\" , ) if files : self . ui . session_state [ \"uploaded_files_multiple\" ] = files file_names = [ file . name for file in files ] if isinstance ( files , list ) else [ files . name ] self . ui . write ( f \"Uploaded files: { file_names } \" ) filenames , texts = self . process_multiple_files ( files ) self . ui . session_state [ \"processed_files_multiple\" ] = ( filenames , texts ) if self . ui . session_state . get ( \"processed_files_multiple\" ) is not None : filenames , texts = self . ui . session_state [ \"processed_files_multiple\" ] text_to_label = texts categories_dict , examples = CategoryManager . define_categories ( self . ui , \"tab2\" , get_file_examples = True ) self . ui . write ( \"Texts (excerpts) to label:\" ) for text in text_to_label [: 5 ]: self . ui . write ( text [: 250 ]) if self . ui . button ( \"Categorize\" , key = \"tab2_submit\" ): categorized_results = [] if examples : categorization_request = CategoryManager . create_request ( filenames , text_to_label , categories_dict , examples ) few_shot_categorizer = FewShotCategorizer ( prompty_path = fs_prompty , category_request = categorization_request ) categorized_results = few_shot_categorizer . process () else : categorization_request = CategoryManager . create_request ( filenames , text_to_label , categories_dict ) zero_shot_categorizer = ZeroShotCategorizer ( prompty_path = zs_prompty , category_request = categorization_request ) categorized_results = zero_shot_categorizer . process () self . process_results ( categorized_results , replace_newlines = True , fill_missing = True )","title":"CategorizeHandler"},{"location":"LabeLMaker/streamlit_interface.html#LabeLMaker.streamlit_interface.CategorizeHandler.__init__","text":"The function initializes a class instance with a UI helper and an optional Azure key for file management and configuration. Parameters: ui_helper \u2013 The ui_helper parameter is an object that provides helper functions or utilities related to user interface operations. It is being passed to the constructor of the current class as an argument. azure_key: The azure_key parameter is an optional parameter that can be passed to the __init__ method of a class. It is used to provide an Azure key that may be required for certain operations within the class. If a value is provided for azure_key , it will be used to Source code in LabeLMaker/streamlit_interface.py 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 def __init__ ( self , ui_helper , azure_key = None ): \"\"\" The function initializes a class instance with a UI helper and an optional Azure key for file management and configuration. Args: ui_helper: The `ui_helper` parameter is an object that provides helper functions or utilities related to user interface operations. It is being passed to the constructor of the current class as an argument. azure_key: The `azure_key` parameter is an optional parameter that can be passed to the `__init__` method of a class. It is used to provide an Azure key that may be required for certain operations within the class. If a value is provided for `azure_key`, it will be used to \"\"\" super () . __init__ ( ui_helper ) self . fm = FileManager ( azure_key ) self . config = Config","title":"__init__"},{"location":"LabeLMaker/streamlit_interface.html#LabeLMaker.streamlit_interface.CategorizeHandler.categorize_data","text":"The function categorizes data based on specified parameters, using different techniques such as Zero Shot, Few Shot, and Many Shot categorization. Parameters: df \u2013 The df parameter in the categorize_data function is typically a pandas DataFrame containing the data that needs to be categorized. This DataFrame should include columns with the data to be categorized, as well as any additional columns required for the categorization process such as unique identifiers, ground truth labels params: The params dictionary contains the following keys and their corresponding values: zs_prompty: The zs_prompty parameter in the code snippet refers to the path of the Zero Shot categorization model that will be used in the workflow. This model is utilized for performing Zero Shot categorization, where the model predicts categories for data points without any prior training on those specific categories. fs_prompty: The fs_prompty parameter in the provided code snippet is used as the path to the Few-Shot Categorizer model for categorizing data. This path is utilized when running the workflow for Few Shot categorization within the categorize_data method. The Few-Shot Categor Returns: \u2013 The categorize_data function returns a DataFrame merged_df that contains the original data along with additional columns for predicted category and rationale based on the categorization process specified in the function. The specific columns added to merged_df depend on the categorization mode chosen (Evaluation or Production) and the evaluation techniques used (Zero Shot, Few Shot, Many Shot). Source code in LabeLMaker/streamlit_interface.pydef categorize_data ( self , df , params , zs_prompty , fs_prompty ): \"\"\" The function categorizes data based on specified parameters, using different techniques such as Zero Shot, Few Shot, and Many Shot categorization. Args: df: The `df` parameter in the `categorize_data` function is typically a pandas DataFrame containing the data that needs to be categorized. This DataFrame should include columns with the data to be categorized, as well as any additional columns required for the categorization process such as unique identifiers, ground truth labels params: The `params` dictionary contains the following keys and their corresponding values: zs_prompty: The `zs_prompty` parameter in the code snippet refers to the path of the Zero Shot categorization model that will be used in the workflow. This model is utilized for performing Zero Shot categorization, where the model predicts categories for data points without any prior training on those specific categories. fs_prompty: The `fs_prompty` parameter in the provided code snippet is used as the path to the Few-Shot Categorizer model for categorizing data. This path is utilized when running the workflow for Few Shot categorization within the `categorize_data` method. The Few-Shot Categor Returns: The `categorize_data` function returns a DataFrame `merged_df` that contains the original data along with additional columns for predicted category and rationale based on the categorization process specified in the function. The specific columns added to `merged_df` depend on the categorization mode chosen (Evaluation or Production) and the evaluation techniques used (Zero Shot, Few Shot, Many Shot). \"\"\" index_column = params [ \"index_column\" ] cat_col = params [ \"categorizing_column\" ] mode_choice = params [ \"mode\" ] if index_column not in df . columns : self . ui . info ( f \"Unique ID column ' { index_column } ' was not found. Creating new column ' { index_column } '.\" ) df [ index_column ] = df . index . astype ( str ) self . ui . session_state [ \"selected_id_column\" ] = index_column categories_dict = params . get ( \"categories_dict\" , {}) text_to_label = df [ cat_col ] . astype ( str ) . tolist () unique_ids = df [ index_column ] . astype ( str ) . tolist () if mode_choice == \"Evaluation\" : categorization_request = CategoryManager . create_request ( unique_ids , text_to_label , categories_dict ) gt_column = params [ \"ground_truth_column\" ] eval_techniques = params . get ( \"evaluation_techniques\" , [ \"Zero Shot\" ]) predictions = {} few_shot_count = params . get ( \"few_shot_count\" , 2 ) many_shot_train_ratio = params . get ( \"many_shot_train_ratio\" , 0.8 ) ( few_shot_examples , few_shot_ids , many_shot_examples , many_shot_test_ids , ) = self . _prepare_ground_truth_examples ( df , index_column , cat_col , gt_column , few_shot_count , many_shot_train_ratio ) for technique in eval_techniques : if technique == \"Zero Shot\" : with self . ui . spinner ( \"Running workflow (Zero Shot categorization)...\" ): categorizer = ZeroShotCategorizer ( prompty_path = zs_prompty , category_request = categorization_request ) results = categorizer . process () predictions [ \"Zero Shot\" ] = results elif technique == \"Few Shot\" : few_shot_request = CategoryManager . create_request ( unique_ids , text_to_label , categories_dict , few_shot_examples ) with self . ui . spinner ( \"Running workflow (Few Shot categorization)...\" ): categorizer = FewShotCategorizer ( prompty_path = fs_prompty , category_request = few_shot_request ) results = categorizer . process () filtered_results = [ r for r in results if str ( r [ 0 ]) not in few_shot_ids ] predictions [ \"Few Shot\" ] = filtered_results elif technique == \"Many Shot\" : many_shot_request = CategoryManager . create_request ( unique_ids , text_to_label , categories_dict , many_shot_examples ) with self . ui . spinner ( \"Running workflow (Many Shot categorization)...\" ): categorizer = ManyshotClassifier ( categorization_request = many_shot_request , min_class_count = self . config . MIN_SAMPLES_MANY_SHOT , ) results = categorizer . process () results = [ r for r in results if str ( r [ 0 ]) in many_shot_test_ids ] predictions [ \"Many Shot\" ] = results merged_df = df . copy () for tech , results in predictions . items (): tech_pred_df = pd . DataFrame ( [( row [ 0 ], row [ 2 ], row [ 3 ]) for row in results ], columns = [ index_column , f \"Predicted Category ( { tech } )\" , f \"Rationale ( { tech } )\" ], ) merged_df [ index_column ] = merged_df [ index_column ] . astype ( str ) tech_pred_df [ index_column ] = tech_pred_df [ index_column ] . astype ( str ) merged_df = pd . merge ( merged_df , tech_pred_df , on = index_column , how = \"left\" ) return merged_df else : gt_column = params [ \"ground_truth_column\" ] all_examples = [ ( str ( text ), str ( gt )) for text , gt in zip ( df [ cat_col ], df [ gt_column ] . astype ( str ) . str . lower ()) if gt ] categorization_request = CategoryManager . create_request ( unique_ids , text_to_label , categories_dict , all_examples ) num_examples = len ( all_examples ) self . ui . write ( f \"Number of examples provided: { num_examples } \" ) categorized_results = [] if num_examples == 0 : with self . ui . spinner ( \"Running workflow (Zero-Shot Production)...\" ): categorizer = ZeroShotCategorizer ( prompty_path = zs_prompty , category_request = categorization_request ) categorized_results = categorizer . process () elif num_examples < Config . MIN_SAMPLES_MANY_SHOT : with self . ui . spinner ( \"Running workflow (Few-Shot Production)...\" ): categorizer = FewShotCategorizer ( prompty_path = fs_prompty , category_request = categorization_request ) categorized_results = categorizer . process () else : label_counts = df [ gt_column ] . value_counts () min_class_samples = label_counts . min () if not label_counts . empty else 0 with self . ui . spinner ( \"Running workflow (Many-Shot Production)...\" ): categorizer = ManyshotClassifier ( categorization_request = categorization_request , min_class_count = min_class_samples , ) categorized_results = categorizer . process () results_df = pd . DataFrame ( [( row [ 0 ], row [ 2 ], row [ 3 ]) for row in categorized_results ], columns = [ index_column , \"Category\" , \"Rationale\" ], ) df [ index_column ] = df [ index_column ] . astype ( str ) results_df [ index_column ] = results_df [ index_column ] . astype ( str ) merged_df = pd . merge ( df , results_df , on = index_column , how = \"left\" ) final_columns = list ( df . columns ) + [ \"Category\" , \"Rationale\" ] merged_df = merged_df [ final_columns ] return merged_df","title":"categorize_data"},{"location":"LabeLMaker/streamlit_interface.html#LabeLMaker.streamlit_interface.CategorizeHandler.get_document_analysis_client","text":"This function returns a valid document analysis client based on the configuration provided. Returns: \u2013 A valid document analysis client based on the configuration is being returned if the condition `if hasattr(self.config, \"AZURE_DOCAI_KEY\") and self.config.AZURE_DOCAI_KEY is met. Otherwise, None` is returned. Source code in LabeLMaker/streamlit_interface.py 435 436 437 438 439 440 441 442 443 444 445 446 def get_document_analysis_client ( self ): \"\"\" This function returns a valid document analysis client based on the configuration provided. Returns: A valid document analysis client based on the configuration is being returned if the condition `if hasattr(self.config, \"AZURE_DOCAI_KEY\") and self.config.AZURE_DOCAI_KEY` is met. Otherwise, `None` is returned. \"\"\" if hasattr ( self . config , \"AZURE_DOCAI_KEY\" ) and self . config . AZURE_DOCAI_KEY : return create_document_analysis_client ( self . config . AZURE_DOCAI_KEY ) return None","title":"get_document_analysis_client"},{"location":"LabeLMaker/streamlit_interface.html#LabeLMaker.streamlit_interface.CategorizeHandler.handle_multiple_upload","text":"The function handle_multiple_upload manages the upload and processing of multiple files, categorizes text excerpts, and processes the categorization results using either a few-shot or zero-shot categorizer. Parameters: zs_prompty \u2013 The zs_prompty parameter in the handle_multiple_upload function is a Path object that represents the path to the ZS_PROMPTY configuration in the Config module. It is used as a default value for the prompty_path parameter when initializing a ZeroShotCategorizer object in fs_prompty: The fs_prompty parameter in the handle_multiple_upload function seems to be a Path object that is initialized with the value from Config.FS_PROMPTY . It is used as the prompty_path parameter when creating instances of FewShotCategorizer or ZeroShotCategorizer Source code in LabeLMaker/streamlit_interface.py 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 def handle_multiple_upload ( self , zs_prompty = Path ( Config . ZS_PROMPTY ), fs_prompty = Path ( Config . FS_PROMPTY ) ): \"\"\" The function `handle_multiple_upload` manages the upload and processing of multiple files, categorizes text excerpts, and processes the categorization results using either a few-shot or zero-shot categorizer. Args: zs_prompty: The `zs_prompty` parameter in the `handle_multiple_upload` function is a Path object that represents the path to the ZS_PROMPTY configuration in the Config module. It is used as a default value for the `prompty_path` parameter when initializing a ZeroShotCategorizer object in fs_prompty: The `fs_prompty` parameter in the `handle_multiple_upload` function seems to be a Path object that is initialized with the value from `Config.FS_PROMPTY`. It is used as the `prompty_path` parameter when creating instances of `FewShotCategorizer` or `ZeroShotCategorizer` \"\"\" # Provide a \"Clear All\" option as before. if self . ui . button ( \"Clear All\" , key = \"multi_clear_all\" ): if \"uploaded_files_multiple\" in self . ui . session_state : del self . ui . session_state [ \"uploaded_files_multiple\" ] if \"processed_files_multiple\" in self . ui . session_state : del self . ui . session_state [ \"processed_files_multiple\" ] self . ui . rerun () # Use the common file uploader helper for multiple files. files = self . _ensure_file ( file = None , upload_message = \"Upload your files\" , file_types = [ \"docx\" , \"pdf\" ], key = \"multiple_file_uploader\" , info_message = \"Please upload DOCX or PDF files to proceed.\" , ) if files : self . ui . session_state [ \"uploaded_files_multiple\" ] = files file_names = [ file . name for file in files ] if isinstance ( files , list ) else [ files . name ] self . ui . write ( f \"Uploaded files: { file_names } \" ) filenames , texts = self . process_multiple_files ( files ) self . ui . session_state [ \"processed_files_multiple\" ] = ( filenames , texts ) if self . ui . session_state . get ( \"processed_files_multiple\" ) is not None : filenames , texts = self . ui . session_state [ \"processed_files_multiple\" ] text_to_label = texts categories_dict , examples = CategoryManager . define_categories ( self . ui , \"tab2\" , get_file_examples = True ) self . ui . write ( \"Texts (excerpts) to label:\" ) for text in text_to_label [: 5 ]: self . ui . write ( text [: 250 ]) if self . ui . button ( \"Categorize\" , key = \"tab2_submit\" ): categorized_results = [] if examples : categorization_request = CategoryManager . create_request ( filenames , text_to_label , categories_dict , examples ) few_shot_categorizer = FewShotCategorizer ( prompty_path = fs_prompty , category_request = categorization_request ) categorized_results = few_shot_categorizer . process () else : categorization_request = CategoryManager . create_request ( filenames , text_to_label , categories_dict ) zero_shot_categorizer = ZeroShotCategorizer ( prompty_path = zs_prompty , category_request = categorization_request ) categorized_results = zero_shot_categorizer . process () self . process_results ( categorized_results , replace_newlines = True , fill_missing = True )","title":"handle_multiple_upload"},{"location":"LabeLMaker/streamlit_interface.html#LabeLMaker.streamlit_interface.CategorizeHandler.handle_single_upload","text":"The handle_single_upload function handles the uploading, processing, and categorization of a single CSV or XLSX file. Parameters: zs_prompty \u2013 The zs_prompty parameter in the handle_single_upload method is set to the value of Path(Config.ZS_PROMPTY) . This means that the zs_prompty parameter is a Path object initialized with the value of Config.ZS_PROMPTY . fs_prompty: The fs_prompty parameter in the handle_single_upload method is a Path object that is set to the value of Config.FS_PROMPTY . It is used as a default value for the parameter if no value is provided when calling the method. The purpose of this parameter is to Returns: \u2013 The handle_single_upload method returns either None if the uploaded file is None or if there is an error processing the uploaded file. Otherwise, it does not explicitly return a value, but it performs various operations such as setting session state variables, processing the uploaded file, categorizing the data, and providing a download button for the results. Source code in LabeLMaker/streamlit_interface.py 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 def handle_single_upload ( self , zs_prompty = Path ( Config . ZS_PROMPTY ), fs_prompty = Path ( Config . FS_PROMPTY ) ): \"\"\" The `handle_single_upload` function handles the uploading, processing, and categorization of a single CSV or XLSX file. Args: zs_prompty: The `zs_prompty` parameter in the `handle_single_upload` method is set to the value of `Path(Config.ZS_PROMPTY)`. This means that the `zs_prompty` parameter is a Path object initialized with the value of `Config.ZS_PROMPTY`. fs_prompty: The `fs_prompty` parameter in the `handle_single_upload` method is a Path object that is set to the value of `Config.FS_PROMPTY`. It is used as a default value for the parameter if no value is provided when calling the method. The purpose of this parameter is to Returns: The `handle_single_upload` method returns either None if the uploaded file is None or if there is an error processing the uploaded file. Otherwise, it does not explicitly return a value, but it performs various operations such as setting session state variables, processing the uploaded file, categorizing the data, and providing a download button for the results. \"\"\" file = self . _ensure_file ( file = None , upload_message = \"Upload your file\" , file_types = [ \"csv\" , \"xlsx\" ], key = \"single_file_uploader\" , info_message = \"Please upload a CSV or XLSX file to proceed.\" , ) if file is None : return self . ui . session_state [ \"uploaded_file_single\" ] = file try : document_analysis_client = self . get_document_analysis_client () upload_manager = StreamlitUploadManager ( file , accept_multiple_files = False , document_analysis_client = document_analysis_client ) file_data , extension = upload_manager . process_upload () self . ui . session_state [ \"single_file_df\" ] = file_data except Exception as e : self . ui . error ( f \"Error processing the uploaded file: { e } \" ) return if self . ui . session_state . get ( \"single_file_df\" ) is not None : df = self . ui . session_state [ \"single_file_df\" ] self . ui . write ( f \"Uploaded file: { file . name } \" ) params = self . setup_workflow ( df ) if self . ui . button ( \"Categorize\" , key = \"tab1_submit\" ): merged_df = self . categorize_data ( df , params , zs_prompty , fs_prompty ) csv_data = merged_df . to_csv ( index = False ) . encode ( \"utf-8\" ) self . ui . download_button ( label = \"Download Results\" , data = csv_data , file_name = \"AI_Generated_Categorization.csv\" , mime = \"text/csv\" , )","title":"handle_single_upload"},{"location":"LabeLMaker/streamlit_interface.html#LabeLMaker.streamlit_interface.CategorizeHandler.process_multiple_files","text":"The function process_multiple_files processes uploaded files using a document analysis client and returns the filenames and corresponding texts. Parameters: uploaded_files \u2013 Uploaded_files is a list of files that have been uploaded by the user. Each file in the list represents a file that the user has uploaded for processing. Returns: \u2013 The process_multiple_files function returns two lists: filenames and texts . The filenames list contains the names of the uploaded files, while the texts list contains the processed data from the uploaded files. Source code in LabeLMaker/streamlit_interface.py 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 def process_multiple_files ( self , uploaded_files ): \"\"\" The function `process_multiple_files` processes uploaded files using a document analysis client and returns the filenames and corresponding texts. Args: uploaded_files: Uploaded_files is a list of files that have been uploaded by the user. Each file in the list represents a file that the user has uploaded for processing. Returns: The `process_multiple_files` function returns two lists: `filenames` and `texts`. The `filenames` list contains the names of the uploaded files, while the `texts` list contains the processed data from the uploaded files. \"\"\" filenames = [] texts = [] document_analysis_client = self . get_document_analysis_client () for file in uploaded_files : upload_manager = StreamlitUploadManager ( file , accept_multiple_files = False , document_analysis_client = document_analysis_client ) file_data , _ = upload_manager . process_upload () if file_data : filenames . append ( file . name ) texts . append ( file_data ) return filenames , texts","title":"process_multiple_files"},{"location":"LabeLMaker/streamlit_interface.html#LabeLMaker.streamlit_interface.CategorizeHandler.process_results","text":"The function process_results displays categorization results with optional formatting options. Parameters: results \u2013 The results parameter in the process_results method is used to pass the results that need to be processed or displayed. It could be any data structure or information that the method needs to work with, such as a list, dictionary, string, etc. Source code in LabeLMaker/streamlit_interface.py 890 891 892 893 894 895 896 897 898 899 900 def process_results ( self , results ): \"\"\" The function `process_results` displays categorization results with optional formatting options. Args: results: The `results` parameter in the `process_results` method is used to pass the results that need to be processed or displayed. It could be any data structure or information that the method needs to work with, such as a list, dictionary, string, etc. \"\"\" self . ui . write ( \"Categorization Results:\" ) self . ui . write ( results )","title":"process_results"},{"location":"LabeLMaker/streamlit_interface.html#LabeLMaker.streamlit_interface.CategorizeHandler.setup_workflow","text":"The setup_workflow function in Python sets up parameters for a workflow, including selecting columns, creating unique identifiers, and choosing evaluation approaches. Parameters: df \u2013 The setup_workflow function is designed to set up parameters for a workflow based on user interactions with a UI. The function takes a DataFrame df as input and performs the following tasks: Returns: \u2013 The setup_workflow function returns a dictionary params containing various parameters set based on user inputs and selections made during the workflow setup process. The function collects information such as the mode (Evaluation or Production), unique identifier column, categorizing column, ground truth column, evaluation techniques selected, and related parameters for Few Shot and Many Shot evaluation approaches. Additionally, it includes information about default categories and descriptions Source code in LabeLMaker/streamlit_interface.py 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 def setup_workflow ( self , df ): \"\"\" The `setup_workflow` function in Python sets up parameters for a workflow, including selecting columns, creating unique identifiers, and choosing evaluation approaches. Args: df: The `setup_workflow` function is designed to set up parameters for a workflow based on user interactions with a UI. The function takes a DataFrame `df` as input and performs the following tasks: Returns: The `setup_workflow` function returns a dictionary `params` containing various parameters set based on user inputs and selections made during the workflow setup process. The function collects information such as the mode (Evaluation or Production), unique identifier column, categorizing column, ground truth column, evaluation techniques selected, and related parameters for Few Shot and Many Shot evaluation approaches. Additionally, it includes information about default categories and descriptions \"\"\" params = {} advanced_mode = self . ui . checkbox ( \"Advanced Mode\" , help = \"For users with ground truth labels. Check to run evaluation pipeline.\" , key = \"advanced_mode\" , ) if advanced_mode : self . ui . info ( \"Advanced Mode is activated: Users can select classification mode (e.g., zero shot, few shot, or many shot)\" ) else : self . ui . info ( \"Advanced Mode is not activated: Classification will be determined by number of examples provided\" ) params [ \"mode\" ] = \"Evaluation\" if advanced_mode else \"Production\" if not self . ui . session_state . get ( \"uniqueIdSetup_done\" ): self . ui . markdown ( \"### Unique Identifier Setup\" ) id_choice = self . ui . radio ( \"How would you like to specify a unique identifier?\" , options = [ \"Create new ID column\" , \"Use an existing column\" ], index = 0 , key = \"id_choice\" , ) if id_choice == \"Create new ID column\" : new_id_col = self . ui . text_input ( \"Enter name for the new ID column\" , value = \"id\" , key = \"new_id_column\" ) if self . ui . button ( \"Create ID Column\" , key = \"create_id_column\" ): if new_id_col not in df . columns : df [ new_id_col ] = df . index . astype ( str ) self . ui . success ( f \"New ID column ' { new_id_col } ' created.\" ) else : self . ui . info ( f \"Column ' { new_id_col } ' already exists; using it.\" ) self . ui . session_state [ \"single_file_df\" ] = df self . ui . session_state [ \"selected_id_column\" ] = new_id_col self . ui . session_state [ \"uniqueIdSetup_done\" ] = True else : selected_existing = self . ui . selectbox ( \"Select the column to use as the unique identifier\" , options = df . columns . tolist (), key = \"existing_id_column\" , ) if self . ui . button ( \"Confirm ID Column\" , key = \"confirm_id_column\" ): self . ui . session_state [ \"selected_id_column\" ] = selected_existing self . ui . session_state [ \"uniqueIdSetup_done\" ] = True sel_id = self . ui . session_state . get ( \"selected_id_column\" ) if sel_id and sel_id not in df . columns : df [ sel_id ] = df . index . astype ( str ) self . ui . session_state [ \"single_file_df\" ] = df params [ \"index_column\" ] = self . ui . session_state . get ( \"selected_id_column\" ) self . ui . write ( f \"Using ' { params [ 'index_column' ] } ' as the unique identifier column.\" ) df_columns = df . columns . tolist () params [ \"categorizing_column\" ] = self . ui . selectbox ( \"Select the column with text data you want to label\" , options = df_columns , key = \"categorizing_column\" , ) if \"ground_truth_column\" not in self . ui . session_state : self . ui . session_state [ \"ground_truth_column\" ] = df_columns [ 0 ] gt_col = self . ui . selectbox ( \"Select the column with ground truth labels\" , options = df_columns , key = \"ground_truth_column\" , index = df_columns . index ( self . ui . session_state [ \"ground_truth_column\" ]), ) params [ \"ground_truth_column\" ] = gt_col if params [ \"mode\" ] == \"Evaluation\" : eval_techniques = self . ui . multiselect ( \"Select the evaluation approaches to run:\" , options = [ \"Zero Shot\" , \"Few Shot\" , \"Many Shot\" ], default = [ \"Zero Shot\" ], key = \"evaluation_techniques\" , ) params [ \"evaluation_techniques\" ] = eval_techniques if \"Few Shot\" in eval_techniques : few_shot_count = self . ui . number_input ( \"Enter maximum examples per category (Few Shot)\" , min_value = 1 , value = 2 , key = \"few_shot_count\" , ) params [ \"few_shot_count\" ] = few_shot_count if \"Many Shot\" in eval_techniques : many_shot_train_ratio = self . ui . number_input ( \"Enter train proportion for Many Shot (0 to 1)\" , min_value = 0.0 , max_value = 1.0 , value = 0.8 , key = \"many_shot_train_ratio\" , ) params [ \"many_shot_train_ratio\" ] = many_shot_train_ratio default_categories = self . _get_default_categories ( df , gt_col ) categories_dict , categories_with_descriptions = CategoryManager . define_categories ( self . ui , \"tab1\" , unique_values_str = default_categories ) params [ \"categories_dict\" ] = categories_dict params [ \"categories_with_descriptions\" ] = categories_with_descriptions return params","title":"setup_workflow"},{"location":"LabeLMaker/streamlit_interface.html#LabeLMaker.streamlit_interface.EvaluateHandler","text":"Bases: BaseHandler Handles evaluation workflows. Includes CSV file upload & preview, evaluation setup, single/multi\u2010column evaluation including method comparisons, and DOCX report creation. Source code in LabeLMaker/streamlit_interface.pyclass EvaluateHandler ( BaseHandler ): \"\"\" Handles evaluation workflows. Includes CSV file upload & preview, evaluation setup, single/multi\u2010column evaluation including method comparisons, and DOCX report creation. \"\"\" def __init__ ( self , ui_helper ): \"\"\" The above function is a constructor that initializes an object with a UI helper. Args: ui_helper: The `ui_helper` parameter in the `__init__` method is typically used to pass in an object that provides utility functions or methods related to the user interface. This can include functions for displaying information, handling user input, managing UI components, and more. By passing in a `ui_helper \"\"\" super () . __init__ ( ui_helper ) # -------------------------- # File Upload & Data Loader Methods def load_data ( self , file ): \"\"\" The function `load_data` creates a `DataLoader` object with the specified file and returns it. Args: file: The `file` parameter in the `load_data` method is the file path or name that you want to load data from. This parameter is used to specify the location of the file that the `DataLoader` will load data from. Returns: An instance of the DataLoader class with the specified file. \"\"\" loader = DataLoader ( file = file ) return loader def preview_data ( self , loader ): \"\"\" The function `preview_data` displays a preview of the CSV data loaded by the `loader` object, including the first few rows and the total number of rows in the dataframe. Args: loader: The `loader` parameter in the `preview_data` method is likely an object that contains a DataFrame (`df`) attribute. This DataFrame is used to display a preview of the data in the CSV file being loaded. The method displays the first few rows of the DataFrame and the total number of rows in \"\"\" self . ui . subheader ( \"CSV Preview:\" ) self . ui . write ( loader . df . head ()) self . ui . write ( f \"Total rows in dataframe: { len ( loader . df ) } \" ) # -------------------------- # Evaluation Setup Helpers def select_evaluation_column ( self , loader ): \"\"\" The function `select_evaluation_column` prompts the user to select a column from a DataFrame for use as the ground truth column. Args: loader: The `loader` parameter in the `select_evaluation_column` method seems to be an object that has a property `df` which is a DataFrame. The method allows the user to select a column from the DataFrame `loader.df` as the ground truth column. The user interface (UI) component used Returns: the column selected as the ground truth column from the DataFrame loaded by the loader. \"\"\" ground_truth_col = self . ui . selectbox ( \"Select Ground Truth Column\" , loader . df . columns , key = \"eval_gt_column\" ) return ground_truth_col def check_class_balance ( self , loader , class_col , label ): \"\"\" The function `check_class_balance` computes the class balance for a specified column in a DataFrame and displays the results using a UI subheader and table. Args: loader: The `loader` parameter is likely an object that helps load or manage data, such as a data loader object used in machine learning frameworks like PyTorch or TensorFlow. It is being used to access the data frame (`loader.df`) containing the dataset. class_col: The `class_col` parameter in the `check_class_balance` function is used to specify the column in the dataset that contains the class labels or categories for which you want to check the balance. This column will be used by the `ClassBalance` to compute the balance of the classes in the dataset label: The `label` parameter is a string that represents the label or title of the class balance being computed. It is used to provide context or information about the specific class balance being displayed in the user interface. \"\"\" balancer = ClassBalance ( loader . df , class_col ) balance_df = balancer . compute_balance () self . ui . subheader ( f \"Class Balance for { label } ( { class_col } )\" ) self . ui . write ( balance_df ) # -------------------------- # Evaluation & Visualization Helper (for single\u2013column evaluation) def evaluate_model ( self , df , pred_col , ground_truth_col , n_bootstraps = 1000 , alpha = 0.05 ): \"\"\" The `evaluate_model` function evaluates predictions by comparing them with ground truth, calculates metrics, generates a classification report, computes bootstrap confidence intervals, and plots a confusion matrix. Args: df: The `df` parameter in the `evaluate_model` function is a pandas DataFrame that contains the data for evaluation. It should include columns for predictions (`pred_col`) and ground truth (`ground_truth_col`) that will be used for evaluating the model's performance. pred_col: The `pred_col` parameter in the `evaluate_model` function refers to the column in the DataFrame `df` that contains the predicted values for the model. It is used to evaluate the predictions by comparing them with the ground truth values. ground_truth_col: The `ground_truth_col` parameter in the `evaluate_model` function refers to the column in the DataFrame `df` that contains the ground truth values for the predictions. This column is used to compare the predicted values with the actual ground truth values during the evaluation process. n_bootstraps: The `n_bootstraps` parameter in the `evaluate_model` function specifies the number of bootstrap samples to generate when computing bootstrap confidence intervals. It determines how many resamples of the data will be created to estimate the sampling distribution of a statistic. In this case, it is set to a default. Defaults to 1000 alpha: The `alpha` parameter in the `evaluate_model` function represents the significance level used for computing Bootstrap Confidence Intervals. It is typically set to a value between 0 and 1, such as 0.05, to determine the confidence level of the intervals. In this case, an ` Returns: metrics_df, report_df, bs_df, cm_fig \"\"\" \"\"\" Evaluate predictions by comparing with ground truth. Drops rows with NaN predictions. Returns: metrics_df, report_df, bs_df, cm_fig \"\"\" if pred_col in df . columns and ground_truth_col in df . columns : valid = df [ pred_col ] . notna () y_true = df . loc [ valid , ground_truth_col ] . astype ( str ) . tolist () y_pred = df . loc [ valid , pred_col ] . astype ( str ) . tolist () evaluator = Evaluator ( y_true , y_pred ) evaluator . calculate_metrics () metrics_df = evaluator . display_metrics () report_df = pd . DataFrame ( evaluator . metrics [ \"Classification Report\" ]) . transpose () # Compute Bootstrap Confidence Intervals. bs_results = compute_bootstrap_confidence_intervals ( y_true , y_pred , n_bootstraps = n_bootstraps , alpha = alpha ) bs_display = [] for metric , values in bs_results . items (): if values [ \"Value\" ] is not None : bs_display . append ( { \"Metric\" : metric , \"Value\" : f \" { values [ 'Value' ] : .4f } \" , \"Bootstrap Mean\" : f \" { values [ 'Bootstrap Mean' ] : .4f } \" , \"95% CI\" : f \"( { values [ '95% CI' ][ 0 ] : .4f } , { values [ '95% CI' ][ 1 ] : .4f } )\" , } ) else : bs_display . append ( { \"Metric\" : metric , \"Value\" : \"Undefined\" , \"Bootstrap Mean\" : \"Undefined\" , \"95% CI\" : \"Undefined\" , } ) bs_df = pd . DataFrame ( bs_display ) cm_fig = evaluator . plot_confusion_matrix () return metrics_df , report_df , bs_df , cm_fig else : self . ui . error ( \"Selected evaluation columns not found in the dataframe.\" ) return None , None , None , None def compare_methods ( self , df , ground_truth_col , selected_methods ): \"\"\" The `compare_methods` function compares selected prediction methods on a common data subset and returns evaluation results and confusion matrices for each method. Args: df: The `df` parameter in the `compare_methods` function is a pandas DataFrame containing the data for evaluation. It is used to compare selected prediction methods on a common data subset. ground_truth_col: The `ground_truth_col` parameter in the `compare_methods` function refers to the column in the DataFrame `df` that contains the ground truth values for the evaluation. This column should represent the true values that the selected prediction methods are compared against. It is typically the actual values that the models are selected_methods: The `selected_methods` parameter in the `compare_methods` function is a list of prediction methods that you want to compare. These methods should correspond to the columns in the DataFrame `df` that contain the predicted categories for each method. The function will evaluate these selected methods on a common subset of the Returns: The function `compare_methods` returns three values: 1. `common_df`: Subset of the input dataframe `df` used for evaluation. 2. `results`: A dictionary with each selected method's evaluation metrics. 3. `confusion_matrices`: A dictionary with each selected method's confusion matrix figure. \"\"\" method_columns = { method : f \"Predicted Category ( { method } )\" for method in selected_methods } valid_methods = { m : col for m , col in method_columns . items () if col in df . columns } if not valid_methods : self . ui . info ( \"No selected method prediction columns exist in the data.\" ) return None , {}, {} common_df = df . dropna ( subset = list ( valid_methods . values ())) self . ui . write ( f \"Common evaluation subset size: { len ( common_df ) } \" ) results = {} confusion_matrices = {} for method , col in valid_methods . items (): y_true = common_df [ ground_truth_col ] . astype ( str ) . tolist () y_pred = common_df [ col ] . astype ( str ) . tolist () evaluator = Evaluator ( y_true , y_pred ) evaluator . calculate_metrics () results [ method ] = evaluator . metrics confusion_matrices [ method ] = evaluator . plot_confusion_matrix () return common_df , results , confusion_matrices # -------------------------- # Main Evaluation Workflow def handle_evaluation ( self , file = None ): \"\"\" The `handle_evaluation` function manages the evaluation workflow by uploading a CSV file, loading and previewing data, selecting evaluation methods, running evaluation, displaying results, and generating a downloadable DOCX report. Args: file: The `file` parameter in the `handle_evaluation` method is used to specify the CSV file that will be used for evaluation. If a file is not provided, the method will prompt the user to upload a CSV file. The method then proceeds to load and preview the data, select the ground truth Returns: The `handle_evaluation` method returns `None` if the `file` is not provided, indicating that the evaluation workflow cannot proceed without a CSV file. Handles the evaluation workflow by: - Uploading the CSV file (if not provided), - Loading and previewing the data, - Selecting the ground truth column and checking class balance, - Letting the user select one or more evaluation methods, - Running evaluation on demand, - Displaying the results, and - Generating a downloadable DOCX report. \"\"\" # File upload (if not already provided) file = self . _ensure_file ( file , upload_message = \"Choose CSV file\" , file_types = \"csv\" , key = \"eval_file_uploader\" , info_message = \"Please upload a CSV file to proceed.\" , ) if file is None : return loader = self . load_data ( file ) self . preview_data ( loader ) ground_truth_col = self . select_evaluation_column ( loader ) self . check_class_balance ( loader , ground_truth_col , \"Ground Truth\" ) self . ui . header ( \"Evaluation\" ) selected_methods = self . ui . multiselect ( \"Select evaluation methods\" , [ \"Zero Shot\" , \"Few Shot\" , \"Many Shot\" ], default = [ \"Zero Shot\" , \"Few Shot\" , \"Many Shot\" ], key = \"eval_methods\" , ) if self . ui . button ( \"Evaluate\" ): with self . ui . spinner ( \"Evaluating...\" ): if not selected_methods : self . ui . error ( \"Please select at least one method for evaluation.\" ) return common_df , comparison_results , confusion_matrices = self . compare_methods ( loader . df , ground_truth_col , selected_methods ) if comparison_results : for method , metrics in comparison_results . items (): self . ui . subheader ( method ) self . ui . write ( metrics ) docx_maker = StreamlitDocxCreator ( comparison_results , confusion_matrices ) doc = docx_maker . create_docx_report () docx_content = self . generate_docx_report_download ( doc ) self . ui . download_button ( label = \"Download DOCX Report\" , data = docx_content , file_name = \"evaluation_report.docx\" , mime = \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\" , ) else : self . ui . error ( \"No evaluation metrics available for the selected methods.\" ) else : self . ui . info ( \"Click the Evaluate button to start evaluation.\" )","title":"EvaluateHandler"},{"location":"LabeLMaker/streamlit_interface.html#LabeLMaker.streamlit_interface.EvaluateHandler.__init__","text":"The above function is a constructor that initializes an object with a UI helper. Parameters: ui_helper \u2013 The ui_helper parameter in the __init__ method is typically used to pass in an object that provides utility functions or methods related to the user interface. This can include functions for displaying information, handling user input, managing UI components, and more. By passing in a `ui_helper Source code in LabeLMaker/streamlit_interface.py 127 128 129 130 131 132 133 134 135 136 137 def __init__ ( self , ui_helper ): \"\"\" The above function is a constructor that initializes an object with a UI helper. Args: ui_helper: The `ui_helper` parameter in the `__init__` method is typically used to pass in an object that provides utility functions or methods related to the user interface. This can include functions for displaying information, handling user input, managing UI components, and more. By passing in a `ui_helper \"\"\" super () . __init__ ( ui_helper )","title":"__init__"},{"location":"LabeLMaker/streamlit_interface.html#LabeLMaker.streamlit_interface.EvaluateHandler.check_class_balance","text":"The function check_class_balance computes the class balance for a specified column in a DataFrame and displays the results using a UI subheader and table. Parameters: loader \u2013 The loader parameter is likely an object that helps load or manage data, such as a data loader object used in machine learning frameworks like PyTorch or TensorFlow. It is being used to access the data frame ( loader.df ) containing the dataset. class_col: The class_col parameter in the check_class_balance function is used to specify the column in the dataset that contains the class labels or categories for which you want to check the balance. This column will be used by the ClassBalance to compute the balance of the classes in the dataset label: The label parameter is a string that represents the label or title of the class balance being computed. It is used to provide context or information about the specific class balance being displayed in the user interface. Source code in LabeLMaker/streamlit_interface.py 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 def check_class_balance ( self , loader , class_col , label ): \"\"\" The function `check_class_balance` computes the class balance for a specified column in a DataFrame and displays the results using a UI subheader and table. Args: loader: The `loader` parameter is likely an object that helps load or manage data, such as a data loader object used in machine learning frameworks like PyTorch or TensorFlow. It is being used to access the data frame (`loader.df`) containing the dataset. class_col: The `class_col` parameter in the `check_class_balance` function is used to specify the column in the dataset that contains the class labels or categories for which you want to check the balance. This column will be used by the `ClassBalance` to compute the balance of the classes in the dataset label: The `label` parameter is a string that represents the label or title of the class balance being computed. It is used to provide context or information about the specific class balance being displayed in the user interface. \"\"\" balancer = ClassBalance ( loader . df , class_col ) balance_df = balancer . compute_balance () self . ui . subheader ( f \"Class Balance for { label } ( { class_col } )\" ) self . ui . write ( balance_df )","title":"check_class_balance"},{"location":"LabeLMaker/streamlit_interface.html#LabeLMaker.streamlit_interface.EvaluateHandler.compare_methods","text":"The compare_methods function compares selected prediction methods on a common data subset and returns evaluation results and confusion matrices for each method. Parameters: df \u2013 The df parameter in the compare_methods function is a pandas DataFrame containing the data for evaluation. It is used to compare selected prediction methods on a common data subset. ground_truth_col: The ground_truth_col parameter in the compare_methods function refers to the column in the DataFrame df that contains the ground truth values for the evaluation. This column should represent the true values that the selected prediction methods are compared against. It is typically the actual values that the models are selected_methods: The selected_methods parameter in the compare_methods function is a list of prediction methods that you want to compare. These methods should correspond to the columns in the DataFrame df that contain the predicted categories for each method. The function will evaluate these selected methods on a common subset of the Returns: \u2013 The function compare_methods returns three values: common_df : Subset of the input dataframe df used for evaluation. results : A dictionary with each selected method's evaluation metrics. confusion_matrices : A dictionary with each selected method's confusion matrix figure. Source code in LabeLMaker/streamlit_interface.py 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 def compare_methods ( self , df , ground_truth_col , selected_methods ): \"\"\" The `compare_methods` function compares selected prediction methods on a common data subset and returns evaluation results and confusion matrices for each method. Args: df: The `df` parameter in the `compare_methods` function is a pandas DataFrame containing the data for evaluation. It is used to compare selected prediction methods on a common data subset. ground_truth_col: The `ground_truth_col` parameter in the `compare_methods` function refers to the column in the DataFrame `df` that contains the ground truth values for the evaluation. This column should represent the true values that the selected prediction methods are compared against. It is typically the actual values that the models are selected_methods: The `selected_methods` parameter in the `compare_methods` function is a list of prediction methods that you want to compare. These methods should correspond to the columns in the DataFrame `df` that contain the predicted categories for each method. The function will evaluate these selected methods on a common subset of the Returns: The function `compare_methods` returns three values: 1. `common_df`: Subset of the input dataframe `df` used for evaluation. 2. `results`: A dictionary with each selected method's evaluation metrics. 3. `confusion_matrices`: A dictionary with each selected method's confusion matrix figure. \"\"\" method_columns = { method : f \"Predicted Category ( { method } )\" for method in selected_methods } valid_methods = { m : col for m , col in method_columns . items () if col in df . columns } if not valid_methods : self . ui . info ( \"No selected method prediction columns exist in the data.\" ) return None , {}, {} common_df = df . dropna ( subset = list ( valid_methods . values ())) self . ui . write ( f \"Common evaluation subset size: { len ( common_df ) } \" ) results = {} confusion_matrices = {} for method , col in valid_methods . items (): y_true = common_df [ ground_truth_col ] . astype ( str ) . tolist () y_pred = common_df [ col ] . astype ( str ) . tolist () evaluator = Evaluator ( y_true , y_pred ) evaluator . calculate_metrics () results [ method ] = evaluator . metrics confusion_matrices [ method ] = evaluator . plot_confusion_matrix () return common_df , results , confusion_matrices","title":"compare_methods"},{"location":"LabeLMaker/streamlit_interface.html#LabeLMaker.streamlit_interface.EvaluateHandler.evaluate_model","text":"The evaluate_model function evaluates predictions by comparing them with ground truth, calculates metrics, generates a classification report, computes bootstrap confidence intervals, and plots a confusion matrix. Parameters: df \u2013 The df parameter in the evaluate_model function is a pandas DataFrame that contains the data for evaluation. It should include columns for predictions ( pred_col ) and ground truth ( ground_truth_col ) that will be used for evaluating the model's performance. pred_col: The pred_col parameter in the evaluate_model function refers to the column in the DataFrame df that contains the predicted values for the model. It is used to evaluate the predictions by comparing them with the ground truth values. ground_truth_col: The ground_truth_col parameter in the evaluate_model function refers to the column in the DataFrame df that contains the ground truth values for the predictions. This column is used to compare the predicted values with the actual ground truth values during the evaluation process. n_bootstraps: The n_bootstraps parameter in the evaluate_model function specifies the number of bootstrap samples to generate when computing bootstrap confidence intervals. It determines how many resamples of the data will be created to estimate the sampling distribution of a statistic. In this case, it is set to a default. Defaults to 1000 alpha: The alpha parameter in the evaluate_model function represents the significance level used for computing Bootstrap Confidence Intervals. It is typically set to a value between 0 and 1, such as 0.05, to determine the confidence level of the intervals. In this case, an ` Returns: \u2013 metrics_df, report_df, bs_df, cm_fig Source code in LabeLMaker/streamlit_interface.py 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 def evaluate_model ( self , df , pred_col , ground_truth_col , n_bootstraps = 1000 , alpha = 0.05 ): \"\"\" The `evaluate_model` function evaluates predictions by comparing them with ground truth, calculates metrics, generates a classification report, computes bootstrap confidence intervals, and plots a confusion matrix. Args: df: The `df` parameter in the `evaluate_model` function is a pandas DataFrame that contains the data for evaluation. It should include columns for predictions (`pred_col`) and ground truth (`ground_truth_col`) that will be used for evaluating the model's performance. pred_col: The `pred_col` parameter in the `evaluate_model` function refers to the column in the DataFrame `df` that contains the predicted values for the model. It is used to evaluate the predictions by comparing them with the ground truth values. ground_truth_col: The `ground_truth_col` parameter in the `evaluate_model` function refers to the column in the DataFrame `df` that contains the ground truth values for the predictions. This column is used to compare the predicted values with the actual ground truth values during the evaluation process. n_bootstraps: The `n_bootstraps` parameter in the `evaluate_model` function specifies the number of bootstrap samples to generate when computing bootstrap confidence intervals. It determines how many resamples of the data will be created to estimate the sampling distribution of a statistic. In this case, it is set to a default. Defaults to 1000 alpha: The `alpha` parameter in the `evaluate_model` function represents the significance level used for computing Bootstrap Confidence Intervals. It is typically set to a value between 0 and 1, such as 0.05, to determine the confidence level of the intervals. In this case, an ` Returns: metrics_df, report_df, bs_df, cm_fig \"\"\" \"\"\" Evaluate predictions by comparing with ground truth. Drops rows with NaN predictions. Returns: metrics_df, report_df, bs_df, cm_fig \"\"\" if pred_col in df . columns and ground_truth_col in df . columns : valid = df [ pred_col ] . notna () y_true = df . loc [ valid , ground_truth_col ] . astype ( str ) . tolist () y_pred = df . loc [ valid , pred_col ] . astype ( str ) . tolist () evaluator = Evaluator ( y_true , y_pred ) evaluator . calculate_metrics () metrics_df = evaluator . display_metrics () report_df = pd . DataFrame ( evaluator . metrics [ \"Classification Report\" ]) . transpose () # Compute Bootstrap Confidence Intervals. bs_results = compute_bootstrap_confidence_intervals ( y_true , y_pred , n_bootstraps = n_bootstraps , alpha = alpha ) bs_display = [] for metric , values in bs_results . items (): if values [ \"Value\" ] is not None : bs_display . append ( { \"Metric\" : metric , \"Value\" : f \" { values [ 'Value' ] : .4f } \" , \"Bootstrap Mean\" : f \" { values [ 'Bootstrap Mean' ] : .4f } \" , \"95% CI\" : f \"( { values [ '95% CI' ][ 0 ] : .4f } , { values [ '95% CI' ][ 1 ] : .4f } )\" , } ) else : bs_display . append ( { \"Metric\" : metric , \"Value\" : \"Undefined\" , \"Bootstrap Mean\" : \"Undefined\" , \"95% CI\" : \"Undefined\" , } ) bs_df = pd . DataFrame ( bs_display ) cm_fig = evaluator . plot_confusion_matrix () return metrics_df , report_df , bs_df , cm_fig else : self . ui . error ( \"Selected evaluation columns not found in the dataframe.\" ) return None , None , None , None","title":"evaluate_model"},{"location":"LabeLMaker/streamlit_interface.html#LabeLMaker.streamlit_interface.EvaluateHandler.handle_evaluation","text":"The handle_evaluation function manages the evaluation workflow by uploading a CSV file, loading and previewing data, selecting evaluation methods, running evaluation, displaying results, and generating a downloadable DOCX report. Parameters: file \u2013 The file parameter in the handle_evaluation method is used to specify the CSV file that will be used for evaluation. If a file is not provided, the method will prompt the user to upload a CSV file. The method then proceeds to load and preview the data, select the ground truth Returns: \u2013 The handle_evaluation method returns None if the file is not provided, indicating that the evaluation workflow cannot proceed without a CSV file. Handles the evaluation workflow by Uploading the CSV file (if not provided), Loading and previewing the data, Selecting the ground truth column and checking class balance, Letting the user select one or more evaluation methods, Running evaluation on demand, Displaying the results, and Generating a downloadable DOCX report. Source code in LabeLMaker/streamlit_interface.py 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 def handle_evaluation ( self , file = None ): \"\"\" The `handle_evaluation` function manages the evaluation workflow by uploading a CSV file, loading and previewing data, selecting evaluation methods, running evaluation, displaying results, and generating a downloadable DOCX report. Args: file: The `file` parameter in the `handle_evaluation` method is used to specify the CSV file that will be used for evaluation. If a file is not provided, the method will prompt the user to upload a CSV file. The method then proceeds to load and preview the data, select the ground truth Returns: The `handle_evaluation` method returns `None` if the `file` is not provided, indicating that the evaluation workflow cannot proceed without a CSV file. Handles the evaluation workflow by: - Uploading the CSV file (if not provided), - Loading and previewing the data, - Selecting the ground truth column and checking class balance, - Letting the user select one or more evaluation methods, - Running evaluation on demand, - Displaying the results, and - Generating a downloadable DOCX report. \"\"\" # File upload (if not already provided) file = self . _ensure_file ( file , upload_message = \"Choose CSV file\" , file_types = \"csv\" , key = \"eval_file_uploader\" , info_message = \"Please upload a CSV file to proceed.\" , ) if file is None : return loader = self . load_data ( file ) self . preview_data ( loader ) ground_truth_col = self . select_evaluation_column ( loader ) self . check_class_balance ( loader , ground_truth_col , \"Ground Truth\" ) self . ui . header ( \"Evaluation\" ) selected_methods = self . ui . multiselect ( \"Select evaluation methods\" , [ \"Zero Shot\" , \"Few Shot\" , \"Many Shot\" ], default = [ \"Zero Shot\" , \"Few Shot\" , \"Many Shot\" ], key = \"eval_methods\" , ) if self . ui . button ( \"Evaluate\" ): with self . ui . spinner ( \"Evaluating...\" ): if not selected_methods : self . ui . error ( \"Please select at least one method for evaluation.\" ) return common_df , comparison_results , confusion_matrices = self . compare_methods ( loader . df , ground_truth_col , selected_methods ) if comparison_results : for method , metrics in comparison_results . items (): self . ui . subheader ( method ) self . ui . write ( metrics ) docx_maker = StreamlitDocxCreator ( comparison_results , confusion_matrices ) doc = docx_maker . create_docx_report () docx_content = self . generate_docx_report_download ( doc ) self . ui . download_button ( label = \"Download DOCX Report\" , data = docx_content , file_name = \"evaluation_report.docx\" , mime = \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\" , ) else : self . ui . error ( \"No evaluation metrics available for the selected methods.\" ) else : self . ui . info ( \"Click the Evaluate button to start evaluation.\" )","title":"handle_evaluation"},{"location":"LabeLMaker/streamlit_interface.html#LabeLMaker.streamlit_interface.EvaluateHandler.load_data","text":"The function load_data creates a DataLoader object with the specified file and returns it. Parameters: file \u2013 The file parameter in the load_data method is the file path or name that you want to load data from. This parameter is used to specify the location of the file that the DataLoader will load data from. Returns: \u2013 An instance of the DataLoader class with the specified file. Source code in LabeLMaker/streamlit_interface.py 141 142 143 144 145 146 147 148 149 150 151 152 153 154 def load_data ( self , file ): \"\"\" The function `load_data` creates a `DataLoader` object with the specified file and returns it. Args: file: The `file` parameter in the `load_data` method is the file path or name that you want to load data from. This parameter is used to specify the location of the file that the `DataLoader` will load data from. Returns: An instance of the DataLoader class with the specified file. \"\"\" loader = DataLoader ( file = file ) return loader","title":"load_data"},{"location":"LabeLMaker/streamlit_interface.html#LabeLMaker.streamlit_interface.EvaluateHandler.preview_data","text":"The function preview_data displays a preview of the CSV data loaded by the loader object, including the first few rows and the total number of rows in the dataframe. Parameters: loader \u2013 The loader parameter in the preview_data method is likely an object that contains a DataFrame ( df ) attribute. This DataFrame is used to display a preview of the data in the CSV file being loaded. The method displays the first few rows of the DataFrame and the total number of rows in Source code in LabeLMaker/streamlit_interface.py 156 157 158 159 160 161 162 163 164 165 166 167 168 169 def preview_data ( self , loader ): \"\"\" The function `preview_data` displays a preview of the CSV data loaded by the `loader` object, including the first few rows and the total number of rows in the dataframe. Args: loader: The `loader` parameter in the `preview_data` method is likely an object that contains a DataFrame (`df`) attribute. This DataFrame is used to display a preview of the data in the CSV file being loaded. The method displays the first few rows of the DataFrame and the total number of rows in \"\"\" self . ui . subheader ( \"CSV Preview:\" ) self . ui . write ( loader . df . head ()) self . ui . write ( f \"Total rows in dataframe: { len ( loader . df ) } \" )","title":"preview_data"},{"location":"LabeLMaker/streamlit_interface.html#LabeLMaker.streamlit_interface.EvaluateHandler.select_evaluation_column","text":"The function select_evaluation_column prompts the user to select a column from a DataFrame for use as the ground truth column. Parameters: loader \u2013 The loader parameter in the select_evaluation_column method seems to be an object that has a property df which is a DataFrame. The method allows the user to select a column from the DataFrame loader.df as the ground truth column. The user interface (UI) component used Returns: \u2013 the column selected as the ground truth column from the DataFrame loaded by the loader. Source code in LabeLMaker/streamlit_interface.py 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 def select_evaluation_column ( self , loader ): \"\"\" The function `select_evaluation_column` prompts the user to select a column from a DataFrame for use as the ground truth column. Args: loader: The `loader` parameter in the `select_evaluation_column` method seems to be an object that has a property `df` which is a DataFrame. The method allows the user to select a column from the DataFrame `loader.df` as the ground truth column. The user interface (UI) component used Returns: the column selected as the ground truth column from the DataFrame loaded by the loader. \"\"\" ground_truth_col = self . ui . selectbox ( \"Select Ground Truth Column\" , loader . df . columns , key = \"eval_gt_column\" ) return ground_truth_col","title":"select_evaluation_column"},{"location":"LabeLMaker/workflow.html","text":"The BaseCategorizeHandler class contains methods for categorizing data using different techniques such as Zero Shot, Few Shot, and Many Shot, with the ability to handle both evaluation and production modes. BaseCategorizeHandler The BaseCategorizeHandler class in Python contains methods for preparing ground truth examples and categorizing data based on different modes and evaluation techniques. Source code in LabeLMaker/workflow.pyclass BaseCategorizeHandler : \"\"\" The `BaseCategorizeHandler` class in Python contains methods for preparing ground truth examples and categorizing data based on different modes and evaluation techniques. \"\"\" def __init__ ( self , azure_key = None ): self . config = Config self . azure_key = azure_key def _prepare_ground_truth_examples ( self , df : pd . DataFrame , id_col : str , text_col : str , gt_col : str , few_shot_count : int = Config . MIN_SAMPLES_FEW_SHOT , many_shot_train_ratio : float = Config . MANY_SHOT_TRAIN_RATIO , ) -> Tuple [ List [ Example ], Set [ str ], List [ Example ], Set [ str ]]: \"\"\" Same utility method used in both Streamlit and FastAPI versions. \"\"\" few_shot_examples = [] few_shot_ids = set () many_shot_examples = [] many_shot_test_ids = set () df_gt = df [[ id_col , text_col , gt_col ]] . copy () df_gt [ gt_col ] = df_gt [ gt_col ] . astype ( str ) . str . lower () grouped = df_gt . groupby ( gt_col ) for _ , group in grouped : records = group . to_dict ( orient = \"records\" ) count = min ( few_shot_count , len ( records )) if count > 0 : sampled = random . sample ( records , count ) for rec in sampled : few_shot_examples . append ( Example ( text_with_label = str ( rec [ text_col ]), label = str ( rec [ gt_col ])) ) few_shot_ids . add ( str ( rec [ id_col ])) if len ( records ) > 1 : shuffled = records . copy () random . shuffle ( shuffled ) train_size = max ( 1 , int ( many_shot_train_ratio * len ( records ))) train_examples = shuffled [: train_size ] test_examples = shuffled [ train_size :] for rec in train_examples : many_shot_examples . append ( Example ( text_with_label = str ( rec [ text_col ]), label = str ( rec [ gt_col ])) ) for rec in test_examples : many_shot_test_ids . add ( str ( rec [ id_col ])) return few_shot_examples , few_shot_ids , many_shot_examples , many_shot_test_ids def categorize_data ( self , df : pd . DataFrame , mode : str , index_column : str , text_column : str , ground_truth_column : str , categories_dict : Dict [ str , Any ], zs_prompty : Path , fs_prompty : Path , evaluation_techniques : List [ str ] = None , few_shot_count : int = Config . FEW_SHOT_COUNT , many_shot_train_ratio : float = Config . MANY_SHOT_TRAIN_RATIO , ) -> pd . DataFrame : \"\"\" The main categorization logic, shared by both Streamlit and FastAPI. mode should be either 'Evaluation'/'evaluation' or 'Production'/'production'. \"\"\" if not index_column : df [ \"index\" ] = df . index . astype ( str ) index_column = \"index\" text_to_label = df [ text_column ] . astype ( str ) . tolist () unique_ids = df [ index_column ] . astype ( str ) . tolist () # If the user is in evaluation mode if mode . lower () == \"evaluation\" : # Prepare request categorization_request = CategoryManager . create_request ( unique_ids , text_to_label , categories_dict ) predictions = {} # Prepare ground-truth examples ( few_shot_examples , few_shot_ids , many_shot_examples , many_shot_test_ids , ) = self . _prepare_ground_truth_examples ( df , index_column , text_column , ground_truth_column , few_shot_count , many_shot_train_ratio , ) for tech in evaluation_techniques or [ \"Zero Shot\" ]: if tech == \"Zero Shot\" : zs_categorizer = ZeroShotCategorizer ( prompty_path = zs_prompty , category_request = categorization_request ) results = zs_categorizer . process () predictions [ \"Zero Shot\" ] = results elif tech == \"Few Shot\" : fs_request = CategoryManager . create_request ( unique_ids , text_to_label , categories_dict , few_shot_examples ) fs_categorizer = FewShotCategorizer ( prompty_path = fs_prompty , category_request = fs_request ) results = fs_categorizer . process () # Remove few-shot training examples from final predictions filtered_results = [ r for r in results if str ( r [ 0 ]) not in few_shot_ids ] predictions [ \"Few Shot\" ] = filtered_results elif tech == \"Many Shot\" : ms_request = CategoryManager . create_request ( unique_ids , text_to_label , categories_dict , many_shot_examples ) ms_categorizer = ManyshotClassifier ( categorization_request = ms_request , min_class_count = self . config . MIN_SAMPLES_MANY_SHOT , ) results = ms_categorizer . process () # Only keep test partition results = [ r for r in results if str ( r [ 0 ]) in many_shot_test_ids ] predictions [ \"Many Shot\" ] = results merged_df = df . copy () for technique , results in predictions . items (): tech_pred_df = pd . DataFrame ( [( row [ 0 ], row [ 2 ], row [ 3 ]) for row in results ], columns = [ index_column , f \"Predicted Category ( { technique } )\" , f \"Rationale ( { technique } )\" , ], ) # Ensure both DataFrames have string values in the index_column merged_df [ index_column ] = merged_df [ index_column ] . astype ( str ) tech_pred_df [ index_column ] = tech_pred_df [ index_column ] . astype ( str ) merged_df = pd . merge ( merged_df , tech_pred_df , on = index_column , how = \"left\" ) return merged_df else : # Production mode if ground_truth_column and ground_truth_column . strip (): # We can see if few shot or many shot is possible all_examples = [ ( str ( txt ), str ( gt ) . lower ()) for txt , gt in zip ( df [ text_column ], df [ ground_truth_column ] . astype ( str ) . str . lower () ) if gt ] categorization_request = CategoryManager . create_request ( unique_ids , text_to_label , categories_dict , all_examples ) # Decide which approach to run label_counts = df [ ground_truth_column ] . value_counts () min_class_samples = label_counts . min () if not label_counts . empty else 0 if min_class_samples >= self . config . MIN_SAMPLES_MANY_SHOT : manyshot = ManyshotClassifier ( categorization_request = categorization_request , min_class_count = min_class_samples , ) categorized_results = manyshot . process () else : fewshot = FewShotCategorizer ( prompty_path = fs_prompty , category_request = categorization_request ) categorized_results = fewshot . process () else : # No ground truth column at all => zero shot categorization_request = CategoryManager . create_request ( unique_ids , text_to_label , categories_dict ) zs_categorizer = ZeroShotCategorizer ( prompty_path = zs_prompty , category_request = categorization_request ) categorized_results = zs_categorizer . process () # Merge results results_df = pd . DataFrame ( [( row [ 0 ], row [ 2 ], row [ 3 ]) for row in categorized_results ], columns = [ index_column , \"Category\" , \"Rationale\" ], ) df [ index_column ] = df [ index_column ] . astype ( str ) results_df [ index_column ] = results_df [ index_column ] . astype ( str ) merged_df = pd . merge ( df , results_df , on = index_column , how = \"left\" ) final_columns = list ( df . columns ) + [ \"Category\" , \"Rationale\" ] merged_df = merged_df [ final_columns ] return merged_df categorize_data ( df , mode , index_column , text_column , ground_truth_column , categories_dict , zs_prompty , fs_prompty , evaluation_techniques = None , few_shot_count = Config . FEW_SHOT_COUNT , many_shot_train_ratio = Config . MANY_SHOT_TRAIN_RATIO ) The main categorization logic, shared by both Streamlit and FastAPI. mode should be either 'Evaluation'/'evaluation' or 'Production'/'production'. Source code in LabeLMaker/workflow.pydef categorize_data ( self , df : pd . DataFrame , mode : str , index_column : str , text_column : str , ground_truth_column : str , categories_dict : Dict [ str , Any ], zs_prompty : Path , fs_prompty : Path , evaluation_techniques : List [ str ] = None , few_shot_count : int = Config . FEW_SHOT_COUNT , many_shot_train_ratio : float = Config . MANY_SHOT_TRAIN_RATIO , ) -> pd . DataFrame : \"\"\" The main categorization logic, shared by both Streamlit and FastAPI. mode should be either 'Evaluation'/'evaluation' or 'Production'/'production'. \"\"\" if not index_column : df [ \"index\" ] = df . index . astype ( str ) index_column = \"index\" text_to_label = df [ text_column ] . astype ( str ) . tolist () unique_ids = df [ index_column ] . astype ( str ) . tolist () # If the user is in evaluation mode if mode . lower () == \"evaluation\" : # Prepare request categorization_request = CategoryManager . create_request ( unique_ids , text_to_label , categories_dict ) predictions = {} # Prepare ground-truth examples ( few_shot_examples , few_shot_ids , many_shot_examples , many_shot_test_ids , ) = self . _prepare_ground_truth_examples ( df , index_column , text_column , ground_truth_column , few_shot_count , many_shot_train_ratio , ) for tech in evaluation_techniques or [ \"Zero Shot\" ]: if tech == \"Zero Shot\" : zs_categorizer = ZeroShotCategorizer ( prompty_path = zs_prompty , category_request = categorization_request ) results = zs_categorizer . process () predictions [ \"Zero Shot\" ] = results elif tech == \"Few Shot\" : fs_request = CategoryManager . create_request ( unique_ids , text_to_label , categories_dict , few_shot_examples ) fs_categorizer = FewShotCategorizer ( prompty_path = fs_prompty , category_request = fs_request ) results = fs_categorizer . process () # Remove few-shot training examples from final predictions filtered_results = [ r for r in results if str ( r [ 0 ]) not in few_shot_ids ] predictions [ \"Few Shot\" ] = filtered_results elif tech == \"Many Shot\" : ms_request = CategoryManager . create_request ( unique_ids , text_to_label , categories_dict , many_shot_examples ) ms_categorizer = ManyshotClassifier ( categorization_request = ms_request , min_class_count = self . config . MIN_SAMPLES_MANY_SHOT , ) results = ms_categorizer . process () # Only keep test partition results = [ r for r in results if str ( r [ 0 ]) in many_shot_test_ids ] predictions [ \"Many Shot\" ] = results merged_df = df . copy () for technique , results in predictions . items (): tech_pred_df = pd . DataFrame ( [( row [ 0 ], row [ 2 ], row [ 3 ]) for row in results ], columns = [ index_column , f \"Predicted Category ( { technique } )\" , f \"Rationale ( { technique } )\" , ], ) # Ensure both DataFrames have string values in the index_column merged_df [ index_column ] = merged_df [ index_column ] . astype ( str ) tech_pred_df [ index_column ] = tech_pred_df [ index_column ] . astype ( str ) merged_df = pd . merge ( merged_df , tech_pred_df , on = index_column , how = \"left\" ) return merged_df else : # Production mode if ground_truth_column and ground_truth_column . strip (): # We can see if few shot or many shot is possible all_examples = [ ( str ( txt ), str ( gt ) . lower ()) for txt , gt in zip ( df [ text_column ], df [ ground_truth_column ] . astype ( str ) . str . lower () ) if gt ] categorization_request = CategoryManager . create_request ( unique_ids , text_to_label , categories_dict , all_examples ) # Decide which approach to run label_counts = df [ ground_truth_column ] . value_counts () min_class_samples = label_counts . min () if not label_counts . empty else 0 if min_class_samples >= self . config . MIN_SAMPLES_MANY_SHOT : manyshot = ManyshotClassifier ( categorization_request = categorization_request , min_class_count = min_class_samples , ) categorized_results = manyshot . process () else : fewshot = FewShotCategorizer ( prompty_path = fs_prompty , category_request = categorization_request ) categorized_results = fewshot . process () else : # No ground truth column at all => zero shot categorization_request = CategoryManager . create_request ( unique_ids , text_to_label , categories_dict ) zs_categorizer = ZeroShotCategorizer ( prompty_path = zs_prompty , category_request = categorization_request ) categorized_results = zs_categorizer . process () # Merge results results_df = pd . DataFrame ( [( row [ 0 ], row [ 2 ], row [ 3 ]) for row in categorized_results ], columns = [ index_column , \"Category\" , \"Rationale\" ], ) df [ index_column ] = df [ index_column ] . astype ( str ) results_df [ index_column ] = results_df [ index_column ] . astype ( str ) merged_df = pd . merge ( df , results_df , on = index_column , how = \"left\" ) final_columns = list ( df . columns ) + [ \"Category\" , \"Rationale\" ] merged_df = merged_df [ final_columns ] return merged_df","title":"Main"},{"location":"LabeLMaker/workflow.html#LabeLMaker.workflow.BaseCategorizeHandler","text":"The BaseCategorizeHandler class in Python contains methods for preparing ground truth examples and categorizing data based on different modes and evaluation techniques. Source code in LabeLMaker/workflow.pyclass BaseCategorizeHandler : \"\"\" The `BaseCategorizeHandler` class in Python contains methods for preparing ground truth examples and categorizing data based on different modes and evaluation techniques. \"\"\" def __init__ ( self , azure_key = None ): self . config = Config self . azure_key = azure_key def _prepare_ground_truth_examples ( self , df : pd . DataFrame , id_col : str , text_col : str , gt_col : str , few_shot_count : int = Config . MIN_SAMPLES_FEW_SHOT , many_shot_train_ratio : float = Config . MANY_SHOT_TRAIN_RATIO , ) -> Tuple [ List [ Example ], Set [ str ], List [ Example ], Set [ str ]]: \"\"\" Same utility method used in both Streamlit and FastAPI versions. \"\"\" few_shot_examples = [] few_shot_ids = set () many_shot_examples = [] many_shot_test_ids = set () df_gt = df [[ id_col , text_col , gt_col ]] . copy () df_gt [ gt_col ] = df_gt [ gt_col ] . astype ( str ) . str . lower () grouped = df_gt . groupby ( gt_col ) for _ , group in grouped : records = group . to_dict ( orient = \"records\" ) count = min ( few_shot_count , len ( records )) if count > 0 : sampled = random . sample ( records , count ) for rec in sampled : few_shot_examples . append ( Example ( text_with_label = str ( rec [ text_col ]), label = str ( rec [ gt_col ])) ) few_shot_ids . add ( str ( rec [ id_col ])) if len ( records ) > 1 : shuffled = records . copy () random . shuffle ( shuffled ) train_size = max ( 1 , int ( many_shot_train_ratio * len ( records ))) train_examples = shuffled [: train_size ] test_examples = shuffled [ train_size :] for rec in train_examples : many_shot_examples . append ( Example ( text_with_label = str ( rec [ text_col ]), label = str ( rec [ gt_col ])) ) for rec in test_examples : many_shot_test_ids . add ( str ( rec [ id_col ])) return few_shot_examples , few_shot_ids , many_shot_examples , many_shot_test_ids def categorize_data ( self , df : pd . DataFrame , mode : str , index_column : str , text_column : str , ground_truth_column : str , categories_dict : Dict [ str , Any ], zs_prompty : Path , fs_prompty : Path , evaluation_techniques : List [ str ] = None , few_shot_count : int = Config . FEW_SHOT_COUNT , many_shot_train_ratio : float = Config . MANY_SHOT_TRAIN_RATIO , ) -> pd . DataFrame : \"\"\" The main categorization logic, shared by both Streamlit and FastAPI. mode should be either 'Evaluation'/'evaluation' or 'Production'/'production'. \"\"\" if not index_column : df [ \"index\" ] = df . index . astype ( str ) index_column = \"index\" text_to_label = df [ text_column ] . astype ( str ) . tolist () unique_ids = df [ index_column ] . astype ( str ) . tolist () # If the user is in evaluation mode if mode . lower () == \"evaluation\" : # Prepare request categorization_request = CategoryManager . create_request ( unique_ids , text_to_label , categories_dict ) predictions = {} # Prepare ground-truth examples ( few_shot_examples , few_shot_ids , many_shot_examples , many_shot_test_ids , ) = self . _prepare_ground_truth_examples ( df , index_column , text_column , ground_truth_column , few_shot_count , many_shot_train_ratio , ) for tech in evaluation_techniques or [ \"Zero Shot\" ]: if tech == \"Zero Shot\" : zs_categorizer = ZeroShotCategorizer ( prompty_path = zs_prompty , category_request = categorization_request ) results = zs_categorizer . process () predictions [ \"Zero Shot\" ] = results elif tech == \"Few Shot\" : fs_request = CategoryManager . create_request ( unique_ids , text_to_label , categories_dict , few_shot_examples ) fs_categorizer = FewShotCategorizer ( prompty_path = fs_prompty , category_request = fs_request ) results = fs_categorizer . process () # Remove few-shot training examples from final predictions filtered_results = [ r for r in results if str ( r [ 0 ]) not in few_shot_ids ] predictions [ \"Few Shot\" ] = filtered_results elif tech == \"Many Shot\" : ms_request = CategoryManager . create_request ( unique_ids , text_to_label , categories_dict , many_shot_examples ) ms_categorizer = ManyshotClassifier ( categorization_request = ms_request , min_class_count = self . config . MIN_SAMPLES_MANY_SHOT , ) results = ms_categorizer . process () # Only keep test partition results = [ r for r in results if str ( r [ 0 ]) in many_shot_test_ids ] predictions [ \"Many Shot\" ] = results merged_df = df . copy () for technique , results in predictions . items (): tech_pred_df = pd . DataFrame ( [( row [ 0 ], row [ 2 ], row [ 3 ]) for row in results ], columns = [ index_column , f \"Predicted Category ( { technique } )\" , f \"Rationale ( { technique } )\" , ], ) # Ensure both DataFrames have string values in the index_column merged_df [ index_column ] = merged_df [ index_column ] . astype ( str ) tech_pred_df [ index_column ] = tech_pred_df [ index_column ] . astype ( str ) merged_df = pd . merge ( merged_df , tech_pred_df , on = index_column , how = \"left\" ) return merged_df else : # Production mode if ground_truth_column and ground_truth_column . strip (): # We can see if few shot or many shot is possible all_examples = [ ( str ( txt ), str ( gt ) . lower ()) for txt , gt in zip ( df [ text_column ], df [ ground_truth_column ] . astype ( str ) . str . lower () ) if gt ] categorization_request = CategoryManager . create_request ( unique_ids , text_to_label , categories_dict , all_examples ) # Decide which approach to run label_counts = df [ ground_truth_column ] . value_counts () min_class_samples = label_counts . min () if not label_counts . empty else 0 if min_class_samples >= self . config . MIN_SAMPLES_MANY_SHOT : manyshot = ManyshotClassifier ( categorization_request = categorization_request , min_class_count = min_class_samples , ) categorized_results = manyshot . process () else : fewshot = FewShotCategorizer ( prompty_path = fs_prompty , category_request = categorization_request ) categorized_results = fewshot . process () else : # No ground truth column at all => zero shot categorization_request = CategoryManager . create_request ( unique_ids , text_to_label , categories_dict ) zs_categorizer = ZeroShotCategorizer ( prompty_path = zs_prompty , category_request = categorization_request ) categorized_results = zs_categorizer . process () # Merge results results_df = pd . DataFrame ( [( row [ 0 ], row [ 2 ], row [ 3 ]) for row in categorized_results ], columns = [ index_column , \"Category\" , \"Rationale\" ], ) df [ index_column ] = df [ index_column ] . astype ( str ) results_df [ index_column ] = results_df [ index_column ] . astype ( str ) merged_df = pd . merge ( df , results_df , on = index_column , how = \"left\" ) final_columns = list ( df . columns ) + [ \"Category\" , \"Rationale\" ] merged_df = merged_df [ final_columns ] return merged_df","title":"BaseCategorizeHandler"},{"location":"LabeLMaker/workflow.html#LabeLMaker.workflow.BaseCategorizeHandler.categorize_data","text":"The main categorization logic, shared by both Streamlit and FastAPI. mode should be either 'Evaluation'/'evaluation' or 'Production'/'production'. Source code in LabeLMaker/workflow.pydef categorize_data ( self , df : pd . DataFrame , mode : str , index_column : str , text_column : str , ground_truth_column : str , categories_dict : Dict [ str , Any ], zs_prompty : Path , fs_prompty : Path , evaluation_techniques : List [ str ] = None , few_shot_count : int = Config . FEW_SHOT_COUNT , many_shot_train_ratio : float = Config . MANY_SHOT_TRAIN_RATIO , ) -> pd . DataFrame : \"\"\" The main categorization logic, shared by both Streamlit and FastAPI. mode should be either 'Evaluation'/'evaluation' or 'Production'/'production'. \"\"\" if not index_column : df [ \"index\" ] = df . index . astype ( str ) index_column = \"index\" text_to_label = df [ text_column ] . astype ( str ) . tolist () unique_ids = df [ index_column ] . astype ( str ) . tolist () # If the user is in evaluation mode if mode . lower () == \"evaluation\" : # Prepare request categorization_request = CategoryManager . create_request ( unique_ids , text_to_label , categories_dict ) predictions = {} # Prepare ground-truth examples ( few_shot_examples , few_shot_ids , many_shot_examples , many_shot_test_ids , ) = self . _prepare_ground_truth_examples ( df , index_column , text_column , ground_truth_column , few_shot_count , many_shot_train_ratio , ) for tech in evaluation_techniques or [ \"Zero Shot\" ]: if tech == \"Zero Shot\" : zs_categorizer = ZeroShotCategorizer ( prompty_path = zs_prompty , category_request = categorization_request ) results = zs_categorizer . process () predictions [ \"Zero Shot\" ] = results elif tech == \"Few Shot\" : fs_request = CategoryManager . create_request ( unique_ids , text_to_label , categories_dict , few_shot_examples ) fs_categorizer = FewShotCategorizer ( prompty_path = fs_prompty , category_request = fs_request ) results = fs_categorizer . process () # Remove few-shot training examples from final predictions filtered_results = [ r for r in results if str ( r [ 0 ]) not in few_shot_ids ] predictions [ \"Few Shot\" ] = filtered_results elif tech == \"Many Shot\" : ms_request = CategoryManager . create_request ( unique_ids , text_to_label , categories_dict , many_shot_examples ) ms_categorizer = ManyshotClassifier ( categorization_request = ms_request , min_class_count = self . config . MIN_SAMPLES_MANY_SHOT , ) results = ms_categorizer . process () # Only keep test partition results = [ r for r in results if str ( r [ 0 ]) in many_shot_test_ids ] predictions [ \"Many Shot\" ] = results merged_df = df . copy () for technique , results in predictions . items (): tech_pred_df = pd . DataFrame ( [( row [ 0 ], row [ 2 ], row [ 3 ]) for row in results ], columns = [ index_column , f \"Predicted Category ( { technique } )\" , f \"Rationale ( { technique } )\" , ], ) # Ensure both DataFrames have string values in the index_column merged_df [ index_column ] = merged_df [ index_column ] . astype ( str ) tech_pred_df [ index_column ] = tech_pred_df [ index_column ] . astype ( str ) merged_df = pd . merge ( merged_df , tech_pred_df , on = index_column , how = \"left\" ) return merged_df else : # Production mode if ground_truth_column and ground_truth_column . strip (): # We can see if few shot or many shot is possible all_examples = [ ( str ( txt ), str ( gt ) . lower ()) for txt , gt in zip ( df [ text_column ], df [ ground_truth_column ] . astype ( str ) . str . lower () ) if gt ] categorization_request = CategoryManager . create_request ( unique_ids , text_to_label , categories_dict , all_examples ) # Decide which approach to run label_counts = df [ ground_truth_column ] . value_counts () min_class_samples = label_counts . min () if not label_counts . empty else 0 if min_class_samples >= self . config . MIN_SAMPLES_MANY_SHOT : manyshot = ManyshotClassifier ( categorization_request = categorization_request , min_class_count = min_class_samples , ) categorized_results = manyshot . process () else : fewshot = FewShotCategorizer ( prompty_path = fs_prompty , category_request = categorization_request ) categorized_results = fewshot . process () else : # No ground truth column at all => zero shot categorization_request = CategoryManager . create_request ( unique_ids , text_to_label , categories_dict ) zs_categorizer = ZeroShotCategorizer ( prompty_path = zs_prompty , category_request = categorization_request ) categorized_results = zs_categorizer . process () # Merge results results_df = pd . DataFrame ( [( row [ 0 ], row [ 2 ], row [ 3 ]) for row in categorized_results ], columns = [ index_column , \"Category\" , \"Rationale\" ], ) df [ index_column ] = df [ index_column ] . astype ( str ) results_df [ index_column ] = results_df [ index_column ] . astype ( str ) merged_df = pd . merge ( df , results_df , on = index_column , how = \"left\" ) final_columns = list ( df . columns ) + [ \"Category\" , \"Rationale\" ] merged_df = merged_df [ final_columns ] return merged_df","title":"categorize_data"},{"location":"LabeLMaker/Categorize/categorizer.html","text":"The Categorizer Module orchestrates the activity associated with categorizing the text. It contains the logic for common aspects of categorization shared across zero and few shot cases. BaseCategorizer Bases: WorkflowHandler , ABC The BaseCategorizer class is a subclass of WorkflowHandler and an abstract base class (ABC) with an empty constructor. Source code in LabeLMaker/Categorize/categorizer.py 19 20 21 22 23 24 25 26 class BaseCategorizer ( WorkflowHandler , ABC ): \"\"\" The `BaseCategorizer` class is a subclass of `WorkflowHandler` and an abstract base class (ABC) with an empty constructor. \"\"\" def __init__ ( self ): pass LabeLMaker Bases: BaseCategorizer The function initializes attributes for a prompt generator class with specified parameters. Parameters: prompty_path ( Path ) \u2013 The prompty_path parameter is expected to be of type Path and represents the path to a file or directory related to the prompt. categorzation_request (CategorizationRequest): It looks like there is a typo in the parameter name categorzation_request . It should be categorization_request instead. llm_interface: The llm_interface parameter in the __init__ method is a default parameter with a default value of Config.LLM_INTERFACE . This means that if no value is provided for llm_interface when creating an instance of the class, it will default to the value specified in Source code in LabeLMaker/Categorize/categorizer.pyclass LabeLMaker ( BaseCategorizer ): \"\"\" The function initializes attributes for a prompt generator class with specified parameters. Args: prompty_path (Path): The `prompty_path` parameter is expected to be of type `Path` and represents the path to a file or directory related to the prompt. categorzation_request (CategorizationRequest): It looks like there is a typo in the parameter name `categorzation_request`. It should be `categorization_request` instead. llm_interface: The `llm_interface` parameter in the `__init__` method is a default parameter with a default value of `Config.LLM_INTERFACE`. This means that if no value is provided for `llm_interface` when creating an instance of the class, it will default to the value specified in \"\"\" def __init__ ( self , prompty_path : Path , categorzation_request : CategorizationRequest , llm_interface = Config . LLM_INTERFACE , ): super () . __init__ () self . prompty_path = prompty_path self . categorzation_request = categorzation_request self . prompt_template = self . load_prompty () self . llm = llm_interface self . chain = self . create_chain () self . prompt_inputs = self . _prepare_prompt_inputs () self . valid_categories = [ category . name for category in self . categorzation_request . categories ] def _prepare_prompt_inputs ( self ): # This method should be overridden by child classes for specific validation raise NotImplementedError ( \"Subclasses must implement prepare_prompt_inputs.\" ) def _validate_prompt_template ( self , prompt_template ): # This method should be overridden by child classes for specific validation raise NotImplementedError ( \"Subclasses must implement _validate_prompt_template.\" ) def create_chain ( self ): \"\"\" The `create_chain` function returns the result of combining the `prompt_template` and `llm` attributes. :return: The `create_chain` method is returning the result of the bitwise OR operation between `self.prompt_template` and `self.llm`. \"\"\" return self . prompt_template | self . llm def categorize_item ( self , item_args ): \"\"\" The `categorize_item` function categorizes an item based on input arguments and handles exceptions. :param item_args: The `item_args` parameter seems to be a dictionary that is being passed to the `categorize_item` method. It likely contains information or data related to an item that needs to be categorized :return: The `categorize_item` method returns the result of invoking the `chain` with the `item_args` provided. If the result is `None`, it raises a `ValueError` indicating that the chain returned `None` for the input. If an exception occurs during the processing of the item, it prints an error message with the item details and the exception message, then prints the traceback \"\"\" try : # Update item_args with all prompt inputs item_args . update ( self . prompt_inputs ) print ( \"ITEM ARGS - \" , item_args ) result = self . chain . invoke ( item_args ) if result is None : raise ValueError ( f \"Chain returned None for input: { item_args } \" ) return result except Exception as e : print ( f \"Error processing item: { item_args . get ( 'item' , '' ) } \" ) print ( f \"Exception: { e } \" ) traceback . print_exc () return None def categorize_text_with_retries ( self , text_to_categorize : str , max_retries : int = Config . MAX_RETRIES ): \"\"\" The function `categorize_text_with_retries` categorizes text with retry logic to ensure a valid category is obtained. :param text_to_categorize: The `text_to_categorize` parameter is a string that represents the text that needs to be categorized. It is the input text that will be processed and categorized by the `categorize_text_with_retries` method :type text_to_categorize: str :param max_retries: The `max_retries` parameter in the `categorize_text_with_retries` method specifies the maximum number of retries allowed when attempting to categorize the text. If the categorization process fails to produce a valid category within the specified number of retries, the method will return \"Uncategorized\" :type max_retries: int :return: The `categorize_text_with_retries` method returns a tuple containing the `rationale` and `category` of the text after attempting to categorize it with retry logic. If a valid category is not obtained after the maximum number of retries, it sets the category to \"Uncategorized\". \"\"\" # Common method to categorize text with retry logic retry_count = 0 rationale = None category = None while retry_count < max_retries : item_args = { \"item\" : text_to_categorize } content = self . categorize_item ( item_args ) if content is None : print ( f \"Warning: categorize_item() returned None for input: { text_to_categorize } \" ) else : # Add this line print ( f \"Content returned from chain: { content } \" ) text_content = self . check_content_type ( content ) rationale = self . extract_rationale ( text_content ) category = self . extract_category ( text_content ) # And this line print ( f \"Extracted rationale: { rationale } , category: { category } \" ) if self . _is_valid_category ( category ): break else : print ( f \"Invalid category ' { category } ' received. Retrying ( { retry_count + 1 } / { max_retries } )...\" ) retry_count += 1 if not self . _is_valid_category ( category ): print ( f \"Failed to get a valid category for text: ' { text_to_categorize } ' after { max_retries } retries.\" ) category = \"Uncategorized\" return rationale , category @staticmethod def extract_rationale ( content : str ): \"\"\" This Python function extracts the rationale from a given content using a regular expression pattern. :param content: It looks like you have provided the code snippet for a function called `extract_rationale` that extracts the rationale from a given content string using a regular expression pattern. The rationale is expected to be found after the text \"Rationale:\" and before the text \"Category:\" or the end of the string :type content: str :return: The function `extract_rationale` returns the rationale extracted from the input `content` string based on the provided regex pattern. If a match is found, it returns the extracted rationale text after stripping any leading or trailing whitespaces. If no match is found, it returns `None`. \"\"\" # Adjust the regex pattern to match the actual content # TODO consider having model output JSON and parse that JSON here rationale_pattern = r \"Rationale:\\s*(.*?)\\s*(?:Category:|$)\" rationale_match = re . search ( rationale_pattern , content , re . DOTALL | re . IGNORECASE ) rationale = rationale_match . group ( 1 ) . strip () if rationale_match else None return rationale @staticmethod def extract_category ( content : str ): \"\"\" The function `extract_category` takes a string input and extracts the category information following the \"Category:\" keyword. :param content: Thank you for providing the code snippet. It looks like you are trying to extract the category from a given content string using a regular expression pattern :type content: str :return: The function `extract_category` returns the category extracted from the input `content` string. If the string contains a pattern \"Category: \" followed by any characters, the function will extract and return those characters as the category. If the pattern is not found in the input string, the function will return `None`. \"\"\" category_pattern = r \"Category:\\s*(.*)\" category_match = re . search ( category_pattern , content , re . IGNORECASE ) category = category_match . group ( 1 ) . strip () if category_match else None return category def _is_valid_category ( self , category : str ): \"\"\" The function `_is_valid_category` checks if a given category is valid within a list of valid categories. :param category: The `_is_valid_category` method takes a parameter `category` of type `str`. It checks if the `category` is present in the `valid_categories` attribute of the class and returns a boolean value indicating whether the category is valid or not :type category: str :return: a boolean value indicating whether the input category is found in the list of valid categories stored in the object. \"\"\" category_found = category in self . valid_categories return category_found def process ( self ): \"\"\" The `process` function categorizes text data with retries and returns the results. :return: The `process` method is returning a list of tuples where each tuple contains the original text, the category assigned to that text, and the rationale for the categorization. \"\"\" categorized_results = [] index_list = self . categorzation_request . unique_ids text_list = self . categorzation_request . text_to_label total_list_length = len ( text_list ) progress_bar = st . progress ( 1 , text = \"Operation in progress. Please wait...\" ) for i , ( idx , text ) in enumerate ( zip ( index_list , text_list )): normalized_text = normalize_text ( text ) progress = ( i + 1 ) / total_list_length progress_bar . progress ( progress , text = \"Operation in progress. Please wait...\" ) rationale , category = self . categorize_text_with_retries ( normalized_text ) categorized_results . append (( idx , normalized_text , category , rationale )) return categorized_results categorize_item ( item_args ) The categorize_item function categorizes an item based on input arguments and handles exceptions. :param item_args: The item_args parameter seems to be a dictionary that is being passed to the categorize_item method. It likely contains information or data related to an item that needs to be categorized :return: The categorize_item method returns the result of invoking the chain with the item_args provided. If the result is None , it raises a ValueError indicating that the chain returned None for the input. If an exception occurs during the processing of the item, it prints an error message with the item details and the exception message, then prints the traceback Source code in LabeLMaker/Categorize/categorizer.py 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 def categorize_item ( self , item_args ): \"\"\" The `categorize_item` function categorizes an item based on input arguments and handles exceptions. :param item_args: The `item_args` parameter seems to be a dictionary that is being passed to the `categorize_item` method. It likely contains information or data related to an item that needs to be categorized :return: The `categorize_item` method returns the result of invoking the `chain` with the `item_args` provided. If the result is `None`, it raises a `ValueError` indicating that the chain returned `None` for the input. If an exception occurs during the processing of the item, it prints an error message with the item details and the exception message, then prints the traceback \"\"\" try : # Update item_args with all prompt inputs item_args . update ( self . prompt_inputs ) print ( \"ITEM ARGS - \" , item_args ) result = self . chain . invoke ( item_args ) if result is None : raise ValueError ( f \"Chain returned None for input: { item_args } \" ) return result except Exception as e : print ( f \"Error processing item: { item_args . get ( 'item' , '' ) } \" ) print ( f \"Exception: { e } \" ) traceback . print_exc () return None categorize_text_with_retries ( text_to_categorize , max_retries = Config . MAX_RETRIES ) The function categorize_text_with_retries categorizes text with retry logic to ensure a valid category is obtained. :param text_to_categorize: The text_to_categorize parameter is a string that represents the text that needs to be categorized. It is the input text that will be processed and categorized by the categorize_text_with_retries method :type text_to_categorize: str :param max_retries: The max_retries parameter in the categorize_text_with_retries method specifies the maximum number of retries allowed when attempting to categorize the text. If the categorization process fails to produce a valid category within the specified number of retries, the method will return \"Uncategorized\" :type max_retries: int :return: The categorize_text_with_retries method returns a tuple containing the rationale and category of the text after attempting to categorize it with retry logic. If a valid category is not obtained after the maximum number of retries, it sets the category to \"Uncategorized\". Source code in LabeLMaker/Categorize/categorizer.py 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 def categorize_text_with_retries ( self , text_to_categorize : str , max_retries : int = Config . MAX_RETRIES ): \"\"\" The function `categorize_text_with_retries` categorizes text with retry logic to ensure a valid category is obtained. :param text_to_categorize: The `text_to_categorize` parameter is a string that represents the text that needs to be categorized. It is the input text that will be processed and categorized by the `categorize_text_with_retries` method :type text_to_categorize: str :param max_retries: The `max_retries` parameter in the `categorize_text_with_retries` method specifies the maximum number of retries allowed when attempting to categorize the text. If the categorization process fails to produce a valid category within the specified number of retries, the method will return \"Uncategorized\" :type max_retries: int :return: The `categorize_text_with_retries` method returns a tuple containing the `rationale` and `category` of the text after attempting to categorize it with retry logic. If a valid category is not obtained after the maximum number of retries, it sets the category to \"Uncategorized\". \"\"\" # Common method to categorize text with retry logic retry_count = 0 rationale = None category = None while retry_count < max_retries : item_args = { \"item\" : text_to_categorize } content = self . categorize_item ( item_args ) if content is None : print ( f \"Warning: categorize_item() returned None for input: { text_to_categorize } \" ) else : # Add this line print ( f \"Content returned from chain: { content } \" ) text_content = self . check_content_type ( content ) rationale = self . extract_rationale ( text_content ) category = self . extract_category ( text_content ) # And this line print ( f \"Extracted rationale: { rationale } , category: { category } \" ) if self . _is_valid_category ( category ): break else : print ( f \"Invalid category ' { category } ' received. Retrying ( { retry_count + 1 } / { max_retries } )...\" ) retry_count += 1 if not self . _is_valid_category ( category ): print ( f \"Failed to get a valid category for text: ' { text_to_categorize } ' after { max_retries } retries.\" ) category = \"Uncategorized\" return rationale , category create_chain () The create_chain function returns the result of combining the prompt_template and llm attributes. :return: The create_chain method is returning the result of the bitwise OR operation between self.prompt_template and self.llm . Source code in LabeLMaker/Categorize/categorizer.py 69 70 71 72 73 74 75 76 def create_chain ( self ): \"\"\" The `create_chain` function returns the result of combining the `prompt_template` and `llm` attributes. :return: The `create_chain` method is returning the result of the bitwise OR operation between `self.prompt_template` and `self.llm`. \"\"\" return self . prompt_template | self . llm extract_category ( content ) staticmethod The function extract_category takes a string input and extracts the category information following the \"Category:\" keyword. :param content: Thank you for providing the code snippet. It looks like you are trying to extract the category from a given content string using a regular expression pattern :type content: str :return: The function extract_category returns the category extracted from the input content string. If the string contains a pattern \"Category: \" followed by any characters, the function will extract and return those characters as the category. If the pattern is not found in the input string, the function will return None . Source code in LabeLMaker/Categorize/categorizer.py 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 @staticmethod def extract_category ( content : str ): \"\"\" The function `extract_category` takes a string input and extracts the category information following the \"Category:\" keyword. :param content: Thank you for providing the code snippet. It looks like you are trying to extract the category from a given content string using a regular expression pattern :type content: str :return: The function `extract_category` returns the category extracted from the input `content` string. If the string contains a pattern \"Category: \" followed by any characters, the function will extract and return those characters as the category. If the pattern is not found in the input string, the function will return `None`. \"\"\" category_pattern = r \"Category:\\s*(.*)\" category_match = re . search ( category_pattern , content , re . IGNORECASE ) category = category_match . group ( 1 ) . strip () if category_match else None return category extract_rationale ( content ) staticmethod This Python function extracts the rationale from a given content using a regular expression pattern. :param content: It looks like you have provided the code snippet for a function called extract_rationale that extracts the rationale from a given content string using a regular expression pattern. The rationale is expected to be found after the text \"Rationale:\" and before the text \"Category:\" or the end of the string :type content: str :return: The function extract_rationale returns the rationale extracted from the input content string based on the provided regex pattern. If a match is found, it returns the extracted rationale text after stripping any leading or trailing whitespaces. If no match is found, it returns None . Source code in LabeLMaker/Categorize/categorizer.py 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 @staticmethod def extract_rationale ( content : str ): \"\"\" This Python function extracts the rationale from a given content using a regular expression pattern. :param content: It looks like you have provided the code snippet for a function called `extract_rationale` that extracts the rationale from a given content string using a regular expression pattern. The rationale is expected to be found after the text \"Rationale:\" and before the text \"Category:\" or the end of the string :type content: str :return: The function `extract_rationale` returns the rationale extracted from the input `content` string based on the provided regex pattern. If a match is found, it returns the extracted rationale text after stripping any leading or trailing whitespaces. If no match is found, it returns `None`. \"\"\" # Adjust the regex pattern to match the actual content # TODO consider having model output JSON and parse that JSON here rationale_pattern = r \"Rationale:\\s*(.*?)\\s*(?:Category:|$)\" rationale_match = re . search ( rationale_pattern , content , re . DOTALL | re . IGNORECASE ) rationale = rationale_match . group ( 1 ) . strip () if rationale_match else None return rationale process () The process function categorizes text data with retries and returns the results. :return: The process method is returning a list of tuples where each tuple contains the original text, the category assigned to that text, and the rationale for the categorization. Source code in LabeLMaker/Categorize/categorizer.py 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 def process ( self ): \"\"\" The `process` function categorizes text data with retries and returns the results. :return: The `process` method is returning a list of tuples where each tuple contains the original text, the category assigned to that text, and the rationale for the categorization. \"\"\" categorized_results = [] index_list = self . categorzation_request . unique_ids text_list = self . categorzation_request . text_to_label total_list_length = len ( text_list ) progress_bar = st . progress ( 1 , text = \"Operation in progress. Please wait...\" ) for i , ( idx , text ) in enumerate ( zip ( index_list , text_list )): normalized_text = normalize_text ( text ) progress = ( i + 1 ) / total_list_length progress_bar . progress ( progress , text = \"Operation in progress. Please wait...\" ) rationale , category = self . categorize_text_with_retries ( normalized_text ) categorized_results . append (( idx , normalized_text , category , rationale )) return categorized_results","title":"Categorizer"},{"location":"LabeLMaker/Categorize/categorizer.html#LabeLMaker.Categorize.categorizer.BaseCategorizer","text":"Bases: WorkflowHandler , ABC The BaseCategorizer class is a subclass of WorkflowHandler and an abstract base class (ABC) with an empty constructor. Source code in LabeLMaker/Categorize/categorizer.py 19 20 21 22 23 24 25 26 class BaseCategorizer ( WorkflowHandler , ABC ): \"\"\" The `BaseCategorizer` class is a subclass of `WorkflowHandler` and an abstract base class (ABC) with an empty constructor. \"\"\" def __init__ ( self ): pass","title":"BaseCategorizer"},{"location":"LabeLMaker/Categorize/categorizer.html#LabeLMaker.Categorize.categorizer.LabeLMaker","text":"Bases: BaseCategorizer The function initializes attributes for a prompt generator class with specified parameters. Parameters: prompty_path ( Path ) \u2013 The prompty_path parameter is expected to be of type Path and represents the path to a file or directory related to the prompt. categorzation_request (CategorizationRequest): It looks like there is a typo in the parameter name categorzation_request . It should be categorization_request instead. llm_interface: The llm_interface parameter in the __init__ method is a default parameter with a default value of Config.LLM_INTERFACE . This means that if no value is provided for llm_interface when creating an instance of the class, it will default to the value specified in Source code in LabeLMaker/Categorize/categorizer.pyclass LabeLMaker ( BaseCategorizer ): \"\"\" The function initializes attributes for a prompt generator class with specified parameters. Args: prompty_path (Path): The `prompty_path` parameter is expected to be of type `Path` and represents the path to a file or directory related to the prompt. categorzation_request (CategorizationRequest): It looks like there is a typo in the parameter name `categorzation_request`. It should be `categorization_request` instead. llm_interface: The `llm_interface` parameter in the `__init__` method is a default parameter with a default value of `Config.LLM_INTERFACE`. This means that if no value is provided for `llm_interface` when creating an instance of the class, it will default to the value specified in \"\"\" def __init__ ( self , prompty_path : Path , categorzation_request : CategorizationRequest , llm_interface = Config . LLM_INTERFACE , ): super () . __init__ () self . prompty_path = prompty_path self . categorzation_request = categorzation_request self . prompt_template = self . load_prompty () self . llm = llm_interface self . chain = self . create_chain () self . prompt_inputs = self . _prepare_prompt_inputs () self . valid_categories = [ category . name for category in self . categorzation_request . categories ] def _prepare_prompt_inputs ( self ): # This method should be overridden by child classes for specific validation raise NotImplementedError ( \"Subclasses must implement prepare_prompt_inputs.\" ) def _validate_prompt_template ( self , prompt_template ): # This method should be overridden by child classes for specific validation raise NotImplementedError ( \"Subclasses must implement _validate_prompt_template.\" ) def create_chain ( self ): \"\"\" The `create_chain` function returns the result of combining the `prompt_template` and `llm` attributes. :return: The `create_chain` method is returning the result of the bitwise OR operation between `self.prompt_template` and `self.llm`. \"\"\" return self . prompt_template | self . llm def categorize_item ( self , item_args ): \"\"\" The `categorize_item` function categorizes an item based on input arguments and handles exceptions. :param item_args: The `item_args` parameter seems to be a dictionary that is being passed to the `categorize_item` method. It likely contains information or data related to an item that needs to be categorized :return: The `categorize_item` method returns the result of invoking the `chain` with the `item_args` provided. If the result is `None`, it raises a `ValueError` indicating that the chain returned `None` for the input. If an exception occurs during the processing of the item, it prints an error message with the item details and the exception message, then prints the traceback \"\"\" try : # Update item_args with all prompt inputs item_args . update ( self . prompt_inputs ) print ( \"ITEM ARGS - \" , item_args ) result = self . chain . invoke ( item_args ) if result is None : raise ValueError ( f \"Chain returned None for input: { item_args } \" ) return result except Exception as e : print ( f \"Error processing item: { item_args . get ( 'item' , '' ) } \" ) print ( f \"Exception: { e } \" ) traceback . print_exc () return None def categorize_text_with_retries ( self , text_to_categorize : str , max_retries : int = Config . MAX_RETRIES ): \"\"\" The function `categorize_text_with_retries` categorizes text with retry logic to ensure a valid category is obtained. :param text_to_categorize: The `text_to_categorize` parameter is a string that represents the text that needs to be categorized. It is the input text that will be processed and categorized by the `categorize_text_with_retries` method :type text_to_categorize: str :param max_retries: The `max_retries` parameter in the `categorize_text_with_retries` method specifies the maximum number of retries allowed when attempting to categorize the text. If the categorization process fails to produce a valid category within the specified number of retries, the method will return \"Uncategorized\" :type max_retries: int :return: The `categorize_text_with_retries` method returns a tuple containing the `rationale` and `category` of the text after attempting to categorize it with retry logic. If a valid category is not obtained after the maximum number of retries, it sets the category to \"Uncategorized\". \"\"\" # Common method to categorize text with retry logic retry_count = 0 rationale = None category = None while retry_count < max_retries : item_args = { \"item\" : text_to_categorize } content = self . categorize_item ( item_args ) if content is None : print ( f \"Warning: categorize_item() returned None for input: { text_to_categorize } \" ) else : # Add this line print ( f \"Content returned from chain: { content } \" ) text_content = self . check_content_type ( content ) rationale = self . extract_rationale ( text_content ) category = self . extract_category ( text_content ) # And this line print ( f \"Extracted rationale: { rationale } , category: { category } \" ) if self . _is_valid_category ( category ): break else : print ( f \"Invalid category ' { category } ' received. Retrying ( { retry_count + 1 } / { max_retries } )...\" ) retry_count += 1 if not self . _is_valid_category ( category ): print ( f \"Failed to get a valid category for text: ' { text_to_categorize } ' after { max_retries } retries.\" ) category = \"Uncategorized\" return rationale , category @staticmethod def extract_rationale ( content : str ): \"\"\" This Python function extracts the rationale from a given content using a regular expression pattern. :param content: It looks like you have provided the code snippet for a function called `extract_rationale` that extracts the rationale from a given content string using a regular expression pattern. The rationale is expected to be found after the text \"Rationale:\" and before the text \"Category:\" or the end of the string :type content: str :return: The function `extract_rationale` returns the rationale extracted from the input `content` string based on the provided regex pattern. If a match is found, it returns the extracted rationale text after stripping any leading or trailing whitespaces. If no match is found, it returns `None`. \"\"\" # Adjust the regex pattern to match the actual content # TODO consider having model output JSON and parse that JSON here rationale_pattern = r \"Rationale:\\s*(.*?)\\s*(?:Category:|$)\" rationale_match = re . search ( rationale_pattern , content , re . DOTALL | re . IGNORECASE ) rationale = rationale_match . group ( 1 ) . strip () if rationale_match else None return rationale @staticmethod def extract_category ( content : str ): \"\"\" The function `extract_category` takes a string input and extracts the category information following the \"Category:\" keyword. :param content: Thank you for providing the code snippet. It looks like you are trying to extract the category from a given content string using a regular expression pattern :type content: str :return: The function `extract_category` returns the category extracted from the input `content` string. If the string contains a pattern \"Category: \" followed by any characters, the function will extract and return those characters as the category. If the pattern is not found in the input string, the function will return `None`. \"\"\" category_pattern = r \"Category:\\s*(.*)\" category_match = re . search ( category_pattern , content , re . IGNORECASE ) category = category_match . group ( 1 ) . strip () if category_match else None return category def _is_valid_category ( self , category : str ): \"\"\" The function `_is_valid_category` checks if a given category is valid within a list of valid categories. :param category: The `_is_valid_category` method takes a parameter `category` of type `str`. It checks if the `category` is present in the `valid_categories` attribute of the class and returns a boolean value indicating whether the category is valid or not :type category: str :return: a boolean value indicating whether the input category is found in the list of valid categories stored in the object. \"\"\" category_found = category in self . valid_categories return category_found def process ( self ): \"\"\" The `process` function categorizes text data with retries and returns the results. :return: The `process` method is returning a list of tuples where each tuple contains the original text, the category assigned to that text, and the rationale for the categorization. \"\"\" categorized_results = [] index_list = self . categorzation_request . unique_ids text_list = self . categorzation_request . text_to_label total_list_length = len ( text_list ) progress_bar = st . progress ( 1 , text = \"Operation in progress. Please wait...\" ) for i , ( idx , text ) in enumerate ( zip ( index_list , text_list )): normalized_text = normalize_text ( text ) progress = ( i + 1 ) / total_list_length progress_bar . progress ( progress , text = \"Operation in progress. Please wait...\" ) rationale , category = self . categorize_text_with_retries ( normalized_text ) categorized_results . append (( idx , normalized_text , category , rationale )) return categorized_results","title":"LabeLMaker"},{"location":"LabeLMaker/Categorize/categorizer.html#LabeLMaker.Categorize.categorizer.LabeLMaker.categorize_item","text":"The categorize_item function categorizes an item based on input arguments and handles exceptions. :param item_args: The item_args parameter seems to be a dictionary that is being passed to the categorize_item method. It likely contains information or data related to an item that needs to be categorized :return: The categorize_item method returns the result of invoking the chain with the item_args provided. If the result is None , it raises a ValueError indicating that the chain returned None for the input. If an exception occurs during the processing of the item, it prints an error message with the item details and the exception message, then prints the traceback Source code in LabeLMaker/Categorize/categorizer.py 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 def categorize_item ( self , item_args ): \"\"\" The `categorize_item` function categorizes an item based on input arguments and handles exceptions. :param item_args: The `item_args` parameter seems to be a dictionary that is being passed to the `categorize_item` method. It likely contains information or data related to an item that needs to be categorized :return: The `categorize_item` method returns the result of invoking the `chain` with the `item_args` provided. If the result is `None`, it raises a `ValueError` indicating that the chain returned `None` for the input. If an exception occurs during the processing of the item, it prints an error message with the item details and the exception message, then prints the traceback \"\"\" try : # Update item_args with all prompt inputs item_args . update ( self . prompt_inputs ) print ( \"ITEM ARGS - \" , item_args ) result = self . chain . invoke ( item_args ) if result is None : raise ValueError ( f \"Chain returned None for input: { item_args } \" ) return result except Exception as e : print ( f \"Error processing item: { item_args . get ( 'item' , '' ) } \" ) print ( f \"Exception: { e } \" ) traceback . print_exc () return None","title":"categorize_item"},{"location":"LabeLMaker/Categorize/categorizer.html#LabeLMaker.Categorize.categorizer.LabeLMaker.categorize_text_with_retries","text":"The function categorize_text_with_retries categorizes text with retry logic to ensure a valid category is obtained. :param text_to_categorize: The text_to_categorize parameter is a string that represents the text that needs to be categorized. It is the input text that will be processed and categorized by the categorize_text_with_retries method :type text_to_categorize: str :param max_retries: The max_retries parameter in the categorize_text_with_retries method specifies the maximum number of retries allowed when attempting to categorize the text. If the categorization process fails to produce a valid category within the specified number of retries, the method will return \"Uncategorized\" :type max_retries: int :return: The categorize_text_with_retries method returns a tuple containing the rationale and category of the text after attempting to categorize it with retry logic. If a valid category is not obtained after the maximum number of retries, it sets the category to \"Uncategorized\". Source code in LabeLMaker/Categorize/categorizer.py 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 def categorize_text_with_retries ( self , text_to_categorize : str , max_retries : int = Config . MAX_RETRIES ): \"\"\" The function `categorize_text_with_retries` categorizes text with retry logic to ensure a valid category is obtained. :param text_to_categorize: The `text_to_categorize` parameter is a string that represents the text that needs to be categorized. It is the input text that will be processed and categorized by the `categorize_text_with_retries` method :type text_to_categorize: str :param max_retries: The `max_retries` parameter in the `categorize_text_with_retries` method specifies the maximum number of retries allowed when attempting to categorize the text. If the categorization process fails to produce a valid category within the specified number of retries, the method will return \"Uncategorized\" :type max_retries: int :return: The `categorize_text_with_retries` method returns a tuple containing the `rationale` and `category` of the text after attempting to categorize it with retry logic. If a valid category is not obtained after the maximum number of retries, it sets the category to \"Uncategorized\". \"\"\" # Common method to categorize text with retry logic retry_count = 0 rationale = None category = None while retry_count < max_retries : item_args = { \"item\" : text_to_categorize } content = self . categorize_item ( item_args ) if content is None : print ( f \"Warning: categorize_item() returned None for input: { text_to_categorize } \" ) else : # Add this line print ( f \"Content returned from chain: { content } \" ) text_content = self . check_content_type ( content ) rationale = self . extract_rationale ( text_content ) category = self . extract_category ( text_content ) # And this line print ( f \"Extracted rationale: { rationale } , category: { category } \" ) if self . _is_valid_category ( category ): break else : print ( f \"Invalid category ' { category } ' received. Retrying ( { retry_count + 1 } / { max_retries } )...\" ) retry_count += 1 if not self . _is_valid_category ( category ): print ( f \"Failed to get a valid category for text: ' { text_to_categorize } ' after { max_retries } retries.\" ) category = \"Uncategorized\" return rationale , category","title":"categorize_text_with_retries"},{"location":"LabeLMaker/Categorize/categorizer.html#LabeLMaker.Categorize.categorizer.LabeLMaker.create_chain","text":"The create_chain function returns the result of combining the prompt_template and llm attributes. :return: The create_chain method is returning the result of the bitwise OR operation between self.prompt_template and self.llm . Source code in LabeLMaker/Categorize/categorizer.py 69 70 71 72 73 74 75 76 def create_chain ( self ): \"\"\" The `create_chain` function returns the result of combining the `prompt_template` and `llm` attributes. :return: The `create_chain` method is returning the result of the bitwise OR operation between `self.prompt_template` and `self.llm`. \"\"\" return self . prompt_template | self . llm","title":"create_chain"},{"location":"LabeLMaker/Categorize/categorizer.html#LabeLMaker.Categorize.categorizer.LabeLMaker.extract_category","text":"The function extract_category takes a string input and extracts the category information following the \"Category:\" keyword. :param content: Thank you for providing the code snippet. It looks like you are trying to extract the category from a given content string using a regular expression pattern :type content: str :return: The function extract_category returns the category extracted from the input content string. If the string contains a pattern \"Category: \" followed by any characters, the function will extract and return those characters as the category. If the pattern is not found in the input string, the function will return None . Source code in LabeLMaker/Categorize/categorizer.py 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 @staticmethod def extract_category ( content : str ): \"\"\" The function `extract_category` takes a string input and extracts the category information following the \"Category:\" keyword. :param content: Thank you for providing the code snippet. It looks like you are trying to extract the category from a given content string using a regular expression pattern :type content: str :return: The function `extract_category` returns the category extracted from the input `content` string. If the string contains a pattern \"Category: \" followed by any characters, the function will extract and return those characters as the category. If the pattern is not found in the input string, the function will return `None`. \"\"\" category_pattern = r \"Category:\\s*(.*)\" category_match = re . search ( category_pattern , content , re . IGNORECASE ) category = category_match . group ( 1 ) . strip () if category_match else None return category","title":"extract_category"},{"location":"LabeLMaker/Categorize/categorizer.html#LabeLMaker.Categorize.categorizer.LabeLMaker.extract_rationale","text":"This Python function extracts the rationale from a given content using a regular expression pattern. :param content: It looks like you have provided the code snippet for a function called extract_rationale that extracts the rationale from a given content string using a regular expression pattern. The rationale is expected to be found after the text \"Rationale:\" and before the text \"Category:\" or the end of the string :type content: str :return: The function extract_rationale returns the rationale extracted from the input content string based on the provided regex pattern. If a match is found, it returns the extracted rationale text after stripping any leading or trailing whitespaces. If no match is found, it returns None . Source code in LabeLMaker/Categorize/categorizer.py 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 @staticmethod def extract_rationale ( content : str ): \"\"\" This Python function extracts the rationale from a given content using a regular expression pattern. :param content: It looks like you have provided the code snippet for a function called `extract_rationale` that extracts the rationale from a given content string using a regular expression pattern. The rationale is expected to be found after the text \"Rationale:\" and before the text \"Category:\" or the end of the string :type content: str :return: The function `extract_rationale` returns the rationale extracted from the input `content` string based on the provided regex pattern. If a match is found, it returns the extracted rationale text after stripping any leading or trailing whitespaces. If no match is found, it returns `None`. \"\"\" # Adjust the regex pattern to match the actual content # TODO consider having model output JSON and parse that JSON here rationale_pattern = r \"Rationale:\\s*(.*?)\\s*(?:Category:|$)\" rationale_match = re . search ( rationale_pattern , content , re . DOTALL | re . IGNORECASE ) rationale = rationale_match . group ( 1 ) . strip () if rationale_match else None return rationale","title":"extract_rationale"},{"location":"LabeLMaker/Categorize/categorizer.html#LabeLMaker.Categorize.categorizer.LabeLMaker.process","text":"The process function categorizes text data with retries and returns the results. :return: The process method is returning a list of tuples where each tuple contains the original text, the category assigned to that text, and the rationale for the categorization. Source code in LabeLMaker/Categorize/categorizer.py 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 def process ( self ): \"\"\" The `process` function categorizes text data with retries and returns the results. :return: The `process` method is returning a list of tuples where each tuple contains the original text, the category assigned to that text, and the rationale for the categorization. \"\"\" categorized_results = [] index_list = self . categorzation_request . unique_ids text_list = self . categorzation_request . text_to_label total_list_length = len ( text_list ) progress_bar = st . progress ( 1 , text = \"Operation in progress. Please wait...\" ) for i , ( idx , text ) in enumerate ( zip ( index_list , text_list )): normalized_text = normalize_text ( text ) progress = ( i + 1 ) / total_list_length progress_bar . progress ( progress , text = \"Operation in progress. Please wait...\" ) rationale , category = self . categorize_text_with_retries ( normalized_text ) categorized_results . append (( idx , normalized_text , category , rationale )) return categorized_results","title":"process"},{"location":"LabeLMaker/Categorize/fewshot.html","text":"FewShotCategorizer Bases: LabeLMaker Source code in LabeLMaker/Categorize/fewshot.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 class FewShotCategorizer ( LabeLMaker ): def __init__ ( self , prompty_path : Path , category_request : CategorizationRequest ): super () . __init__ ( prompty_path , category_request ) self . _validate_examples () def _get_filename ( self ): return \"fewshot_categorizer_output.txt\" def _get_mime_type ( self ): return \"text/plain\" def _validate_prompt_template ( self , prompt_template ): \"\"\" The function `_validate_prompt_template` checks if certain expected variables are present in a given prompt template for few-shot prompts. :param prompt_template: It looks like you are trying to validate mandatory variables in a few-shot prompt template. The expected variables are 'item', 'categories_with_descriptions', and 'examples'. The code snippet you provided checks if these variables are present in the prompt template. If any of the expected variables are missing, a \"\"\" # Validate mandatory variables for few-shot prompts expected_variables = [ \"item\" , \"categories_with_descriptions\" , \"examples\" ] for var in expected_variables : if f \" { var } \" not in prompt_template : raise ValueError ( f \"Expected variable {{ var }} not found in the few-shot prompt template.\" ) def _validate_examples ( self ): \"\"\" This function validates that there is at least one example for each proposed category in a categorization request. \"\"\" # Ensure that there is at least one example for each proposed category category_examples = { category . name : 0 for category in self . categorzation_request . categories } for example in self . categorzation_request . examples or []: if isinstance ( example , Example ): if example . label in category_examples : category_examples [ example . label ] += 1 else : raise TypeError ( f \"Expected an instance of Example, but got { type ( example ) } instead\" ) for category , count in category_examples . items (): if count == 0 : raise ValueError ( f \"No examples provided for category: ' { category } '. Each category must have at least one example.\" ) def _prepare_prompt_inputs ( self ): \"\"\" The `_prepare_prompt_inputs` function prepares categories with descriptions and examples for a prompt input. :return: The `_prepare_prompt_inputs` method returns a dictionary containing the following keys and values: - 'categories_with_descriptions': a list of dictionaries where each dictionary contains a category name and its description (or a default message if no description is provided) - 'examples': examples prepared by the `_prepare_examples` method if available, otherwise it is set to None \"\"\" # Prepare categories with descriptions like in ZeroShotCategorizer categories_with_descriptions = [] for category in self . categorzation_request . categories : if isinstance ( category , Categories ): categories_with_descriptions . append ( { \"category\" : category . name , \"description\" : ( category . description if category . description else \"No description provided\" ), } ) else : raise TypeError ( f \"Expected an instance of Categories, but got { type ( category ) } instead\" ) # Prepare examples if available examples = self . _prepare_examples () if self . categorzation_request . examples else None # Combine prompt inputs prompt_inputs = { \"categories_with_descriptions\" : categories_with_descriptions , \"examples\" : examples , } return prompt_inputs def _prepare_examples ( self ): \"\"\" The `_prepare_examples` function prepares example prompt text by converting them into a list of dictionaries, ensuring they are instances of the `Example` class. :return: The method `_prepare_examples` is returning a list of dictionaries containing the text with label and label of each example in the categorization request. The method also includes a debug print statement to show the prepared examples before returning them. \"\"\" # Prepare the example prompt text as a list of dictionaries prompt_examples = [] for example in self . categorzation_request . examples : if isinstance ( example , Example ): prompt_examples . append ( { \"text_with_label\" : example . text_with_label , \"label\" : example . label } ) else : raise TypeError ( f \"Expected an instance of Example, but got { type ( example ) } instead\" ) return prompt_examples def categorize_item ( self , item_args ): \"\"\" The `categorize_item` function updates item arguments with prompt inputs, invokes a chain, handles exceptions, and returns the result or None. :param item_args: The `item_args` parameter in the `categorize_item` method seems to be a dictionary containing arguments related to an item. These arguments are updated with prompt inputs obtained from the `_prepare_prompt_inputs` method before being passed to the `chain.invoke` method for processing :return: The `categorize_item` method returns the result of invoking the `chain` with the `item_args` after updating it with prompt inputs. If the result is `None`, a `ValueError` is raised. If an exception occurs during the processing, an error message is printed along with the exception details, and `None` is returned. \"\"\" # Get the prompt inputs from _prepare_prompt_inputs and update item_args prompt_inputs = self . _prepare_prompt_inputs () item_args . update ( prompt_inputs ) try : result = self . chain . invoke ( item_args ) if result is None : raise ValueError ( f \"Chain returned None for input: { item_args } \" ) return result except Exception as e : print ( f \"Error processing item: { item_args . get ( 'item' , '' ) } \" ) print ( f \"Exception: { e } \" ) traceback . print_exc () return None categorize_item ( item_args ) The categorize_item function updates item arguments with prompt inputs, invokes a chain, handles exceptions, and returns the result or None. :param item_args: The item_args parameter in the categorize_item method seems to be a dictionary containing arguments related to an item. These arguments are updated with prompt inputs obtained from the _prepare_prompt_inputs method before being passed to the chain.invoke method for processing :return: The categorize_item method returns the result of invoking the chain with the item_args after updating it with prompt inputs. If the result is None , a ValueError is raised. If an exception occurs during the processing, an error message is printed along with the exception details, and None is returned. Source code in LabeLMaker/Categorize/fewshot.py 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 def categorize_item ( self , item_args ): \"\"\" The `categorize_item` function updates item arguments with prompt inputs, invokes a chain, handles exceptions, and returns the result or None. :param item_args: The `item_args` parameter in the `categorize_item` method seems to be a dictionary containing arguments related to an item. These arguments are updated with prompt inputs obtained from the `_prepare_prompt_inputs` method before being passed to the `chain.invoke` method for processing :return: The `categorize_item` method returns the result of invoking the `chain` with the `item_args` after updating it with prompt inputs. If the result is `None`, a `ValueError` is raised. If an exception occurs during the processing, an error message is printed along with the exception details, and `None` is returned. \"\"\" # Get the prompt inputs from _prepare_prompt_inputs and update item_args prompt_inputs = self . _prepare_prompt_inputs () item_args . update ( prompt_inputs ) try : result = self . chain . invoke ( item_args ) if result is None : raise ValueError ( f \"Chain returned None for input: { item_args } \" ) return result except Exception as e : print ( f \"Error processing item: { item_args . get ( 'item' , '' ) } \" ) print ( f \"Exception: { e } \" ) traceback . print_exc () return None","title":"Fewshot"},{"location":"LabeLMaker/Categorize/fewshot.html#LabeLMaker.Categorize.fewshot.FewShotCategorizer","text":"Bases: LabeLMaker Source code in LabeLMaker/Categorize/fewshot.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 class FewShotCategorizer ( LabeLMaker ): def __init__ ( self , prompty_path : Path , category_request : CategorizationRequest ): super () . __init__ ( prompty_path , category_request ) self . _validate_examples () def _get_filename ( self ): return \"fewshot_categorizer_output.txt\" def _get_mime_type ( self ): return \"text/plain\" def _validate_prompt_template ( self , prompt_template ): \"\"\" The function `_validate_prompt_template` checks if certain expected variables are present in a given prompt template for few-shot prompts. :param prompt_template: It looks like you are trying to validate mandatory variables in a few-shot prompt template. The expected variables are 'item', 'categories_with_descriptions', and 'examples'. The code snippet you provided checks if these variables are present in the prompt template. If any of the expected variables are missing, a \"\"\" # Validate mandatory variables for few-shot prompts expected_variables = [ \"item\" , \"categories_with_descriptions\" , \"examples\" ] for var in expected_variables : if f \" { var } \" not in prompt_template : raise ValueError ( f \"Expected variable {{ var }} not found in the few-shot prompt template.\" ) def _validate_examples ( self ): \"\"\" This function validates that there is at least one example for each proposed category in a categorization request. \"\"\" # Ensure that there is at least one example for each proposed category category_examples = { category . name : 0 for category in self . categorzation_request . categories } for example in self . categorzation_request . examples or []: if isinstance ( example , Example ): if example . label in category_examples : category_examples [ example . label ] += 1 else : raise TypeError ( f \"Expected an instance of Example, but got { type ( example ) } instead\" ) for category , count in category_examples . items (): if count == 0 : raise ValueError ( f \"No examples provided for category: ' { category } '. Each category must have at least one example.\" ) def _prepare_prompt_inputs ( self ): \"\"\" The `_prepare_prompt_inputs` function prepares categories with descriptions and examples for a prompt input. :return: The `_prepare_prompt_inputs` method returns a dictionary containing the following keys and values: - 'categories_with_descriptions': a list of dictionaries where each dictionary contains a category name and its description (or a default message if no description is provided) - 'examples': examples prepared by the `_prepare_examples` method if available, otherwise it is set to None \"\"\" # Prepare categories with descriptions like in ZeroShotCategorizer categories_with_descriptions = [] for category in self . categorzation_request . categories : if isinstance ( category , Categories ): categories_with_descriptions . append ( { \"category\" : category . name , \"description\" : ( category . description if category . description else \"No description provided\" ), } ) else : raise TypeError ( f \"Expected an instance of Categories, but got { type ( category ) } instead\" ) # Prepare examples if available examples = self . _prepare_examples () if self . categorzation_request . examples else None # Combine prompt inputs prompt_inputs = { \"categories_with_descriptions\" : categories_with_descriptions , \"examples\" : examples , } return prompt_inputs def _prepare_examples ( self ): \"\"\" The `_prepare_examples` function prepares example prompt text by converting them into a list of dictionaries, ensuring they are instances of the `Example` class. :return: The method `_prepare_examples` is returning a list of dictionaries containing the text with label and label of each example in the categorization request. The method also includes a debug print statement to show the prepared examples before returning them. \"\"\" # Prepare the example prompt text as a list of dictionaries prompt_examples = [] for example in self . categorzation_request . examples : if isinstance ( example , Example ): prompt_examples . append ( { \"text_with_label\" : example . text_with_label , \"label\" : example . label } ) else : raise TypeError ( f \"Expected an instance of Example, but got { type ( example ) } instead\" ) return prompt_examples def categorize_item ( self , item_args ): \"\"\" The `categorize_item` function updates item arguments with prompt inputs, invokes a chain, handles exceptions, and returns the result or None. :param item_args: The `item_args` parameter in the `categorize_item` method seems to be a dictionary containing arguments related to an item. These arguments are updated with prompt inputs obtained from the `_prepare_prompt_inputs` method before being passed to the `chain.invoke` method for processing :return: The `categorize_item` method returns the result of invoking the `chain` with the `item_args` after updating it with prompt inputs. If the result is `None`, a `ValueError` is raised. If an exception occurs during the processing, an error message is printed along with the exception details, and `None` is returned. \"\"\" # Get the prompt inputs from _prepare_prompt_inputs and update item_args prompt_inputs = self . _prepare_prompt_inputs () item_args . update ( prompt_inputs ) try : result = self . chain . invoke ( item_args ) if result is None : raise ValueError ( f \"Chain returned None for input: { item_args } \" ) return result except Exception as e : print ( f \"Error processing item: { item_args . get ( 'item' , '' ) } \" ) print ( f \"Exception: { e } \" ) traceback . print_exc () return None","title":"FewShotCategorizer"},{"location":"LabeLMaker/Categorize/fewshot.html#LabeLMaker.Categorize.fewshot.FewShotCategorizer.categorize_item","text":"The categorize_item function updates item arguments with prompt inputs, invokes a chain, handles exceptions, and returns the result or None. :param item_args: The item_args parameter in the categorize_item method seems to be a dictionary containing arguments related to an item. These arguments are updated with prompt inputs obtained from the _prepare_prompt_inputs method before being passed to the chain.invoke method for processing :return: The categorize_item method returns the result of invoking the chain with the item_args after updating it with prompt inputs. If the result is None , a ValueError is raised. If an exception occurs during the processing, an error message is printed along with the exception details, and None is returned. Source code in LabeLMaker/Categorize/fewshot.py 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 def categorize_item ( self , item_args ): \"\"\" The `categorize_item` function updates item arguments with prompt inputs, invokes a chain, handles exceptions, and returns the result or None. :param item_args: The `item_args` parameter in the `categorize_item` method seems to be a dictionary containing arguments related to an item. These arguments are updated with prompt inputs obtained from the `_prepare_prompt_inputs` method before being passed to the `chain.invoke` method for processing :return: The `categorize_item` method returns the result of invoking the `chain` with the `item_args` after updating it with prompt inputs. If the result is `None`, a `ValueError` is raised. If an exception occurs during the processing, an error message is printed along with the exception details, and `None` is returned. \"\"\" # Get the prompt inputs from _prepare_prompt_inputs and update item_args prompt_inputs = self . _prepare_prompt_inputs () item_args . update ( prompt_inputs ) try : result = self . chain . invoke ( item_args ) if result is None : raise ValueError ( f \"Chain returned None for input: { item_args } \" ) return result except Exception as e : print ( f \"Error processing item: { item_args . get ( 'item' , '' ) } \" ) print ( f \"Exception: { e } \" ) traceback . print_exc () return None","title":"categorize_item"},{"location":"LabeLMaker/Categorize/manyshot.html","text":"ManyshotClassifier Bases: BaseCategorizer Source code in LabeLMaker/Categorize/manyshot.pyclass ManyshotClassifier ( BaseCategorizer ): def __init__ ( self , categorization_request : CategorizationRequest , min_class_count : int ): super () . __init__ () self . categorization_request = categorization_request self . min_class_count = min_class_count self . model = None self . client = Config . EMBEDDING_CLIENT self . encoder = tiktoken . encoding_for_model ( \"gpt-4\" ) self . max_context_length = 8192 def _get_filename ( self ): raise NotImplementedError def _get_mime_type ( self ): raise NotImplementedError def get_embeddings ( self , text ): \"\"\" This function takes a text input, encodes it, truncates it if necessary, and then uses an Azure OpenAI client to embed the truncated text. Args: text: The `get_embeddings` function takes a text input as a parameter. This text input is then encoded using the `self.encoder.encode` method. The encoded tokens are then truncated based on the `max_context_length` and decoded back into text. If the truncated text is empty after stripping, the function Returns: The `get_embeddings` method returns the response from the Azure OpenAI client after encoding and querying the input text. \"\"\" tokens = self . encoder . encode ( text ) truncated_text = self . encoder . decode ( tokens [: self . max_context_length ]) if not truncated_text . strip (): return None # Replace with your Azure OpenAI client code response = self . client . embed_query ( truncated_text ) return response def preprocess_data ( self ): \"\"\" The `preprocess_data` function normalizes text data in both unlabeled and labeled examples for categorization. \"\"\" # Unlabeled texts: these come from the full list. self . normalized_unlabeled_list = [ normalize_text ( text ) if isinstance ( text , str ) else text for text in self . categorization_request . text_to_label ] # Normalize the training examples. self . normalized_example_list = [] for example in self . categorization_request . examples : # Handle Example objects if hasattr ( example , \"text_with_label\" ): text_with_label = example . text_with_label # Allow tuple or list (text, label) format elif isinstance ( example , ( tuple , list )) and len ( example ) == 2 : text_with_label = example [ 0 ] else : raise TypeError ( \"Invalid example format. Expected Example object or tuple (text, label).\" ) self . normalized_example_list . append ( normalize_text ( text_with_label ) if isinstance ( text_with_label , str ) else text_with_label ) def select_model ( self ): \"\"\" The `select_model` function chooses between Nearest Centroid and Multinomial Logistic Regression models based on a minimum class count threshold. \"\"\" if self . min_class_count < Config . MIN_LOGISTIC_SAMPLES_PER_CLASS : self . model = NearestCentroid () self . model_name = \"Nearest Centroid\" else : self . model = LogisticRegression ( max_iter = 1000 , penalty = \"elasticnet\" , solver = \"saga\" , n_jobs =- 1 , l1_ratio = 0.5 , multi_class = \"multinomial\" , ) self . model_name = \"Multinomial Logistic Regression\" def embed_data ( self , texts ): \"\"\" The `embed_data` function takes a list of texts, retrieves embeddings for each text using the `get_embeddings` method, and returns a list of non-None embeddings. Args: texts: The `embed_data` method takes a list of texts as input. It then iterates over each text in the list, retrieves its embedding using the `get_embeddings` method, and appends the embedding to a list called `embeddings`. Finally, it returns the list of embeddings. Returns: The `embed_data` method returns a list of embeddings for the input texts. \"\"\" embeddings = [] for text in texts : embedding = self . get_embeddings ( text ) if embedding is not None : embeddings . append ( embedding ) return embeddings def train_model ( self ): \"\"\" The `train_model` function selects a model, extracts labels from examples, trains embeddings, and fits the model with the embeddings and labels. \"\"\" self . select_model () labels = [] for example in self . categorization_request . examples : # Handle Example objects if hasattr ( example , \"label\" ): labels . append ( example . label ) # Handle tuple or list (text, label) elif isinstance ( example , ( tuple , list )) and len ( example ) == 2 : labels . append ( example [ 1 ]) else : raise TypeError ( \"Invalid example format. Expected Example object or tuple (text, label).\" ) self . train_embeddings = self . embed_data ( self . normalized_example_list ) self . model . fit ( self . train_embeddings , labels ) def predict_unlabeled ( self ): \"\"\" The `predict_unlabeled` function predicts labels for unlabeled text data and provides prediction probabilities and rationales for each prediction. Returns: The `predict_unlabeled` method returns a list of 4-tuples, where each tuple contains the unique ID, text, predicted category, and rationale for the prediction of unlabeled data points. \"\"\" categorized_results = [] unlabeled_text_embeddings = self . embed_data ( self . normalized_unlabeled_list ) unlabeled_labels = self . model . predict ( unlabeled_text_embeddings ) # Get prediction probabilities for each class for the unlabeled data. prediction_probabilities = self . model . predict_proba ( unlabeled_text_embeddings ) rationales = [] for prob in prediction_probabilities : formatted_probs = [ f \" { cls } : { p : .4f } \" if abs ( p ) >= 1e-4 else f \" { cls } : { p : .4e } \" for cls , p in zip ( self . model . classes_ , prob ) ] rationale = \" \" . join ( formatted_probs ) rationales . append ( rationale ) # Build a 4-tuple for each prediction. # Assuming self.categorization_request.unique_ids exists. for uid , text , category , reason in zip ( self . categorization_request . unique_ids , self . categorization_request . text_to_label , unlabeled_labels , rationales , ): categorized_results . append (( uid , text , category , reason )) return categorized_results def process ( self ): \"\"\" Process the request by preprocessing data, training the model, and predicting labels for unlabeled text. Returns a list of 4-tuples (uid, text, predicted label, rationale). \"\"\" self . preprocess_data () self . train_model () return self . predict_unlabeled () embed_data ( texts ) The embed_data function takes a list of texts, retrieves embeddings for each text using the get_embeddings method, and returns a list of non-None embeddings. Parameters: texts \u2013 The embed_data method takes a list of texts as input. It then iterates over each text in the list, retrieves its embedding using the get_embeddings method, and appends the embedding to a list called embeddings . Finally, it returns the list of embeddings. Returns: \u2013 The embed_data method returns a list of embeddings for the input texts. Source code in LabeLMaker/Categorize/manyshot.py 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 def embed_data ( self , texts ): \"\"\" The `embed_data` function takes a list of texts, retrieves embeddings for each text using the `get_embeddings` method, and returns a list of non-None embeddings. Args: texts: The `embed_data` method takes a list of texts as input. It then iterates over each text in the list, retrieves its embedding using the `get_embeddings` method, and appends the embedding to a list called `embeddings`. Finally, it returns the list of embeddings. Returns: The `embed_data` method returns a list of embeddings for the input texts. \"\"\" embeddings = [] for text in texts : embedding = self . get_embeddings ( text ) if embedding is not None : embeddings . append ( embedding ) return embeddings get_embeddings ( text ) This function takes a text input, encodes it, truncates it if necessary, and then uses an Azure OpenAI client to embed the truncated text. Parameters: text \u2013 The get_embeddings function takes a text input as a parameter. This text input is then encoded using the self.encoder.encode method. The encoded tokens are then truncated based on the max_context_length and decoded back into text. If the truncated text is empty after stripping, the function Returns: \u2013 The get_embeddings method returns the response from the Azure OpenAI client after encoding and querying the input text. Source code in LabeLMaker/Categorize/manyshot.py 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 def get_embeddings ( self , text ): \"\"\" This function takes a text input, encodes it, truncates it if necessary, and then uses an Azure OpenAI client to embed the truncated text. Args: text: The `get_embeddings` function takes a text input as a parameter. This text input is then encoded using the `self.encoder.encode` method. The encoded tokens are then truncated based on the `max_context_length` and decoded back into text. If the truncated text is empty after stripping, the function Returns: The `get_embeddings` method returns the response from the Azure OpenAI client after encoding and querying the input text. \"\"\" tokens = self . encoder . encode ( text ) truncated_text = self . encoder . decode ( tokens [: self . max_context_length ]) if not truncated_text . strip (): return None # Replace with your Azure OpenAI client code response = self . client . embed_query ( truncated_text ) return response predict_unlabeled () The predict_unlabeled function predicts labels for unlabeled text data and provides prediction probabilities and rationales for each prediction. Returns: \u2013 The predict_unlabeled method returns a list of 4-tuples, where each tuple contains the unique ID, text, predicted category, and rationale for the prediction of unlabeled data points. Source code in LabeLMaker/Categorize/manyshot.py 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 def predict_unlabeled ( self ): \"\"\" The `predict_unlabeled` function predicts labels for unlabeled text data and provides prediction probabilities and rationales for each prediction. Returns: The `predict_unlabeled` method returns a list of 4-tuples, where each tuple contains the unique ID, text, predicted category, and rationale for the prediction of unlabeled data points. \"\"\" categorized_results = [] unlabeled_text_embeddings = self . embed_data ( self . normalized_unlabeled_list ) unlabeled_labels = self . model . predict ( unlabeled_text_embeddings ) # Get prediction probabilities for each class for the unlabeled data. prediction_probabilities = self . model . predict_proba ( unlabeled_text_embeddings ) rationales = [] for prob in prediction_probabilities : formatted_probs = [ f \" { cls } : { p : .4f } \" if abs ( p ) >= 1e-4 else f \" { cls } : { p : .4e } \" for cls , p in zip ( self . model . classes_ , prob ) ] rationale = \" \" . join ( formatted_probs ) rationales . append ( rationale ) # Build a 4-tuple for each prediction. # Assuming self.categorization_request.unique_ids exists. for uid , text , category , reason in zip ( self . categorization_request . unique_ids , self . categorization_request . text_to_label , unlabeled_labels , rationales , ): categorized_results . append (( uid , text , category , reason )) return categorized_results preprocess_data () The preprocess_data function normalizes text data in both unlabeled and labeled examples for categorization. Source code in LabeLMaker/Categorize/manyshot.py 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 def preprocess_data ( self ): \"\"\" The `preprocess_data` function normalizes text data in both unlabeled and labeled examples for categorization. \"\"\" # Unlabeled texts: these come from the full list. self . normalized_unlabeled_list = [ normalize_text ( text ) if isinstance ( text , str ) else text for text in self . categorization_request . text_to_label ] # Normalize the training examples. self . normalized_example_list = [] for example in self . categorization_request . examples : # Handle Example objects if hasattr ( example , \"text_with_label\" ): text_with_label = example . text_with_label # Allow tuple or list (text, label) format elif isinstance ( example , ( tuple , list )) and len ( example ) == 2 : text_with_label = example [ 0 ] else : raise TypeError ( \"Invalid example format. Expected Example object or tuple (text, label).\" ) self . normalized_example_list . append ( normalize_text ( text_with_label ) if isinstance ( text_with_label , str ) else text_with_label ) process () Process the request by preprocessing data, training the model, and predicting labels for unlabeled text. Returns a list of 4-tuples (uid, text, predicted label, rationale). Source code in LabeLMaker/Categorize/manyshot.py 181 182 183 184 185 186 187 188 189 def process ( self ): \"\"\" Process the request by preprocessing data, training the model, and predicting labels for unlabeled text. Returns a list of 4-tuples (uid, text, predicted label, rationale). \"\"\" self . preprocess_data () self . train_model () return self . predict_unlabeled () select_model () The select_model function chooses between Nearest Centroid and Multinomial Logistic Regression models based on a minimum class count threshold. Source code in LabeLMaker/Categorize/manyshot.py 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 def select_model ( self ): \"\"\" The `select_model` function chooses between Nearest Centroid and Multinomial Logistic Regression models based on a minimum class count threshold. \"\"\" if self . min_class_count < Config . MIN_LOGISTIC_SAMPLES_PER_CLASS : self . model = NearestCentroid () self . model_name = \"Nearest Centroid\" else : self . model = LogisticRegression ( max_iter = 1000 , penalty = \"elasticnet\" , solver = \"saga\" , n_jobs =- 1 , l1_ratio = 0.5 , multi_class = \"multinomial\" , ) self . model_name = \"Multinomial Logistic Regression\" train_model () The train_model function selects a model, extracts labels from examples, trains embeddings, and fits the model with the embeddings and labels. Source code in LabeLMaker/Categorize/manyshot.py 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 def train_model ( self ): \"\"\" The `train_model` function selects a model, extracts labels from examples, trains embeddings, and fits the model with the embeddings and labels. \"\"\" self . select_model () labels = [] for example in self . categorization_request . examples : # Handle Example objects if hasattr ( example , \"label\" ): labels . append ( example . label ) # Handle tuple or list (text, label) elif isinstance ( example , ( tuple , list )) and len ( example ) == 2 : labels . append ( example [ 1 ]) else : raise TypeError ( \"Invalid example format. Expected Example object or tuple (text, label).\" ) self . train_embeddings = self . embed_data ( self . normalized_example_list ) self . model . fit ( self . train_embeddings , labels )","title":"Manyshot"},{"location":"LabeLMaker/Categorize/manyshot.html#LabeLMaker.Categorize.manyshot.ManyshotClassifier","text":"Bases: BaseCategorizer Source code in LabeLMaker/Categorize/manyshot.py 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 class ManyshotClassifier ( BaseCategorizer ): def __init__ ( self , categorization_request : CategorizationRequest , min_class_count : int ): super () . __init__ () self . categorization_request = categorization_request self . min_class_count = min_class_count self . model = None self . client = Config . EMBEDDING_CLIENT self . encoder = tiktoken . encoding_for_model ( \"gpt-4\" ) self . max_context_length = 8192 def _get_filename ( self ): raise NotImplementedError def _get_mime_type ( self ): raise NotImplementedError def get_embeddings ( self , text ): \"\"\" This function takes a text input, encodes it, truncates it if necessary, and then uses an Azure OpenAI client to embed the truncated text. Args: text: The `get_embeddings` function takes a text input as a parameter. This text input is then encoded using the `self.encoder.encode` method. The encoded tokens are then truncated based on the `max_context_length` and decoded back into text. If the truncated text is empty after stripping, the function Returns: The `get_embeddings` method returns the response from the Azure OpenAI client after encoding and querying the input text. \"\"\" tokens = self . encoder . encode ( text ) truncated_text = self . encoder . decode ( tokens [: self . max_context_length ]) if not truncated_text . strip (): return None # Replace with your Azure OpenAI client code response = self . client . embed_query ( truncated_text ) return response def preprocess_data ( self ): \"\"\" The `preprocess_data` function normalizes text data in both unlabeled and labeled examples for categorization. \"\"\" # Unlabeled texts: these come from the full list. self . normalized_unlabeled_list = [ normalize_text ( text ) if isinstance ( text , str ) else text for text in self . categorization_request . text_to_label ] # Normalize the training examples. self . normalized_example_list = [] for example in self . categorization_request . examples : # Handle Example objects if hasattr ( example , \"text_with_label\" ): text_with_label = example . text_with_label # Allow tuple or list (text, label) format elif isinstance ( example , ( tuple , list )) and len ( example ) == 2 : text_with_label = example [ 0 ] else : raise TypeError ( \"Invalid example format. Expected Example object or tuple (text, label).\" ) self . normalized_example_list . append ( normalize_text ( text_with_label ) if isinstance ( text_with_label , str ) else text_with_label ) def select_model ( self ): \"\"\" The `select_model` function chooses between Nearest Centroid and Multinomial Logistic Regression models based on a minimum class count threshold. \"\"\" if self . min_class_count < Config . MIN_LOGISTIC_SAMPLES_PER_CLASS : self . model = NearestCentroid () self . model_name = \"Nearest Centroid\" else : self . model = LogisticRegression ( max_iter = 1000 , penalty = \"elasticnet\" , solver = \"saga\" , n_jobs =- 1 , l1_ratio = 0.5 , multi_class = \"multinomial\" , ) self . model_name = \"Multinomial Logistic Regression\" def embed_data ( self , texts ): \"\"\" The `embed_data` function takes a list of texts, retrieves embeddings for each text using the `get_embeddings` method, and returns a list of non-None embeddings. Args: texts: The `embed_data` method takes a list of texts as input. It then iterates over each text in the list, retrieves its embedding using the `get_embeddings` method, and appends the embedding to a list called `embeddings`. Finally, it returns the list of embeddings. Returns: The `embed_data` method returns a list of embeddings for the input texts. \"\"\" embeddings = [] for text in texts : embedding = self . get_embeddings ( text ) if embedding is not None : embeddings . append ( embedding ) return embeddings def train_model ( self ): \"\"\" The `train_model` function selects a model, extracts labels from examples, trains embeddings, and fits the model with the embeddings and labels. \"\"\" self . select_model () labels = [] for example in self . categorization_request . examples : # Handle Example objects if hasattr ( example , \"label\" ): labels . append ( example . label ) # Handle tuple or list (text, label) elif isinstance ( example , ( tuple , list )) and len ( example ) == 2 : labels . append ( example [ 1 ]) else : raise TypeError ( \"Invalid example format. Expected Example object or tuple (text, label).\" ) self . train_embeddings = self . embed_data ( self . normalized_example_list ) self . model . fit ( self . train_embeddings , labels ) def predict_unlabeled ( self ): \"\"\" The `predict_unlabeled` function predicts labels for unlabeled text data and provides prediction probabilities and rationales for each prediction. Returns: The `predict_unlabeled` method returns a list of 4-tuples, where each tuple contains the unique ID, text, predicted category, and rationale for the prediction of unlabeled data points. \"\"\" categorized_results = [] unlabeled_text_embeddings = self . embed_data ( self . normalized_unlabeled_list ) unlabeled_labels = self . model . predict ( unlabeled_text_embeddings ) # Get prediction probabilities for each class for the unlabeled data. prediction_probabilities = self . model . predict_proba ( unlabeled_text_embeddings ) rationales = [] for prob in prediction_probabilities : formatted_probs = [ f \" { cls } : { p : .4f } \" if abs ( p ) >= 1e-4 else f \" { cls } : { p : .4e } \" for cls , p in zip ( self . model . classes_ , prob ) ] rationale = \" \" . join ( formatted_probs ) rationales . append ( rationale ) # Build a 4-tuple for each prediction. # Assuming self.categorization_request.unique_ids exists. for uid , text , category , reason in zip ( self . categorization_request . unique_ids , self . categorization_request . text_to_label , unlabeled_labels , rationales , ): categorized_results . append (( uid , text , category , reason )) return categorized_results def process ( self ): \"\"\" Process the request by preprocessing data, training the model, and predicting labels for unlabeled text. Returns a list of 4-tuples (uid, text, predicted label, rationale). \"\"\" self . preprocess_data () self . train_model () return self . predict_unlabeled ()","title":"ManyshotClassifier"},{"location":"LabeLMaker/Categorize/manyshot.html#LabeLMaker.Categorize.manyshot.ManyshotClassifier.embed_data","text":"The embed_data function takes a list of texts, retrieves embeddings for each text using the get_embeddings method, and returns a list of non-None embeddings. Parameters: texts \u2013 The embed_data method takes a list of texts as input. It then iterates over each text in the list, retrieves its embedding using the get_embeddings method, and appends the embedding to a list called embeddings . Finally, it returns the list of embeddings. Returns: \u2013 The embed_data method returns a list of embeddings for the input texts. Source code in LabeLMaker/Categorize/manyshot.py 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 def embed_data ( self , texts ): \"\"\" The `embed_data` function takes a list of texts, retrieves embeddings for each text using the `get_embeddings` method, and returns a list of non-None embeddings. Args: texts: The `embed_data` method takes a list of texts as input. It then iterates over each text in the list, retrieves its embedding using the `get_embeddings` method, and appends the embedding to a list called `embeddings`. Finally, it returns the list of embeddings. Returns: The `embed_data` method returns a list of embeddings for the input texts. \"\"\" embeddings = [] for text in texts : embedding = self . get_embeddings ( text ) if embedding is not None : embeddings . append ( embedding ) return embeddings","title":"embed_data"},{"location":"LabeLMaker/Categorize/manyshot.html#LabeLMaker.Categorize.manyshot.ManyshotClassifier.get_embeddings","text":"This function takes a text input, encodes it, truncates it if necessary, and then uses an Azure OpenAI client to embed the truncated text. Parameters: text \u2013 The get_embeddings function takes a text input as a parameter. This text input is then encoded using the self.encoder.encode method. The encoded tokens are then truncated based on the max_context_length and decoded back into text. If the truncated text is empty after stripping, the function Returns: \u2013 The get_embeddings method returns the response from the Azure OpenAI client after encoding and querying the input text. Source code in LabeLMaker/Categorize/manyshot.py 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 def get_embeddings ( self , text ): \"\"\" This function takes a text input, encodes it, truncates it if necessary, and then uses an Azure OpenAI client to embed the truncated text. Args: text: The `get_embeddings` function takes a text input as a parameter. This text input is then encoded using the `self.encoder.encode` method. The encoded tokens are then truncated based on the `max_context_length` and decoded back into text. If the truncated text is empty after stripping, the function Returns: The `get_embeddings` method returns the response from the Azure OpenAI client after encoding and querying the input text. \"\"\" tokens = self . encoder . encode ( text ) truncated_text = self . encoder . decode ( tokens [: self . max_context_length ]) if not truncated_text . strip (): return None # Replace with your Azure OpenAI client code response = self . client . embed_query ( truncated_text ) return response","title":"get_embeddings"},{"location":"LabeLMaker/Categorize/manyshot.html#LabeLMaker.Categorize.manyshot.ManyshotClassifier.predict_unlabeled","text":"The predict_unlabeled function predicts labels for unlabeled text data and provides prediction probabilities and rationales for each prediction. Returns: \u2013 The predict_unlabeled method returns a list of 4-tuples, where each tuple contains the unique ID, text, predicted category, and rationale for the prediction of unlabeled data points. Source code in LabeLMaker/Categorize/manyshot.py 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 def predict_unlabeled ( self ): \"\"\" The `predict_unlabeled` function predicts labels for unlabeled text data and provides prediction probabilities and rationales for each prediction. Returns: The `predict_unlabeled` method returns a list of 4-tuples, where each tuple contains the unique ID, text, predicted category, and rationale for the prediction of unlabeled data points. \"\"\" categorized_results = [] unlabeled_text_embeddings = self . embed_data ( self . normalized_unlabeled_list ) unlabeled_labels = self . model . predict ( unlabeled_text_embeddings ) # Get prediction probabilities for each class for the unlabeled data. prediction_probabilities = self . model . predict_proba ( unlabeled_text_embeddings ) rationales = [] for prob in prediction_probabilities : formatted_probs = [ f \" { cls } : { p : .4f } \" if abs ( p ) >= 1e-4 else f \" { cls } : { p : .4e } \" for cls , p in zip ( self . model . classes_ , prob ) ] rationale = \" \" . join ( formatted_probs ) rationales . append ( rationale ) # Build a 4-tuple for each prediction. # Assuming self.categorization_request.unique_ids exists. for uid , text , category , reason in zip ( self . categorization_request . unique_ids , self . categorization_request . text_to_label , unlabeled_labels , rationales , ): categorized_results . append (( uid , text , category , reason )) return categorized_results","title":"predict_unlabeled"},{"location":"LabeLMaker/Categorize/manyshot.html#LabeLMaker.Categorize.manyshot.ManyshotClassifier.preprocess_data","text":"The preprocess_data function normalizes text data in both unlabeled and labeled examples for categorization. Source code in LabeLMaker/Categorize/manyshot.py 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 def preprocess_data ( self ): \"\"\" The `preprocess_data` function normalizes text data in both unlabeled and labeled examples for categorization. \"\"\" # Unlabeled texts: these come from the full list. self . normalized_unlabeled_list = [ normalize_text ( text ) if isinstance ( text , str ) else text for text in self . categorization_request . text_to_label ] # Normalize the training examples. self . normalized_example_list = [] for example in self . categorization_request . examples : # Handle Example objects if hasattr ( example , \"text_with_label\" ): text_with_label = example . text_with_label # Allow tuple or list (text, label) format elif isinstance ( example , ( tuple , list )) and len ( example ) == 2 : text_with_label = example [ 0 ] else : raise TypeError ( \"Invalid example format. Expected Example object or tuple (text, label).\" ) self . normalized_example_list . append ( normalize_text ( text_with_label ) if isinstance ( text_with_label , str ) else text_with_label )","title":"preprocess_data"},{"location":"LabeLMaker/Categorize/manyshot.html#LabeLMaker.Categorize.manyshot.ManyshotClassifier.process","text":"Process the request by preprocessing data, training the model, and predicting labels for unlabeled text. Returns a list of 4-tuples (uid, text, predicted label, rationale). Source code in LabeLMaker/Categorize/manyshot.py 181 182 183 184 185 186 187 188 189 def process ( self ): \"\"\" Process the request by preprocessing data, training the model, and predicting labels for unlabeled text. Returns a list of 4-tuples (uid, text, predicted label, rationale). \"\"\" self . preprocess_data () self . train_model () return self . predict_unlabeled ()","title":"process"},{"location":"LabeLMaker/Categorize/manyshot.html#LabeLMaker.Categorize.manyshot.ManyshotClassifier.select_model","text":"The select_model function chooses between Nearest Centroid and Multinomial Logistic Regression models based on a minimum class count threshold. Source code in LabeLMaker/Categorize/manyshot.py 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 def select_model ( self ): \"\"\" The `select_model` function chooses between Nearest Centroid and Multinomial Logistic Regression models based on a minimum class count threshold. \"\"\" if self . min_class_count < Config . MIN_LOGISTIC_SAMPLES_PER_CLASS : self . model = NearestCentroid () self . model_name = \"Nearest Centroid\" else : self . model = LogisticRegression ( max_iter = 1000 , penalty = \"elasticnet\" , solver = \"saga\" , n_jobs =- 1 , l1_ratio = 0.5 , multi_class = \"multinomial\" , ) self . model_name = \"Multinomial Logistic Regression\"","title":"select_model"},{"location":"LabeLMaker/Categorize/manyshot.html#LabeLMaker.Categorize.manyshot.ManyshotClassifier.train_model","text":"The train_model function selects a model, extracts labels from examples, trains embeddings, and fits the model with the embeddings and labels. Source code in LabeLMaker/Categorize/manyshot.py 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 def train_model ( self ): \"\"\" The `train_model` function selects a model, extracts labels from examples, trains embeddings, and fits the model with the embeddings and labels. \"\"\" self . select_model () labels = [] for example in self . categorization_request . examples : # Handle Example objects if hasattr ( example , \"label\" ): labels . append ( example . label ) # Handle tuple or list (text, label) elif isinstance ( example , ( tuple , list )) and len ( example ) == 2 : labels . append ( example [ 1 ]) else : raise TypeError ( \"Invalid example format. Expected Example object or tuple (text, label).\" ) self . train_embeddings = self . embed_data ( self . normalized_example_list ) self . model . fit ( self . train_embeddings , labels )","title":"train_model"},{"location":"LabeLMaker/Categorize/zeroshot.html","text":"ZeroShotCategorizer Bases: LabeLMaker Source code in LabeLMaker/Categorize/zeroshot.py 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 class ZeroShotCategorizer ( LabeLMaker ): def __init__ ( self , prompty_path : Path , category_request : CategorizationRequest ): super () . __init__ ( prompty_path , category_request ) def _get_filename ( self ): return \"zeroshot_categorizer_output.txt\" def _get_mime_type ( self ): return \"text/plain\" def _validate_prompt_template ( self , prompt_template ): \"\"\" The function `_validate_prompt_template` checks if mandatory variables for zero-shot prompts are present in a given prompt template. :param prompt_template: It looks like the code snippet you provided is a Python function for validating a prompt template against a list of expected variables. The function checks if certain variables ('item' and 'categories_with_descriptions') are present in the prompt template string \"\"\" # Validate mandatory variables for zero-shot prompts expected_variables = [ \"item\" , \"categories_with_descriptions\" ] for var in expected_variables : if f \" { var } \" not in prompt_template : raise ValueError ( f \"Expected variable {{ var }} not found in the zero-shot prompt template.\" ) def _prepare_prompt_inputs ( self ): \"\"\" The `_prepare_prompt_inputs` function prepares a list of categories with their descriptions, handling different types of categories appropriately. :return: A list of dictionaries containing the category name and description for each category in the categorization request. If a category does not have a description, it will be set to \"No description provided\". \"\"\" categories_with_descriptions = [] for category in self . categorzation_request . categories : if isinstance ( category , Categories ): categories_with_descriptions . append ( { \"category\" : category . name , \"description\" : ( category . description if category . description else \"No description provided\" ), } ) else : raise TypeError ( f \"Expected an instance of Categories, but got { type ( category ) } instead\" ) prompt_inputs = { \"categories_with_descriptions\" : categories_with_descriptions } return prompt_inputs","title":"Zeroshot"},{"location":"LabeLMaker/Categorize/zeroshot.html#LabeLMaker.Categorize.zeroshot.ZeroShotCategorizer","text":"Bases: LabeLMaker Source code in LabeLMaker/Categorize/zeroshot.py 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 class ZeroShotCategorizer ( LabeLMaker ): def __init__ ( self , prompty_path : Path , category_request : CategorizationRequest ): super () . __init__ ( prompty_path , category_request ) def _get_filename ( self ): return \"zeroshot_categorizer_output.txt\" def _get_mime_type ( self ): return \"text/plain\" def _validate_prompt_template ( self , prompt_template ): \"\"\" The function `_validate_prompt_template` checks if mandatory variables for zero-shot prompts are present in a given prompt template. :param prompt_template: It looks like the code snippet you provided is a Python function for validating a prompt template against a list of expected variables. The function checks if certain variables ('item' and 'categories_with_descriptions') are present in the prompt template string \"\"\" # Validate mandatory variables for zero-shot prompts expected_variables = [ \"item\" , \"categories_with_descriptions\" ] for var in expected_variables : if f \" { var } \" not in prompt_template : raise ValueError ( f \"Expected variable {{ var }} not found in the zero-shot prompt template.\" ) def _prepare_prompt_inputs ( self ): \"\"\" The `_prepare_prompt_inputs` function prepares a list of categories with their descriptions, handling different types of categories appropriately. :return: A list of dictionaries containing the category name and description for each category in the categorization request. If a category does not have a description, it will be set to \"No description provided\". \"\"\" categories_with_descriptions = [] for category in self . categorzation_request . categories : if isinstance ( category , Categories ): categories_with_descriptions . append ( { \"category\" : category . name , \"description\" : ( category . description if category . description else \"No description provided\" ), } ) else : raise TypeError ( f \"Expected an instance of Categories, but got { type ( category ) } instead\" ) prompt_inputs = { \"categories_with_descriptions\" : categories_with_descriptions } return prompt_inputs","title":"ZeroShotCategorizer"},{"location":"LabeLMaker/Evaluate/confidence_intervals.html","text":"The code defines functions to compute performance metric values and their bootstrap-based confidence intervals for classification tasks. :param y_true: y_true refers to the true labels in a classification task. It is an array-like object containing the actual class labels for the data points. In the provided example, y_true_example is a list of true labels for a set of observations, where each label corresponds to a specific class :param y_pred: The y_pred parameter represents the predicted labels for your classification task. It should be an array-like object containing the predicted labels for each corresponding sample in y_true . In the provided example usage, y_pred_example is a list of predicted labels for the dummy data samples :param score_func: The score_func parameter in the bootstrap_metric function is a callable function that computes a specific metric (e.g., accuracy, precision, recall, F1 score) based on the true labels ( y_true ) and predicted labels ( y_pred ). It allows you to pass different scoring functions :param n_bootstraps: The n_bootstraps parameter in the provided code refers to the number of bootstrap iterations to perform when estimating the confidence intervals for the performance metrics. It determines how many times the bootstrap resampling process will be repeated to calculate the mean score and confidence intervals for each metric, defaults to 1000 (optional) :param alpha: The alpha parameter in the provided code represents the significance level used to calculate the confidence intervals. In statistical hypothesis testing and confidence interval construction, the significance level is the probability of rejecting the null hypothesis when it is true :return: The compute_bootstrap_confidence_intervals function returns a dictionary containing performance metric values (Accuracy, Precision, Recall, and F1 Score) along with their corresponding bootstrap mean and 95% confidence intervals. Each metric in the dictionary has the following structure: bootstrap_metric ( y_true , y_pred , score_func , n_bootstraps = 1000 , alpha = 0.05 , ** kwargs ) Computes the bootstrap distribution for a given metric. Parameters: y_true ( array - like ) \u2013 True labels. y_pred ( array - like ) \u2013 Predicted labels. score_func ( callable ) \u2013 Function to compute the metric. n_bootstraps ( int , default: 1000 ) \u2013 Number of bootstrap samples. alpha ( float , default: 0.05 ) \u2013 Significance level (for a 95% CI, alpha=0.05). **kwargs \u2013 Additional arguments to pass to score_func. Returns: mean_score ( float ) \u2013 Mean score from bootstrap samples. ci ( tuple ) \u2013 (lower bound, upper bound) as the confidence interval. Source code in LabeLMaker/Evaluate/confidence_intervals.py 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 def bootstrap_metric ( y_true , y_pred , score_func , n_bootstraps = 1000 , alpha = 0.05 , ** kwargs ): \"\"\" Computes the bootstrap distribution for a given metric. Parameters: y_true (array-like): True labels. y_pred (array-like): Predicted labels. score_func (callable): Function to compute the metric. n_bootstraps (int): Number of bootstrap samples. alpha (float): Significance level (for a 95% CI, alpha=0.05). **kwargs: Additional arguments to pass to score_func. Returns: mean_score (float): Mean score from bootstrap samples. ci (tuple): (lower bound, upper bound) as the confidence interval. \"\"\" scores = [] y_true = np . array ( y_true ) y_pred = np . array ( y_pred ) n = len ( y_true ) for i in range ( n_bootstraps ): # sample indices with replacement indices = np . random . choice ( n , n , replace = True ) sample_y_true = y_true [ indices ] sample_y_pred = y_pred [ indices ] score = score_func ( sample_y_true , sample_y_pred , ** kwargs ) scores . append ( score ) # Compute percentile bounds for the desired confidence level lower = np . percentile ( scores , 100 * ( alpha / 2 )) upper = np . percentile ( scores , 100 * ( 1 - alpha / 2 )) mean_score = np . mean ( scores ) return mean_score , ( lower , upper ) compute_bootstrap_confidence_intervals ( y_true , y_pred , n_bootstraps = 1000 , alpha = 0.05 ) Computes performance metric values (accuracy, macro precision, recall, and F1) along with their bootstrap-based 95% confidence intervals. Parameters: y_true ( array - like ) \u2013 True labels. y_pred ( array - like ) \u2013 Predicted labels. n_bootstraps ( int , default: 1000 ) \u2013 Number of bootstrap iterations. alpha ( float , default: 0.05 ) \u2013 Significance level. Returns: results ( dict ) \u2013 Dictionary mapping each metric to its value, bootstrap mean, and 95% CI. Source code in LabeLMaker/Evaluate/confidence_intervals.py 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 def compute_bootstrap_confidence_intervals ( y_true , y_pred , n_bootstraps = 1000 , alpha = 0.05 ): \"\"\" Computes performance metric values (accuracy, macro precision, recall, and F1) along with their bootstrap-based 95% confidence intervals. Parameters: y_true (array-like): True labels. y_pred (array-like): Predicted labels. n_bootstraps (int): Number of bootstrap iterations. alpha (float): Significance level. Returns: results (dict): Dictionary mapping each metric to its value, bootstrap mean, and 95% CI. \"\"\" results = {} # Use macro-average for multiclass metrics. metrics = { \"Accuracy\" : accuracy_score , \"Precision\" : lambda yt , yp : precision_score ( yt , yp , average = \"macro\" , zero_division = 0 ), \"Recall\" : lambda yt , yp : recall_score ( yt , yp , average = \"macro\" , zero_division = 0 ), \"F1 Score\" : lambda yt , yp : f1_score ( yt , yp , average = \"macro\" , zero_division = 0 ), } # Compute values on full dataset and bootstrap estimates for metric_name , func in metrics . items (): full_value = func ( y_true , y_pred ) bs_mean , ci = bootstrap_metric ( y_true , y_pred , func , n_bootstraps = n_bootstraps , alpha = alpha ) results [ metric_name ] = { \"Value\" : full_value , \"Bootstrap Mean\" : bs_mean , \"95% CI\" : ci } return results","title":"Confidence Intervals"},{"location":"LabeLMaker/Evaluate/confidence_intervals.html#LabeLMaker.Evaluate.confidence_intervals.bootstrap_metric","text":"Computes the bootstrap distribution for a given metric. Parameters: y_true ( array - like ) \u2013 True labels. y_pred ( array - like ) \u2013 Predicted labels. score_func ( callable ) \u2013 Function to compute the metric. n_bootstraps ( int , default: 1000 ) \u2013 Number of bootstrap samples. alpha ( float , default: 0.05 ) \u2013 Significance level (for a 95% CI, alpha=0.05). **kwargs \u2013 Additional arguments to pass to score_func. Returns: mean_score ( float ) \u2013 Mean score from bootstrap samples. ci ( tuple ) \u2013 (lower bound, upper bound) as the confidence interval. Source code in LabeLMaker/Evaluate/confidence_intervals.py 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 def bootstrap_metric ( y_true , y_pred , score_func , n_bootstraps = 1000 , alpha = 0.05 , ** kwargs ): \"\"\" Computes the bootstrap distribution for a given metric. Parameters: y_true (array-like): True labels. y_pred (array-like): Predicted labels. score_func (callable): Function to compute the metric. n_bootstraps (int): Number of bootstrap samples. alpha (float): Significance level (for a 95% CI, alpha=0.05). **kwargs: Additional arguments to pass to score_func. Returns: mean_score (float): Mean score from bootstrap samples. ci (tuple): (lower bound, upper bound) as the confidence interval. \"\"\" scores = [] y_true = np . array ( y_true ) y_pred = np . array ( y_pred ) n = len ( y_true ) for i in range ( n_bootstraps ): # sample indices with replacement indices = np . random . choice ( n , n , replace = True ) sample_y_true = y_true [ indices ] sample_y_pred = y_pred [ indices ] score = score_func ( sample_y_true , sample_y_pred , ** kwargs ) scores . append ( score ) # Compute percentile bounds for the desired confidence level lower = np . percentile ( scores , 100 * ( alpha / 2 )) upper = np . percentile ( scores , 100 * ( 1 - alpha / 2 )) mean_score = np . mean ( scores ) return mean_score , ( lower , upper )","title":"bootstrap_metric"},{"location":"LabeLMaker/Evaluate/confidence_intervals.html#LabeLMaker.Evaluate.confidence_intervals.compute_bootstrap_confidence_intervals","text":"Computes performance metric values (accuracy, macro precision, recall, and F1) along with their bootstrap-based 95% confidence intervals. Parameters: y_true ( array - like ) \u2013 True labels. y_pred ( array - like ) \u2013 Predicted labels. n_bootstraps ( int , default: 1000 ) \u2013 Number of bootstrap iterations. alpha ( float , default: 0.05 ) \u2013 Significance level. Returns: results ( dict ) \u2013 Dictionary mapping each metric to its value, bootstrap mean, and 95% CI. Source code in LabeLMaker/Evaluate/confidence_intervals.py 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 def compute_bootstrap_confidence_intervals ( y_true , y_pred , n_bootstraps = 1000 , alpha = 0.05 ): \"\"\" Computes performance metric values (accuracy, macro precision, recall, and F1) along with their bootstrap-based 95% confidence intervals. Parameters: y_true (array-like): True labels. y_pred (array-like): Predicted labels. n_bootstraps (int): Number of bootstrap iterations. alpha (float): Significance level. Returns: results (dict): Dictionary mapping each metric to its value, bootstrap mean, and 95% CI. \"\"\" results = {} # Use macro-average for multiclass metrics. metrics = { \"Accuracy\" : accuracy_score , \"Precision\" : lambda yt , yp : precision_score ( yt , yp , average = \"macro\" , zero_division = 0 ), \"Recall\" : lambda yt , yp : recall_score ( yt , yp , average = \"macro\" , zero_division = 0 ), \"F1 Score\" : lambda yt , yp : f1_score ( yt , yp , average = \"macro\" , zero_division = 0 ), } # Compute values on full dataset and bootstrap estimates for metric_name , func in metrics . items (): full_value = func ( y_true , y_pred ) bs_mean , ci = bootstrap_metric ( y_true , y_pred , func , n_bootstraps = n_bootstraps , alpha = alpha ) results [ metric_name ] = { \"Value\" : full_value , \"Bootstrap Mean\" : bs_mean , \"95% CI\" : ci } return results","title":"compute_bootstrap_confidence_intervals"},{"location":"LabeLMaker/Evaluate/data_loader.html","text":"DataLoader Source code in LabeLMaker/Evaluate/data_loader.py 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 class DataLoader : def __init__ ( self , file : Optional [ str ] = None , dataframe : Optional [ pd . DataFrame ] = None ) -> None : \"\"\" Initializes the DataLoader with a file path or an existing DataFrame. Parameters: file (str, optional): Path to the CSV file to load. dataframe (pd.DataFrame, optional): An existing DataFrame. Raises: ValueError: If neither file nor dataframe is provided. \"\"\" if file is not None : self . df = self . load_csv_file ( file ) elif dataframe is not None : self . df = dataframe else : raise ValueError ( \"Either 'file' or 'dataframe' must be provided.\" ) def load_csv_file ( self , file : str ) -> pd . DataFrame : \"\"\" Loads a CSV file into a pandas DataFrame. Parameters: file (str): Path to the CSV file. Returns: pd.DataFrame: Loaded DataFrame. \"\"\" return pd . read_csv ( file , encoding = \"utf-8\" ) def preprocess_text_columns ( self , columns : List [ str ]) -> \"DataLoader\" : \"\"\" Preprocesses text columns by stripping whitespace and converting to lowercase. Parameters: columns (List[str]): List of column names to preprocess. Returns: DataLoader: Returns self for method chaining. \"\"\" for col in columns : self . df [ col ] = self . df [ col ] . astype ( str ) . str . strip () . str . lower () return self def drop_duplicates ( self , subset : List [ str ], keep : str = \"first\" ) -> \"DataLoader\" : \"\"\" Drops duplicate rows based on specified columns. Parameters: subset (List[str]): Columns to consider for identifying duplicates. keep (str, optional): Which duplicates to keep ('first', 'last', or False). Returns: DataLoader: Returns self for method chaining. \"\"\" self . df = self . df . drop_duplicates ( subset = subset , keep = keep ) return self __init__ ( file = None , dataframe = None ) Initializes the DataLoader with a file path or an existing DataFrame. Parameters: file ( str , default: None ) \u2013 Path to the CSV file to load. dataframe ( DataFrame , default: None ) \u2013 An existing DataFrame. Raises: ValueError \u2013 If neither file nor dataframe is provided. Source code in LabeLMaker/Evaluate/data_loader.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 def __init__ ( self , file : Optional [ str ] = None , dataframe : Optional [ pd . DataFrame ] = None ) -> None : \"\"\" Initializes the DataLoader with a file path or an existing DataFrame. Parameters: file (str, optional): Path to the CSV file to load. dataframe (pd.DataFrame, optional): An existing DataFrame. Raises: ValueError: If neither file nor dataframe is provided. \"\"\" if file is not None : self . df = self . load_csv_file ( file ) elif dataframe is not None : self . df = dataframe else : raise ValueError ( \"Either 'file' or 'dataframe' must be provided.\" ) drop_duplicates ( subset , keep = 'first' ) Drops duplicate rows based on specified columns. Parameters: subset ( List [ str ] ) \u2013 Columns to consider for identifying duplicates. keep ( str , default: 'first' ) \u2013 Which duplicates to keep ('first', 'last', or False). Returns: DataLoader ( DataLoader ) \u2013 Returns self for method chaining. Source code in LabeLMaker/Evaluate/data_loader.py 54 55 56 57 58 59 60 61 62 63 64 65 66 def drop_duplicates ( self , subset : List [ str ], keep : str = \"first\" ) -> \"DataLoader\" : \"\"\" Drops duplicate rows based on specified columns. Parameters: subset (List[str]): Columns to consider for identifying duplicates. keep (str, optional): Which duplicates to keep ('first', 'last', or False). Returns: DataLoader: Returns self for method chaining. \"\"\" self . df = self . df . drop_duplicates ( subset = subset , keep = keep ) return self load_csv_file ( file ) Loads a CSV file into a pandas DataFrame. Parameters: file ( str ) \u2013 Path to the CSV file. Returns: DataFrame \u2013 pd.DataFrame: Loaded DataFrame. Source code in LabeLMaker/Evaluate/data_loader.py 28 29 30 31 32 33 34 35 36 37 38 def load_csv_file ( self , file : str ) -> pd . DataFrame : \"\"\" Loads a CSV file into a pandas DataFrame. Parameters: file (str): Path to the CSV file. Returns: pd.DataFrame: Loaded DataFrame. \"\"\" return pd . read_csv ( file , encoding = \"utf-8\" ) preprocess_text_columns ( columns ) Preprocesses text columns by stripping whitespace and converting to lowercase. Parameters: columns ( List [ str ] ) \u2013 List of column names to preprocess. Returns: DataLoader ( DataLoader ) \u2013 Returns self for method chaining. Source code in LabeLMaker/Evaluate/data_loader.py 40 41 42 43 44 45 46 47 48 49 50 51 52 def preprocess_text_columns ( self , columns : List [ str ]) -> \"DataLoader\" : \"\"\" Preprocesses text columns by stripping whitespace and converting to lowercase. Parameters: columns (List[str]): List of column names to preprocess. Returns: DataLoader: Returns self for method chaining. \"\"\" for col in columns : self . df [ col ] = self . df [ col ] . astype ( str ) . str . strip () . str . lower () return self","title":"Data Loader"},{"location":"LabeLMaker/Evaluate/data_loader.html#LabeLMaker.Evaluate.data_loader.DataLoader","text":"Source code in LabeLMaker/Evaluate/data_loader.py 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 class DataLoader : def __init__ ( self , file : Optional [ str ] = None , dataframe : Optional [ pd . DataFrame ] = None ) -> None : \"\"\" Initializes the DataLoader with a file path or an existing DataFrame. Parameters: file (str, optional): Path to the CSV file to load. dataframe (pd.DataFrame, optional): An existing DataFrame. Raises: ValueError: If neither file nor dataframe is provided. \"\"\" if file is not None : self . df = self . load_csv_file ( file ) elif dataframe is not None : self . df = dataframe else : raise ValueError ( \"Either 'file' or 'dataframe' must be provided.\" ) def load_csv_file ( self , file : str ) -> pd . DataFrame : \"\"\" Loads a CSV file into a pandas DataFrame. Parameters: file (str): Path to the CSV file. Returns: pd.DataFrame: Loaded DataFrame. \"\"\" return pd . read_csv ( file , encoding = \"utf-8\" ) def preprocess_text_columns ( self , columns : List [ str ]) -> \"DataLoader\" : \"\"\" Preprocesses text columns by stripping whitespace and converting to lowercase. Parameters: columns (List[str]): List of column names to preprocess. Returns: DataLoader: Returns self for method chaining. \"\"\" for col in columns : self . df [ col ] = self . df [ col ] . astype ( str ) . str . strip () . str . lower () return self def drop_duplicates ( self , subset : List [ str ], keep : str = \"first\" ) -> \"DataLoader\" : \"\"\" Drops duplicate rows based on specified columns. Parameters: subset (List[str]): Columns to consider for identifying duplicates. keep (str, optional): Which duplicates to keep ('first', 'last', or False). Returns: DataLoader: Returns self for method chaining. \"\"\" self . df = self . df . drop_duplicates ( subset = subset , keep = keep ) return self","title":"DataLoader"},{"location":"LabeLMaker/Evaluate/data_loader.html#LabeLMaker.Evaluate.data_loader.DataLoader.__init__","text":"Initializes the DataLoader with a file path or an existing DataFrame. Parameters: file ( str , default: None ) \u2013 Path to the CSV file to load. dataframe ( DataFrame , default: None ) \u2013 An existing DataFrame. Raises: ValueError \u2013 If neither file nor dataframe is provided. Source code in LabeLMaker/Evaluate/data_loader.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 def __init__ ( self , file : Optional [ str ] = None , dataframe : Optional [ pd . DataFrame ] = None ) -> None : \"\"\" Initializes the DataLoader with a file path or an existing DataFrame. Parameters: file (str, optional): Path to the CSV file to load. dataframe (pd.DataFrame, optional): An existing DataFrame. Raises: ValueError: If neither file nor dataframe is provided. \"\"\" if file is not None : self . df = self . load_csv_file ( file ) elif dataframe is not None : self . df = dataframe else : raise ValueError ( \"Either 'file' or 'dataframe' must be provided.\" )","title":"__init__"},{"location":"LabeLMaker/Evaluate/data_loader.html#LabeLMaker.Evaluate.data_loader.DataLoader.drop_duplicates","text":"Drops duplicate rows based on specified columns. Parameters: subset ( List [ str ] ) \u2013 Columns to consider for identifying duplicates. keep ( str , default: 'first' ) \u2013 Which duplicates to keep ('first', 'last', or False). Returns: DataLoader ( DataLoader ) \u2013 Returns self for method chaining. Source code in LabeLMaker/Evaluate/data_loader.py 54 55 56 57 58 59 60 61 62 63 64 65 66 def drop_duplicates ( self , subset : List [ str ], keep : str = \"first\" ) -> \"DataLoader\" : \"\"\" Drops duplicate rows based on specified columns. Parameters: subset (List[str]): Columns to consider for identifying duplicates. keep (str, optional): Which duplicates to keep ('first', 'last', or False). Returns: DataLoader: Returns self for method chaining. \"\"\" self . df = self . df . drop_duplicates ( subset = subset , keep = keep ) return self","title":"drop_duplicates"},{"location":"LabeLMaker/Evaluate/data_loader.html#LabeLMaker.Evaluate.data_loader.DataLoader.load_csv_file","text":"Loads a CSV file into a pandas DataFrame. Parameters: file ( str ) \u2013 Path to the CSV file. Returns: DataFrame \u2013 pd.DataFrame: Loaded DataFrame. Source code in LabeLMaker/Evaluate/data_loader.py 28 29 30 31 32 33 34 35 36 37 38 def load_csv_file ( self , file : str ) -> pd . DataFrame : \"\"\" Loads a CSV file into a pandas DataFrame. Parameters: file (str): Path to the CSV file. Returns: pd.DataFrame: Loaded DataFrame. \"\"\" return pd . read_csv ( file , encoding = \"utf-8\" )","title":"load_csv_file"},{"location":"LabeLMaker/Evaluate/data_loader.html#LabeLMaker.Evaluate.data_loader.DataLoader.preprocess_text_columns","text":"Preprocesses text columns by stripping whitespace and converting to lowercase. Parameters: columns ( List [ str ] ) \u2013 List of column names to preprocess. Returns: DataLoader ( DataLoader ) \u2013 Returns self for method chaining. Source code in LabeLMaker/Evaluate/data_loader.py 40 41 42 43 44 45 46 47 48 49 50 51 52 def preprocess_text_columns ( self , columns : List [ str ]) -> \"DataLoader\" : \"\"\" Preprocesses text columns by stripping whitespace and converting to lowercase. Parameters: columns (List[str]): List of column names to preprocess. Returns: DataLoader: Returns self for method chaining. \"\"\" for col in columns : self . df [ col ] = self . df [ col ] . astype ( str ) . str . strip () . str . lower () return self","title":"preprocess_text_columns"},{"location":"LabeLMaker/Evaluate/evaluator.html","text":"The Evaluator class in Python calculates and displays evaluation metrics such as accuracy, precision, recall, F1 score, confusion matrix, and classification report for classification tasks. Evaluator This Python class Evaluator provides methods to calculate and display evaluation metrics for classification tasks, including precision, recall, F1 score, accuracy, confusion matrix, and classification report. Source code in LabeLMaker/Evaluate/evaluator.py 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 class Evaluator : \"\"\" This Python class `Evaluator` provides methods to calculate and display evaluation metrics for classification tasks, including precision, recall, F1 score, accuracy, confusion matrix, and classification report. \"\"\" def __init__ ( self , y_true : List , y_pred : List ) -> None : \"\"\" Initializes the Evaluator with true and predicted labels. Parameters: y_true (List): Ground truth labels. y_pred (List): Predicted labels. \"\"\" self . y_true = y_true self . y_pred = y_pred self . metrics : Dict [ str , Any ] = {} @staticmethod def _format_numeric ( value : Any ) -> Any : \"\"\" Format a numeric value to 5 significant figures. If the value is not numeric, it is returned unchanged. \"\"\" if isinstance ( value , ( int , float )): # Convert to float and then format. return float ( format ( value , \".4g\" )) return value @classmethod def _format_dict ( cls , d : Dict [ Any , Any ]) -> Dict [ Any , Any ]: \"\"\" Recursively format all numeric entries in a dictionary to 5 significant figures. \"\"\" formatted = {} for k , v in d . items (): if isinstance ( v , dict ): # Recursively process nested dictionaries. formatted [ k ] = cls . _format_dict ( v ) else : formatted [ k ] = cls . _format_numeric ( v ) return formatted def calculate_metrics ( self , average_options : Optional [ List [ str ]] = None ) -> Dict [ str , Any ]: \"\"\" Calculates evaluation metrics. Parameters: average_options (List[str], optional): Averaging methods (e.g., ['macro', 'weighted']). Returns: Dict[str, Any]: Dictionary of calculated metrics. \"\"\" if average_options is None : average_options = [ \"macro\" , \"weighted\" ] # Calculate and format accuracy. self . metrics [ \"Accuracy\" ] = self . _format_numeric ( accuracy_score ( self . y_true , self . y_pred )) # Calculate precision, recall, and f1 scores for each averaging option. for avg in average_options : self . metrics [ f \"Precision ( { avg } )\" ] = self . _format_numeric ( precision_score ( self . y_true , self . y_pred , average = avg , zero_division = 0 ) ) self . metrics [ f \"Recall ( { avg } )\" ] = self . _format_numeric ( recall_score ( self . y_true , self . y_pred , average = avg , zero_division = 0 ) ) self . metrics [ f \"F1 Score ( { avg } )\" ] = self . _format_numeric ( f1_score ( self . y_true , self . y_pred , average = avg , zero_division = 0 ) ) # Compute and save the confusion matrix without formatting. self . metrics [ \"Confusion Matrix\" ] = confusion_matrix ( self . y_true , self . y_pred ) # Compute and then recursively format the classification report. raw_report = classification_report ( self . y_true , self . y_pred , output_dict = True , zero_division = 0 ) self . metrics [ \"Classification Report\" ] = self . _format_dict ( raw_report ) return self . metrics def display_metrics ( self ) -> pd . DataFrame : \"\"\" Returns calculated metrics as a DataFrame. \"\"\" metrics_to_display = { k : v for k , v in self . metrics . items () if k not in [ \"Confusion Matrix\" , \"Classification Report\" ] } df = pd . DataFrame ( list ( metrics_to_display . items ()), columns = [ \"Metric\" , \"Value\" ]) return df def plot_confusion_matrix ( self , class_labels : Optional [ List [ str ]] = None ) -> plt . Figure : \"\"\" Plots the confusion matrix. Parameters: class_labels (List[str], optional): Labels for the classes. Raises: ValueError: If confusion matrix is not calculated. \"\"\" cm = self . metrics . get ( \"Confusion Matrix\" ) if cm is None : raise ValueError ( \"Confusion Matrix not calculated. Call calculate_metrics() first.\" ) if class_labels is None : class_labels = sorted ( set ( self . y_true ) | set ( self . y_pred )) fig , ax = plt . subplots ( figsize = ( 8 , 6 )) sns . heatmap ( cm , annot = True , fmt = \"d\" , cmap = \"Blues\" , xticklabels = class_labels , yticklabels = class_labels , ax = ax , ) ax . set_title ( \"Confusion Matrix\" ) ax . set_xlabel ( \"Predicted Label\" ) ax . set_ylabel ( \"True Label\" ) plt . close ( fig ) # Close the figure to prevent it from displaying automatically return fig __init__ ( y_true , y_pred ) Initializes the Evaluator with true and predicted labels. Parameters: y_true (List): Ground truth labels. y_pred (List): Predicted labels. Source code in LabeLMaker/Evaluate/evaluator.py 27 28 29 30 31 32 33 34 35 36 def __init__ ( self , y_true : List , y_pred : List ) -> None : \"\"\" Initializes the Evaluator with true and predicted labels. Parameters: y_true (List): Ground truth labels. y_pred (List): Predicted labels. \"\"\" self . y_true = y_true self . y_pred = y_pred self . metrics : Dict [ str , Any ] = {} calculate_metrics ( average_options = None ) Calculates evaluation metrics. Parameters: average_options (List[str], optional): Averaging methods (e.g., ['macro', 'weighted']). Returns: Dict[str, Any]: Dictionary of calculated metrics. Source code in LabeLMaker/Evaluate/evaluator.py 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 def calculate_metrics ( self , average_options : Optional [ List [ str ]] = None ) -> Dict [ str , Any ]: \"\"\" Calculates evaluation metrics. Parameters: average_options (List[str], optional): Averaging methods (e.g., ['macro', 'weighted']). Returns: Dict[str, Any]: Dictionary of calculated metrics. \"\"\" if average_options is None : average_options = [ \"macro\" , \"weighted\" ] # Calculate and format accuracy. self . metrics [ \"Accuracy\" ] = self . _format_numeric ( accuracy_score ( self . y_true , self . y_pred )) # Calculate precision, recall, and f1 scores for each averaging option. for avg in average_options : self . metrics [ f \"Precision ( { avg } )\" ] = self . _format_numeric ( precision_score ( self . y_true , self . y_pred , average = avg , zero_division = 0 ) ) self . metrics [ f \"Recall ( { avg } )\" ] = self . _format_numeric ( recall_score ( self . y_true , self . y_pred , average = avg , zero_division = 0 ) ) self . metrics [ f \"F1 Score ( { avg } )\" ] = self . _format_numeric ( f1_score ( self . y_true , self . y_pred , average = avg , zero_division = 0 ) ) # Compute and save the confusion matrix without formatting. self . metrics [ \"Confusion Matrix\" ] = confusion_matrix ( self . y_true , self . y_pred ) # Compute and then recursively format the classification report. raw_report = classification_report ( self . y_true , self . y_pred , output_dict = True , zero_division = 0 ) self . metrics [ \"Classification Report\" ] = self . _format_dict ( raw_report ) return self . metrics display_metrics () Returns calculated metrics as a DataFrame. Source code in LabeLMaker/Evaluate/evaluator.py 101 102 103 104 105 106 107 108 109 110 111 def display_metrics ( self ) -> pd . DataFrame : \"\"\" Returns calculated metrics as a DataFrame. \"\"\" metrics_to_display = { k : v for k , v in self . metrics . items () if k not in [ \"Confusion Matrix\" , \"Classification Report\" ] } df = pd . DataFrame ( list ( metrics_to_display . items ()), columns = [ \"Metric\" , \"Value\" ]) return df plot_confusion_matrix ( class_labels = None ) Plots the confusion matrix. Parameters: class_labels (List[str], optional): Labels for the classes. Raises: ValueError: If confusion matrix is not calculated. Source code in LabeLMaker/Evaluate/evaluator.py 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 def plot_confusion_matrix ( self , class_labels : Optional [ List [ str ]] = None ) -> plt . Figure : \"\"\" Plots the confusion matrix. Parameters: class_labels (List[str], optional): Labels for the classes. Raises: ValueError: If confusion matrix is not calculated. \"\"\" cm = self . metrics . get ( \"Confusion Matrix\" ) if cm is None : raise ValueError ( \"Confusion Matrix not calculated. Call calculate_metrics() first.\" ) if class_labels is None : class_labels = sorted ( set ( self . y_true ) | set ( self . y_pred )) fig , ax = plt . subplots ( figsize = ( 8 , 6 )) sns . heatmap ( cm , annot = True , fmt = \"d\" , cmap = \"Blues\" , xticklabels = class_labels , yticklabels = class_labels , ax = ax , ) ax . set_title ( \"Confusion Matrix\" ) ax . set_xlabel ( \"Predicted Label\" ) ax . set_ylabel ( \"True Label\" ) plt . close ( fig ) # Close the figure to prevent it from displaying automatically return fig","title":"Evaluator"},{"location":"LabeLMaker/Evaluate/evaluator.html#LabeLMaker.Evaluate.evaluator.Evaluator","text":"This Python class Evaluator provides methods to calculate and display evaluation metrics for classification tasks, including precision, recall, F1 score, accuracy, confusion matrix, and classification report. Source code in LabeLMaker/Evaluate/evaluator.py 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 class Evaluator : \"\"\" This Python class `Evaluator` provides methods to calculate and display evaluation metrics for classification tasks, including precision, recall, F1 score, accuracy, confusion matrix, and classification report. \"\"\" def __init__ ( self , y_true : List , y_pred : List ) -> None : \"\"\" Initializes the Evaluator with true and predicted labels. Parameters: y_true (List): Ground truth labels. y_pred (List): Predicted labels. \"\"\" self . y_true = y_true self . y_pred = y_pred self . metrics : Dict [ str , Any ] = {} @staticmethod def _format_numeric ( value : Any ) -> Any : \"\"\" Format a numeric value to 5 significant figures. If the value is not numeric, it is returned unchanged. \"\"\" if isinstance ( value , ( int , float )): # Convert to float and then format. return float ( format ( value , \".4g\" )) return value @classmethod def _format_dict ( cls , d : Dict [ Any , Any ]) -> Dict [ Any , Any ]: \"\"\" Recursively format all numeric entries in a dictionary to 5 significant figures. \"\"\" formatted = {} for k , v in d . items (): if isinstance ( v , dict ): # Recursively process nested dictionaries. formatted [ k ] = cls . _format_dict ( v ) else : formatted [ k ] = cls . _format_numeric ( v ) return formatted def calculate_metrics ( self , average_options : Optional [ List [ str ]] = None ) -> Dict [ str , Any ]: \"\"\" Calculates evaluation metrics. Parameters: average_options (List[str], optional): Averaging methods (e.g., ['macro', 'weighted']). Returns: Dict[str, Any]: Dictionary of calculated metrics. \"\"\" if average_options is None : average_options = [ \"macro\" , \"weighted\" ] # Calculate and format accuracy. self . metrics [ \"Accuracy\" ] = self . _format_numeric ( accuracy_score ( self . y_true , self . y_pred )) # Calculate precision, recall, and f1 scores for each averaging option. for avg in average_options : self . metrics [ f \"Precision ( { avg } )\" ] = self . _format_numeric ( precision_score ( self . y_true , self . y_pred , average = avg , zero_division = 0 ) ) self . metrics [ f \"Recall ( { avg } )\" ] = self . _format_numeric ( recall_score ( self . y_true , self . y_pred , average = avg , zero_division = 0 ) ) self . metrics [ f \"F1 Score ( { avg } )\" ] = self . _format_numeric ( f1_score ( self . y_true , self . y_pred , average = avg , zero_division = 0 ) ) # Compute and save the confusion matrix without formatting. self . metrics [ \"Confusion Matrix\" ] = confusion_matrix ( self . y_true , self . y_pred ) # Compute and then recursively format the classification report. raw_report = classification_report ( self . y_true , self . y_pred , output_dict = True , zero_division = 0 ) self . metrics [ \"Classification Report\" ] = self . _format_dict ( raw_report ) return self . metrics def display_metrics ( self ) -> pd . DataFrame : \"\"\" Returns calculated metrics as a DataFrame. \"\"\" metrics_to_display = { k : v for k , v in self . metrics . items () if k not in [ \"Confusion Matrix\" , \"Classification Report\" ] } df = pd . DataFrame ( list ( metrics_to_display . items ()), columns = [ \"Metric\" , \"Value\" ]) return df def plot_confusion_matrix ( self , class_labels : Optional [ List [ str ]] = None ) -> plt . Figure : \"\"\" Plots the confusion matrix. Parameters: class_labels (List[str], optional): Labels for the classes. Raises: ValueError: If confusion matrix is not calculated. \"\"\" cm = self . metrics . get ( \"Confusion Matrix\" ) if cm is None : raise ValueError ( \"Confusion Matrix not calculated. Call calculate_metrics() first.\" ) if class_labels is None : class_labels = sorted ( set ( self . y_true ) | set ( self . y_pred )) fig , ax = plt . subplots ( figsize = ( 8 , 6 )) sns . heatmap ( cm , annot = True , fmt = \"d\" , cmap = \"Blues\" , xticklabels = class_labels , yticklabels = class_labels , ax = ax , ) ax . set_title ( \"Confusion Matrix\" ) ax . set_xlabel ( \"Predicted Label\" ) ax . set_ylabel ( \"True Label\" ) plt . close ( fig ) # Close the figure to prevent it from displaying automatically return fig","title":"Evaluator"},{"location":"LabeLMaker/Evaluate/evaluator.html#LabeLMaker.Evaluate.evaluator.Evaluator.__init__","text":"Initializes the Evaluator with true and predicted labels. Parameters: y_true (List): Ground truth labels. y_pred (List): Predicted labels. Source code in LabeLMaker/Evaluate/evaluator.py 27 28 29 30 31 32 33 34 35 36 def __init__ ( self , y_true : List , y_pred : List ) -> None : \"\"\" Initializes the Evaluator with true and predicted labels. Parameters: y_true (List): Ground truth labels. y_pred (List): Predicted labels. \"\"\" self . y_true = y_true self . y_pred = y_pred self . metrics : Dict [ str , Any ] = {}","title":"__init__"},{"location":"LabeLMaker/Evaluate/evaluator.html#LabeLMaker.Evaluate.evaluator.Evaluator.calculate_metrics","text":"Calculates evaluation metrics. Parameters: average_options (List[str], optional): Averaging methods (e.g., ['macro', 'weighted']). Returns: Dict[str, Any]: Dictionary of calculated metrics. Source code in LabeLMaker/Evaluate/evaluator.py 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 def calculate_metrics ( self , average_options : Optional [ List [ str ]] = None ) -> Dict [ str , Any ]: \"\"\" Calculates evaluation metrics. Parameters: average_options (List[str], optional): Averaging methods (e.g., ['macro', 'weighted']). Returns: Dict[str, Any]: Dictionary of calculated metrics. \"\"\" if average_options is None : average_options = [ \"macro\" , \"weighted\" ] # Calculate and format accuracy. self . metrics [ \"Accuracy\" ] = self . _format_numeric ( accuracy_score ( self . y_true , self . y_pred )) # Calculate precision, recall, and f1 scores for each averaging option. for avg in average_options : self . metrics [ f \"Precision ( { avg } )\" ] = self . _format_numeric ( precision_score ( self . y_true , self . y_pred , average = avg , zero_division = 0 ) ) self . metrics [ f \"Recall ( { avg } )\" ] = self . _format_numeric ( recall_score ( self . y_true , self . y_pred , average = avg , zero_division = 0 ) ) self . metrics [ f \"F1 Score ( { avg } )\" ] = self . _format_numeric ( f1_score ( self . y_true , self . y_pred , average = avg , zero_division = 0 ) ) # Compute and save the confusion matrix without formatting. self . metrics [ \"Confusion Matrix\" ] = confusion_matrix ( self . y_true , self . y_pred ) # Compute and then recursively format the classification report. raw_report = classification_report ( self . y_true , self . y_pred , output_dict = True , zero_division = 0 ) self . metrics [ \"Classification Report\" ] = self . _format_dict ( raw_report ) return self . metrics","title":"calculate_metrics"},{"location":"LabeLMaker/Evaluate/evaluator.html#LabeLMaker.Evaluate.evaluator.Evaluator.display_metrics","text":"Returns calculated metrics as a DataFrame. Source code in LabeLMaker/Evaluate/evaluator.py 101 102 103 104 105 106 107 108 109 110 111 def display_metrics ( self ) -> pd . DataFrame : \"\"\" Returns calculated metrics as a DataFrame. \"\"\" metrics_to_display = { k : v for k , v in self . metrics . items () if k not in [ \"Confusion Matrix\" , \"Classification Report\" ] } df = pd . DataFrame ( list ( metrics_to_display . items ()), columns = [ \"Metric\" , \"Value\" ]) return df","title":"display_metrics"},{"location":"LabeLMaker/Evaluate/evaluator.html#LabeLMaker.Evaluate.evaluator.Evaluator.plot_confusion_matrix","text":"Plots the confusion matrix. Parameters: class_labels (List[str], optional): Labels for the classes. Raises: ValueError: If confusion matrix is not calculated. Source code in LabeLMaker/Evaluate/evaluator.py 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 def plot_confusion_matrix ( self , class_labels : Optional [ List [ str ]] = None ) -> plt . Figure : \"\"\" Plots the confusion matrix. Parameters: class_labels (List[str], optional): Labels for the classes. Raises: ValueError: If confusion matrix is not calculated. \"\"\" cm = self . metrics . get ( \"Confusion Matrix\" ) if cm is None : raise ValueError ( \"Confusion Matrix not calculated. Call calculate_metrics() first.\" ) if class_labels is None : class_labels = sorted ( set ( self . y_true ) | set ( self . y_pred )) fig , ax = plt . subplots ( figsize = ( 8 , 6 )) sns . heatmap ( cm , annot = True , fmt = \"d\" , cmap = \"Blues\" , xticklabels = class_labels , yticklabels = class_labels , ax = ax , ) ax . set_title ( \"Confusion Matrix\" ) ax . set_xlabel ( \"Predicted Label\" ) ax . set_ylabel ( \"True Label\" ) plt . close ( fig ) # Close the figure to prevent it from displaying automatically return fig","title":"plot_confusion_matrix"},{"location":"LabeLMaker/utils/category.html","text":"CategoryManager Source code in LabeLMaker/utils/category.py 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 class CategoryManager : @staticmethod def define_categories ( ui_helper , key_prefix , unique_values_str = None , get_file_examples = False ): \"\"\" ui_helper: a helper object wrapping Streamlit calls so that category logic stays separate. \"\"\" ui_helper . markdown ( \"---\" ) if unique_values_str : unique_values = [ val . strip () for val in unique_values_str . split ( \",\" ) if val . strip () . lower () not in [ \"nan\" , \"none\" ] ] num_categories = len ( unique_values ) else : num_categories = int ( ui_helper . number_input ( \"Enter the number of categories\" , min_value = 2 , value = 2 , step = 1 , key = f \" { key_prefix } _categories\" , ) ) unique_values = None categories_dict = {} all_examples = [] for i in range ( num_categories ): with ui_helper . expander ( f \"Category { i + 1 } \" , expanded = True ): if unique_values : category_value = ui_helper . text_input ( f \"Enter label for category { i + 1 } \" , value = unique_values [ i ] . title (), key = f \" { key_prefix } _text_input_ { i + 1 } \" , ) else : category_value = ui_helper . text_input ( f \"Enter label for category { i + 1 } \" , key = f \" { key_prefix } _text_input_ { i + 1 } \" ) category_description = ui_helper . text_input ( f \"Enter description for category { i + 1 } (optional but recommended)\" , \"\" , key = f \" { key_prefix } _desc_input_ { i + 1 } \" , ) categories_dict [ category_value . lower ()] = category_description or \"\" if get_file_examples : uploaded_files = ui_helper . file_uploader ( \"Upload example files for this category\" , type = [ \"docx\" , \"pdf\" ], accept_multiple_files = True , key = f \"example_ { i } \" , ) if uploaded_files : fm = FileManager () filenames , texts = fm . process_multiple_files ( uploaded_files ) if texts : examples_for_category = [ Example ( text_with_label = text , label = category_value ) for text in texts ] all_examples . extend ( examples_for_category ) return categories_dict , all_examples @staticmethod def create_request ( index_list , df_text , categories_dict , examples = None ): categories = [ Categories ( name = name , description = desc ) for name , desc in categories_dict . items () ] # Convert examples from tuple to Example objects if necessary. if examples : new_examples = [] for ex in examples : # If ex is already an Example instance, leave it as is. if isinstance ( ex , Example ): new_examples . append ( ex ) # Otherwise, assume it's a tuple (text, label) and convert it. elif isinstance ( ex , ( list , tuple )) and len ( ex ) == 2 : new_examples . append ( Example ( text_with_label = ex [ 0 ], label = ex [ 1 ])) else : raise ValueError ( \"Example must be an Example object or a tuple of (text, label).\" ) examples = new_examples cat_req = CategorizationRequest ( unique_ids = index_list , text_to_label = df_text , categories = categories , examples = examples ) return cat_req define_categories ( ui_helper , key_prefix , unique_values_str = None , get_file_examples = False ) staticmethod ui_helper: a helper object wrapping Streamlit calls so that category logic stays separate. Source code in LabeLMaker/utils/category.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 @staticmethod def define_categories ( ui_helper , key_prefix , unique_values_str = None , get_file_examples = False ): \"\"\" ui_helper: a helper object wrapping Streamlit calls so that category logic stays separate. \"\"\" ui_helper . markdown ( \"---\" ) if unique_values_str : unique_values = [ val . strip () for val in unique_values_str . split ( \",\" ) if val . strip () . lower () not in [ \"nan\" , \"none\" ] ] num_categories = len ( unique_values ) else : num_categories = int ( ui_helper . number_input ( \"Enter the number of categories\" , min_value = 2 , value = 2 , step = 1 , key = f \" { key_prefix } _categories\" , ) ) unique_values = None categories_dict = {} all_examples = [] for i in range ( num_categories ): with ui_helper . expander ( f \"Category { i + 1 } \" , expanded = True ): if unique_values : category_value = ui_helper . text_input ( f \"Enter label for category { i + 1 } \" , value = unique_values [ i ] . title (), key = f \" { key_prefix } _text_input_ { i + 1 } \" , ) else : category_value = ui_helper . text_input ( f \"Enter label for category { i + 1 } \" , key = f \" { key_prefix } _text_input_ { i + 1 } \" ) category_description = ui_helper . text_input ( f \"Enter description for category { i + 1 } (optional but recommended)\" , \"\" , key = f \" { key_prefix } _desc_input_ { i + 1 } \" , ) categories_dict [ category_value . lower ()] = category_description or \"\" if get_file_examples : uploaded_files = ui_helper . file_uploader ( \"Upload example files for this category\" , type = [ \"docx\" , \"pdf\" ], accept_multiple_files = True , key = f \"example_ { i } \" , ) if uploaded_files : fm = FileManager () filenames , texts = fm . process_multiple_files ( uploaded_files ) if texts : examples_for_category = [ Example ( text_with_label = text , label = category_value ) for text in texts ] all_examples . extend ( examples_for_category ) return categories_dict , all_examples","title":"Category"},{"location":"LabeLMaker/utils/category.html#LabeLMaker.utils.category.CategoryManager","text":"Source code in LabeLMaker/utils/category.py 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 class CategoryManager : @staticmethod def define_categories ( ui_helper , key_prefix , unique_values_str = None , get_file_examples = False ): \"\"\" ui_helper: a helper object wrapping Streamlit calls so that category logic stays separate. \"\"\" ui_helper . markdown ( \"---\" ) if unique_values_str : unique_values = [ val . strip () for val in unique_values_str . split ( \",\" ) if val . strip () . lower () not in [ \"nan\" , \"none\" ] ] num_categories = len ( unique_values ) else : num_categories = int ( ui_helper . number_input ( \"Enter the number of categories\" , min_value = 2 , value = 2 , step = 1 , key = f \" { key_prefix } _categories\" , ) ) unique_values = None categories_dict = {} all_examples = [] for i in range ( num_categories ): with ui_helper . expander ( f \"Category { i + 1 } \" , expanded = True ): if unique_values : category_value = ui_helper . text_input ( f \"Enter label for category { i + 1 } \" , value = unique_values [ i ] . title (), key = f \" { key_prefix } _text_input_ { i + 1 } \" , ) else : category_value = ui_helper . text_input ( f \"Enter label for category { i + 1 } \" , key = f \" { key_prefix } _text_input_ { i + 1 } \" ) category_description = ui_helper . text_input ( f \"Enter description for category { i + 1 } (optional but recommended)\" , \"\" , key = f \" { key_prefix } _desc_input_ { i + 1 } \" , ) categories_dict [ category_value . lower ()] = category_description or \"\" if get_file_examples : uploaded_files = ui_helper . file_uploader ( \"Upload example files for this category\" , type = [ \"docx\" , \"pdf\" ], accept_multiple_files = True , key = f \"example_ { i } \" , ) if uploaded_files : fm = FileManager () filenames , texts = fm . process_multiple_files ( uploaded_files ) if texts : examples_for_category = [ Example ( text_with_label = text , label = category_value ) for text in texts ] all_examples . extend ( examples_for_category ) return categories_dict , all_examples @staticmethod def create_request ( index_list , df_text , categories_dict , examples = None ): categories = [ Categories ( name = name , description = desc ) for name , desc in categories_dict . items () ] # Convert examples from tuple to Example objects if necessary. if examples : new_examples = [] for ex in examples : # If ex is already an Example instance, leave it as is. if isinstance ( ex , Example ): new_examples . append ( ex ) # Otherwise, assume it's a tuple (text, label) and convert it. elif isinstance ( ex , ( list , tuple )) and len ( ex ) == 2 : new_examples . append ( Example ( text_with_label = ex [ 0 ], label = ex [ 1 ])) else : raise ValueError ( \"Example must be an Example object or a tuple of (text, label).\" ) examples = new_examples cat_req = CategorizationRequest ( unique_ids = index_list , text_to_label = df_text , categories = categories , examples = examples ) return cat_req","title":"CategoryManager"},{"location":"LabeLMaker/utils/category.html#LabeLMaker.utils.category.CategoryManager.define_categories","text":"ui_helper: a helper object wrapping Streamlit calls so that category logic stays separate. Source code in LabeLMaker/utils/category.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 @staticmethod def define_categories ( ui_helper , key_prefix , unique_values_str = None , get_file_examples = False ): \"\"\" ui_helper: a helper object wrapping Streamlit calls so that category logic stays separate. \"\"\" ui_helper . markdown ( \"---\" ) if unique_values_str : unique_values = [ val . strip () for val in unique_values_str . split ( \",\" ) if val . strip () . lower () not in [ \"nan\" , \"none\" ] ] num_categories = len ( unique_values ) else : num_categories = int ( ui_helper . number_input ( \"Enter the number of categories\" , min_value = 2 , value = 2 , step = 1 , key = f \" { key_prefix } _categories\" , ) ) unique_values = None categories_dict = {} all_examples = [] for i in range ( num_categories ): with ui_helper . expander ( f \"Category { i + 1 } \" , expanded = True ): if unique_values : category_value = ui_helper . text_input ( f \"Enter label for category { i + 1 } \" , value = unique_values [ i ] . title (), key = f \" { key_prefix } _text_input_ { i + 1 } \" , ) else : category_value = ui_helper . text_input ( f \"Enter label for category { i + 1 } \" , key = f \" { key_prefix } _text_input_ { i + 1 } \" ) category_description = ui_helper . text_input ( f \"Enter description for category { i + 1 } (optional but recommended)\" , \"\" , key = f \" { key_prefix } _desc_input_ { i + 1 } \" , ) categories_dict [ category_value . lower ()] = category_description or \"\" if get_file_examples : uploaded_files = ui_helper . file_uploader ( \"Upload example files for this category\" , type = [ \"docx\" , \"pdf\" ], accept_multiple_files = True , key = f \"example_ { i } \" , ) if uploaded_files : fm = FileManager () filenames , texts = fm . process_multiple_files ( uploaded_files ) if texts : examples_for_category = [ Example ( text_with_label = text , label = category_value ) for text in texts ] all_examples . extend ( examples_for_category ) return categories_dict , all_examples","title":"define_categories"},{"location":"LabeLMaker/utils/class_balance.html","text":"ClassBalance Source code in LabeLMaker/utils/class_balance.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 class ClassBalance : def __init__ ( self , df : pd . DataFrame , class_column : str ) -> None : \"\"\" Initializes the ClassBalance with a DataFrame and class column name. Parameters: df (pd.DataFrame): DataFrame containing the class column. class_column (str): Name of the class column. \"\"\" self . df = df self . class_column = class_column self . balance_df : Optional [ pd . DataFrame ] = None def compute_balance ( self ) -> pd . DataFrame : \"\"\" Computes class balance. Returns: pd.DataFrame: DataFrame containing counts and percentages of each class. \"\"\" counts = self . df [ self . class_column ] . value_counts () percentages = ( counts / len ( self . df )) * 100 self . balance_df = pd . DataFrame ({ \"Count\" : counts , \"Percentage\" : percentages }) return self . balance_df def display_balance ( self ) -> None : \"\"\" Displays class balance. Raises: ValueError: If balance data has not been computed. \"\"\" if self . balance_df is None : raise ValueError ( \"Balance data not computed. Call compute_balance() first.\" ) print ( f \"=== Class Balance for ' { self . class_column } ' ===\" ) print ( self . balance_df ) __init__ ( df , class_column ) Initializes the ClassBalance with a DataFrame and class column name. Parameters: df ( DataFrame ) \u2013 DataFrame containing the class column. class_column ( str ) \u2013 Name of the class column. Source code in LabeLMaker/utils/class_balance.py 7 8 9 10 11 12 13 14 15 16 17 def __init__ ( self , df : pd . DataFrame , class_column : str ) -> None : \"\"\" Initializes the ClassBalance with a DataFrame and class column name. Parameters: df (pd.DataFrame): DataFrame containing the class column. class_column (str): Name of the class column. \"\"\" self . df = df self . class_column = class_column self . balance_df : Optional [ pd . DataFrame ] = None compute_balance () Computes class balance. Returns: DataFrame \u2013 pd.DataFrame: DataFrame containing counts and percentages of each class. Source code in LabeLMaker/utils/class_balance.py 19 20 21 22 23 24 25 26 27 28 29 def compute_balance ( self ) -> pd . DataFrame : \"\"\" Computes class balance. Returns: pd.DataFrame: DataFrame containing counts and percentages of each class. \"\"\" counts = self . df [ self . class_column ] . value_counts () percentages = ( counts / len ( self . df )) * 100 self . balance_df = pd . DataFrame ({ \"Count\" : counts , \"Percentage\" : percentages }) return self . balance_df display_balance () Displays class balance. Raises: ValueError \u2013 If balance data has not been computed. Source code in LabeLMaker/utils/class_balance.py 31 32 33 34 35 36 37 38 39 40 41 def display_balance ( self ) -> None : \"\"\" Displays class balance. Raises: ValueError: If balance data has not been computed. \"\"\" if self . balance_df is None : raise ValueError ( \"Balance data not computed. Call compute_balance() first.\" ) print ( f \"=== Class Balance for ' { self . class_column } ' ===\" ) print ( self . balance_df )","title":"Class Balance"},{"location":"LabeLMaker/utils/class_balance.html#LabeLMaker.utils.class_balance.ClassBalance","text":"Source code in LabeLMaker/utils/class_balance.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 class ClassBalance : def __init__ ( self , df : pd . DataFrame , class_column : str ) -> None : \"\"\" Initializes the ClassBalance with a DataFrame and class column name. Parameters: df (pd.DataFrame): DataFrame containing the class column. class_column (str): Name of the class column. \"\"\" self . df = df self . class_column = class_column self . balance_df : Optional [ pd . DataFrame ] = None def compute_balance ( self ) -> pd . DataFrame : \"\"\" Computes class balance. Returns: pd.DataFrame: DataFrame containing counts and percentages of each class. \"\"\" counts = self . df [ self . class_column ] . value_counts () percentages = ( counts / len ( self . df )) * 100 self . balance_df = pd . DataFrame ({ \"Count\" : counts , \"Percentage\" : percentages }) return self . balance_df def display_balance ( self ) -> None : \"\"\" Displays class balance. Raises: ValueError: If balance data has not been computed. \"\"\" if self . balance_df is None : raise ValueError ( \"Balance data not computed. Call compute_balance() first.\" ) print ( f \"=== Class Balance for ' { self . class_column } ' ===\" ) print ( self . balance_df )","title":"ClassBalance"},{"location":"LabeLMaker/utils/class_balance.html#LabeLMaker.utils.class_balance.ClassBalance.__init__","text":"Initializes the ClassBalance with a DataFrame and class column name. Parameters: df ( DataFrame ) \u2013 DataFrame containing the class column. class_column ( str ) \u2013 Name of the class column. Source code in LabeLMaker/utils/class_balance.py 7 8 9 10 11 12 13 14 15 16 17 def __init__ ( self , df : pd . DataFrame , class_column : str ) -> None : \"\"\" Initializes the ClassBalance with a DataFrame and class column name. Parameters: df (pd.DataFrame): DataFrame containing the class column. class_column (str): Name of the class column. \"\"\" self . df = df self . class_column = class_column self . balance_df : Optional [ pd . DataFrame ] = None","title":"__init__"},{"location":"LabeLMaker/utils/class_balance.html#LabeLMaker.utils.class_balance.ClassBalance.compute_balance","text":"Computes class balance. Returns: DataFrame \u2013 pd.DataFrame: DataFrame containing counts and percentages of each class. Source code in LabeLMaker/utils/class_balance.py 19 20 21 22 23 24 25 26 27 28 29 def compute_balance ( self ) -> pd . DataFrame : \"\"\" Computes class balance. Returns: pd.DataFrame: DataFrame containing counts and percentages of each class. \"\"\" counts = self . df [ self . class_column ] . value_counts () percentages = ( counts / len ( self . df )) * 100 self . balance_df = pd . DataFrame ({ \"Count\" : counts , \"Percentage\" : percentages }) return self . balance_df","title":"compute_balance"},{"location":"LabeLMaker/utils/class_balance.html#LabeLMaker.utils.class_balance.ClassBalance.display_balance","text":"Displays class balance. Raises: ValueError \u2013 If balance data has not been computed. Source code in LabeLMaker/utils/class_balance.py 31 32 33 34 35 36 37 38 39 40 41 def display_balance ( self ) -> None : \"\"\" Displays class balance. Raises: ValueError: If balance data has not been computed. \"\"\" if self . balance_df is None : raise ValueError ( \"Balance data not computed. Call compute_balance() first.\" ) print ( f \"=== Class Balance for ' { self . class_column } ' ===\" ) print ( self . balance_df )","title":"display_balance"},{"location":"LabeLMaker/utils/file_manager.html","text":"","title":"File Manager"},{"location":"LabeLMaker/utils/normalize_text.html","text":"","title":"Normalize Text"},{"location":"LabeLMaker/utils/page_renderer.html","text":"UIHelper A thin wrapper around Streamlit calls so the core logic isn\u2019t tied directly to st.xxx calls. Source code in LabeLMaker/utils/page_renderer.py 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 class UIHelper : \"\"\" A thin wrapper around Streamlit calls so the core logic isn\u2019t tied directly to st.xxx calls. \"\"\" def __init__ ( self ): self . session_state = st . session_state def balloons ( self ): st . balloons () def button ( self , label , key = None ): return st . button ( label , key = key ) def checkbox ( self , label , help , key = None ): return st . checkbox ( label = label , help = help , key = key ) def download_button ( self , label , data , file_name , mime , ** kwargs ): return st . download_button ( label , data , file_name , mime , ** kwargs ) def error ( self , text ): st . error ( text ) def expander ( self , label , expanded = True ): return st . expander ( label , expanded = expanded ) def file_uploader ( self , label , type , accept_multiple_files , key ): return st . file_uploader ( label , type = type , accept_multiple_files = accept_multiple_files , key = key ) def header ( self , text ): return st . header ( text ) def info ( self , text ): st . info ( text ) def markdown ( self , text ): st . markdown ( text ) def multiselect ( self , label , options , ** kwargs ): return st . multiselect ( label , options , ** kwargs ) def number_input ( self , label , ** kwargs ): return st . number_input ( label , ** kwargs ) def pyplot ( self , figure ): st . pyplot ( figure ) def radio ( self , label , options , ** kwargs ): return st . radio ( label , options , ** kwargs ) def rerun ( self ): st . rerun ( scope = \"app\" ) def selectbox ( self , label , options , ** kwargs ): return st . selectbox ( label , options , ** kwargs ) def spinner ( self , text ): return st . spinner ( text ) def subheader ( self , text ): return st . subheader ( text ) def success ( self , text ): st . success ( text ) def text_input ( self , label , value = \"\" , key = None ): return st . text_input ( label , value = value , key = key ) def warning ( self , text ): st . warning ( text , icon = \"\ud83d\udea8\" ) def write ( self , text ): st . write ( text )","title":"Page Renderer"},{"location":"LabeLMaker/utils/page_renderer.html#LabeLMaker.utils.page_renderer.UIHelper","text":"A thin wrapper around Streamlit calls so the core logic isn\u2019t tied directly to st.xxx calls. Source code in LabeLMaker/utils/page_renderer.py 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 class UIHelper : \"\"\" A thin wrapper around Streamlit calls so the core logic isn\u2019t tied directly to st.xxx calls. \"\"\" def __init__ ( self ): self . session_state = st . session_state def balloons ( self ): st . balloons () def button ( self , label , key = None ): return st . button ( label , key = key ) def checkbox ( self , label , help , key = None ): return st . checkbox ( label = label , help = help , key = key ) def download_button ( self , label , data , file_name , mime , ** kwargs ): return st . download_button ( label , data , file_name , mime , ** kwargs ) def error ( self , text ): st . error ( text ) def expander ( self , label , expanded = True ): return st . expander ( label , expanded = expanded ) def file_uploader ( self , label , type , accept_multiple_files , key ): return st . file_uploader ( label , type = type , accept_multiple_files = accept_multiple_files , key = key ) def header ( self , text ): return st . header ( text ) def info ( self , text ): st . info ( text ) def markdown ( self , text ): st . markdown ( text ) def multiselect ( self , label , options , ** kwargs ): return st . multiselect ( label , options , ** kwargs ) def number_input ( self , label , ** kwargs ): return st . number_input ( label , ** kwargs ) def pyplot ( self , figure ): st . pyplot ( figure ) def radio ( self , label , options , ** kwargs ): return st . radio ( label , options , ** kwargs ) def rerun ( self ): st . rerun ( scope = \"app\" ) def selectbox ( self , label , options , ** kwargs ): return st . selectbox ( label , options , ** kwargs ) def spinner ( self , text ): return st . spinner ( text ) def subheader ( self , text ): return st . subheader ( text ) def success ( self , text ): st . success ( text ) def text_input ( self , label , value = \"\" , key = None ): return st . text_input ( label , value = value , key = key ) def warning ( self , text ): st . warning ( text , icon = \"\ud83d\udea8\" ) def write ( self , text ): st . write ( text )","title":"UIHelper"},{"location":"LabeLMaker_config/config.html","text":"Configuration Module containing hardcoded varaibles. Config is a class for easy calling Config Configuration class for the Generative Categorizer application. This class centralizes all the configurable settings and file paths used throughout the application, and it is automatically included in the mkdocs web documentation. Attributes: Development ( Directories ) \u2013 BASE_DIR (Path): The root directory of the project (two levels up from this file). CONFIG_DIR (Path): Directory containing configuration files for the application. LOGS_DIR (Path): Directory where application log files are stored. Data ( Directories ) \u2013 DATA_DIR (Path): Root directory for data storage. RAW_DATA (Path): Directory where raw input data is kept. INTERMEDIATE_DIR (Path): Directory for intermediate data products during processing. RESULTS_DIR (Path): Directory where output results are stored. Configurable ( Variables ) \u2013 MAX_RETRIES (int): The maximum number of retry attempts for operations. MAX_RECOMMENDED_GROUPS (int): The maximum number of recommended groups to display. MIN_SAMPLES_MANY_SHOT (int): Minimum number of samples required for many-shot learning. MIN_SAMPLES_FEW_SHOT (int): Minimum number of samples required for few-shot learning. MIN_LOGISTIC_SAMPLES_PER_CLASS (int): Minimum number of samples required per class in logistic regression. Automated ( Evaluation Settings ) \u2013 MANY_SHOT_TRAIN_RATIO (float): Ratio of training samples to be used in many-shot scenarios. FEW_SHOT_COUNT (int): Number of examples per category for few-shot learning. Database ( Interface Definitions ) \u2013 DB_SERVER (str): The database server address. DB_NAME (str): Name of the database. DB_USER (str): Database user for authentication. DB_PASSWORD (str): Database password for authentication. GPT4_API_KEY (str): API key for GPT-4 (via Azure proxy). AZURE_DOCAI_KEY (str): API key for accessing Azure Document Analysis. AZURE_API_KEY (str): Alias for GPT4_API_KEY used with Azure services. Assets ( Interface Definitions ) \u2013 ASSETS_DIR (Path): Directory containing static assets (like prompt files). ZS_PROMPTY (Path): File path for the zero-shot prompt template. FS_PROMPTY (Path): File path for the few-shot prompt template. LLM ( Specific Settings ) \u2013 LLM_INTERFACE (OpenAI): Configured OpenAI interface using the GPT-4 model. document_analysis_client (DocumentAnalysisClient): Configured Azure client for document analysis. EMBEDDING_CLIENT (OpenAIEmbeddings): Configured OpenAI client for computing text embeddings. Page ( Rendering Configuration ) \u2013 HEADER_MARKDOWN (str): Markdown template used as a header for rendered pages, including important notices and policy information. For additional details on configuration and usage, please refer to the mkdocs documentation. Source code in LabeLMaker_config/config.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 class Config : \"\"\" Configuration class for the Generative Categorizer application. This class centralizes all the configurable settings and file paths used throughout the application, and it is automatically included in the mkdocs web documentation. Attributes: Development Directories: - BASE_DIR (Path): The root directory of the project (two levels up from this file). - CONFIG_DIR (Path): Directory containing configuration files for the application. - LOGS_DIR (Path): Directory where application log files are stored. Data Directories: - DATA_DIR (Path): Root directory for data storage. - RAW_DATA (Path): Directory where raw input data is kept. - INTERMEDIATE_DIR (Path): Directory for intermediate data products during processing. - RESULTS_DIR (Path): Directory where output results are stored. Configurable Variables: - MAX_RETRIES (int): The maximum number of retry attempts for operations. - MAX_RECOMMENDED_GROUPS (int): The maximum number of recommended groups to display. - MIN_SAMPLES_MANY_SHOT (int): Minimum number of samples required for many-shot learning. - MIN_SAMPLES_FEW_SHOT (int): Minimum number of samples required for few-shot learning. - MIN_LOGISTIC_SAMPLES_PER_CLASS (int): Minimum number of samples required per class in logistic regression. Automated Evaluation Settings: - MANY_SHOT_TRAIN_RATIO (float): Ratio of training samples to be used in many-shot scenarios. - FEW_SHOT_COUNT (int): Number of examples per category for few-shot learning. Database Interface Definitions: - DB_SERVER (str): The database server address. - DB_NAME (str): Name of the database. - DB_USER (str): Database user for authentication. - DB_PASSWORD (str): Database password for authentication. - GPT4_API_KEY (str): API key for GPT-4 (via Azure proxy). - AZURE_DOCAI_KEY (str): API key for accessing Azure Document Analysis. - AZURE_API_KEY (str): Alias for GPT4_API_KEY used with Azure services. Assets: - ASSETS_DIR (Path): Directory containing static assets (like prompt files). - ZS_PROMPTY (Path): File path for the zero-shot prompt template. - FS_PROMPTY (Path): File path for the few-shot prompt template. LLM Specific Settings: - LLM_INTERFACE (OpenAI): Configured OpenAI interface using the GPT-4 model. document_analysis_client (DocumentAnalysisClient): Configured Azure client for document analysis. - EMBEDDING_CLIENT (OpenAIEmbeddings): Configured OpenAI client for computing text embeddings. Page Rendering Configuration: - HEADER_MARKDOWN (str): Markdown template used as a header for rendered pages, including important notices and policy information. For additional details on configuration and usage, please refer to the mkdocs documentation. \"\"\" OPENAI_COMPATIBLE_KEY = \"\" # Enter your OpenAI compatible key here OPENAI_COMPATIBLE_ENDPOINT = \"\" # Enter your OpenAI compatible endpoint here # Note: Can delete the azure keys if don't want (or care for) OCR on PDR upload. AZURE_DOCAI_COMPATIBLE_KEY = \"\" # Enter your Azure DocAI compatible key here AZURE_DOCAI_COMPATIBLE_ENDPOINT = \"\" # Enter your Azure DocAI compatible endpoint here # Development Directories BASE_DIR = Path ( __file__ ) . parent . parent . absolute () CONFIG_DIR = Path ( BASE_DIR , \"LabeLMaker_config\" ) LOGS_DIR = Path ( BASE_DIR , \"logs\" ) # Data Directories DATA_DIR = Path ( \"/data/DATASCI\" ) RAW_DATA = Path ( DATA_DIR , \"raw\" ) INTERMEDIATE_DIR = Path ( DATA_DIR , \"intermediate\" ) RESULTS_DIR = Path ( DATA_DIR , \"results\" ) # Configurable variables MAX_RETRIES = 3 MAX_RECOMMENDED_GROUPS = 10 MIN_SAMPLES_MANY_SHOT = 25 MIN_SAMPLES_FEW_SHOT = 1 MIN_LOGISTIC_SAMPLES_PER_CLASS = 100 # Automated selection for eval mode MANY_SHOT_TRAIN_RATIO = 0.8 FEW_SHOT_COUNT = 2 # number of examples per category # Assets ASSETS_DIR = Path ( BASE_DIR , \"assets\" ) ZS_PROMPTY = Path ( ASSETS_DIR , \"gencat_zeroshot.prompty\" ) FS_PROMPTY = Path ( ASSETS_DIR , \"gencat_fewshot.prompty\" ) # LLM specific LLM_INTERFACE = OpenAI ( base_url = OPENAI_COMPATIBLE_ENDPOINT , model = \"gpt-4o-mini\" , api_key = OPENAI_COMPATIBLE_KEY , ) document_analysis_client = DocumentAnalysisClient ( endpoint = AZURE_DOCAI_COMPATIBLE_ENDPOINT , credential = AzureKeyCredential ( AZURE_DOCAI_COMPATIBLE_KEY ), ) EMBEDDING_CLIENT = OpenAIEmbeddings ( api_key = OPENAI_COMPATIBLE_KEY , base_url = OPENAI_COMPATIBLE_ENDPOINT , model = \"text-embedding-3-small\" , ) # Page rendering configuration (separate file?) HEADER_MARKDOWN = \"\"\" --- **Categorize data using AI** Brought to you by the Perioperative Data Science Team at UAB _Not recommended for use with protected patient data_ --- \"\"\"","title":"Config"},{"location":"LabeLMaker_config/config.html#LabeLMaker_config.config.Config","text":"Configuration class for the Generative Categorizer application. This class centralizes all the configurable settings and file paths used throughout the application, and it is automatically included in the mkdocs web documentation. Attributes: Development ( Directories ) \u2013 BASE_DIR (Path): The root directory of the project (two levels up from this file). CONFIG_DIR (Path): Directory containing configuration files for the application. LOGS_DIR (Path): Directory where application log files are stored. Data ( Directories ) \u2013 DATA_DIR (Path): Root directory for data storage. RAW_DATA (Path): Directory where raw input data is kept. INTERMEDIATE_DIR (Path): Directory for intermediate data products during processing. RESULTS_DIR (Path): Directory where output results are stored. Configurable ( Variables ) \u2013 MAX_RETRIES (int): The maximum number of retry attempts for operations. MAX_RECOMMENDED_GROUPS (int): The maximum number of recommended groups to display. MIN_SAMPLES_MANY_SHOT (int): Minimum number of samples required for many-shot learning. MIN_SAMPLES_FEW_SHOT (int): Minimum number of samples required for few-shot learning. MIN_LOGISTIC_SAMPLES_PER_CLASS (int): Minimum number of samples required per class in logistic regression. Automated ( Evaluation Settings ) \u2013 MANY_SHOT_TRAIN_RATIO (float): Ratio of training samples to be used in many-shot scenarios. FEW_SHOT_COUNT (int): Number of examples per category for few-shot learning. Database ( Interface Definitions ) \u2013 DB_SERVER (str): The database server address. DB_NAME (str): Name of the database. DB_USER (str): Database user for authentication. DB_PASSWORD (str): Database password for authentication. GPT4_API_KEY (str): API key for GPT-4 (via Azure proxy). AZURE_DOCAI_KEY (str): API key for accessing Azure Document Analysis. AZURE_API_KEY (str): Alias for GPT4_API_KEY used with Azure services. Assets ( Interface Definitions ) \u2013 ASSETS_DIR (Path): Directory containing static assets (like prompt files). ZS_PROMPTY (Path): File path for the zero-shot prompt template. FS_PROMPTY (Path): File path for the few-shot prompt template. LLM ( Specific Settings ) \u2013 LLM_INTERFACE (OpenAI): Configured OpenAI interface using the GPT-4 model. document_analysis_client (DocumentAnalysisClient): Configured Azure client for document analysis. EMBEDDING_CLIENT (OpenAIEmbeddings): Configured OpenAI client for computing text embeddings. Page ( Rendering Configuration ) \u2013 HEADER_MARKDOWN (str): Markdown template used as a header for rendered pages, including important notices and policy information. For additional details on configuration and usage, please refer to the mkdocs documentation. Source code in LabeLMaker_config/config.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 class Config : \"\"\" Configuration class for the Generative Categorizer application. This class centralizes all the configurable settings and file paths used throughout the application, and it is automatically included in the mkdocs web documentation. Attributes: Development Directories: - BASE_DIR (Path): The root directory of the project (two levels up from this file). - CONFIG_DIR (Path): Directory containing configuration files for the application. - LOGS_DIR (Path): Directory where application log files are stored. Data Directories: - DATA_DIR (Path): Root directory for data storage. - RAW_DATA (Path): Directory where raw input data is kept. - INTERMEDIATE_DIR (Path): Directory for intermediate data products during processing. - RESULTS_DIR (Path): Directory where output results are stored. Configurable Variables: - MAX_RETRIES (int): The maximum number of retry attempts for operations. - MAX_RECOMMENDED_GROUPS (int): The maximum number of recommended groups to display. - MIN_SAMPLES_MANY_SHOT (int): Minimum number of samples required for many-shot learning. - MIN_SAMPLES_FEW_SHOT (int): Minimum number of samples required for few-shot learning. - MIN_LOGISTIC_SAMPLES_PER_CLASS (int): Minimum number of samples required per class in logistic regression. Automated Evaluation Settings: - MANY_SHOT_TRAIN_RATIO (float): Ratio of training samples to be used in many-shot scenarios. - FEW_SHOT_COUNT (int): Number of examples per category for few-shot learning. Database Interface Definitions: - DB_SERVER (str): The database server address. - DB_NAME (str): Name of the database. - DB_USER (str): Database user for authentication. - DB_PASSWORD (str): Database password for authentication. - GPT4_API_KEY (str): API key for GPT-4 (via Azure proxy). - AZURE_DOCAI_KEY (str): API key for accessing Azure Document Analysis. - AZURE_API_KEY (str): Alias for GPT4_API_KEY used with Azure services. Assets: - ASSETS_DIR (Path): Directory containing static assets (like prompt files). - ZS_PROMPTY (Path): File path for the zero-shot prompt template. - FS_PROMPTY (Path): File path for the few-shot prompt template. LLM Specific Settings: - LLM_INTERFACE (OpenAI): Configured OpenAI interface using the GPT-4 model. document_analysis_client (DocumentAnalysisClient): Configured Azure client for document analysis. - EMBEDDING_CLIENT (OpenAIEmbeddings): Configured OpenAI client for computing text embeddings. Page Rendering Configuration: - HEADER_MARKDOWN (str): Markdown template used as a header for rendered pages, including important notices and policy information. For additional details on configuration and usage, please refer to the mkdocs documentation. \"\"\" OPENAI_COMPATIBLE_KEY = \"\" # Enter your OpenAI compatible key here OPENAI_COMPATIBLE_ENDPOINT = \"\" # Enter your OpenAI compatible endpoint here # Note: Can delete the azure keys if don't want (or care for) OCR on PDR upload. AZURE_DOCAI_COMPATIBLE_KEY = \"\" # Enter your Azure DocAI compatible key here AZURE_DOCAI_COMPATIBLE_ENDPOINT = \"\" # Enter your Azure DocAI compatible endpoint here # Development Directories BASE_DIR = Path ( __file__ ) . parent . parent . absolute () CONFIG_DIR = Path ( BASE_DIR , \"LabeLMaker_config\" ) LOGS_DIR = Path ( BASE_DIR , \"logs\" ) # Data Directories DATA_DIR = Path ( \"/data/DATASCI\" ) RAW_DATA = Path ( DATA_DIR , \"raw\" ) INTERMEDIATE_DIR = Path ( DATA_DIR , \"intermediate\" ) RESULTS_DIR = Path ( DATA_DIR , \"results\" ) # Configurable variables MAX_RETRIES = 3 MAX_RECOMMENDED_GROUPS = 10 MIN_SAMPLES_MANY_SHOT = 25 MIN_SAMPLES_FEW_SHOT = 1 MIN_LOGISTIC_SAMPLES_PER_CLASS = 100 # Automated selection for eval mode MANY_SHOT_TRAIN_RATIO = 0.8 FEW_SHOT_COUNT = 2 # number of examples per category # Assets ASSETS_DIR = Path ( BASE_DIR , \"assets\" ) ZS_PROMPTY = Path ( ASSETS_DIR , \"gencat_zeroshot.prompty\" ) FS_PROMPTY = Path ( ASSETS_DIR , \"gencat_fewshot.prompty\" ) # LLM specific LLM_INTERFACE = OpenAI ( base_url = OPENAI_COMPATIBLE_ENDPOINT , model = \"gpt-4o-mini\" , api_key = OPENAI_COMPATIBLE_KEY , ) document_analysis_client = DocumentAnalysisClient ( endpoint = AZURE_DOCAI_COMPATIBLE_ENDPOINT , credential = AzureKeyCredential ( AZURE_DOCAI_COMPATIBLE_KEY ), ) EMBEDDING_CLIENT = OpenAIEmbeddings ( api_key = OPENAI_COMPATIBLE_KEY , base_url = OPENAI_COMPATIBLE_ENDPOINT , model = \"text-embedding-3-small\" , ) # Page rendering configuration (separate file?) HEADER_MARKDOWN = \"\"\" --- **Categorize data using AI** Brought to you by the Perioperative Data Science Team at UAB _Not recommended for use with protected patient data_ --- \"\"\"","title":"Config"}]}